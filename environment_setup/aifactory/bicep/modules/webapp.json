{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "145537462418953944"
    }
  },
  "parameters": {
    "name": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "sku": {
      "type": "object",
      "defaultValue": {
        "name": "S1",
        "tier": "Standard",
        "capacity": 1
      }
    },
    "appSettings": {
      "type": "array",
      "defaultValue": []
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "createPrivateEndpoint": {
      "type": "bool",
      "defaultValue": true
    },
    "vnetName": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "subnetNamePend": {
      "type": "string"
    },
    "ipRules": {
      "type": "array",
      "defaultValue": []
    },
    "allowedOrigins": {
      "type": "array",
      "defaultValue": [
        "https://mlworkspace.azure.ai",
        "https://ml.azure.com",
        "https://*.ml.azure.com",
        "https://ai.azure.com",
        "https://*.ai.azure.com",
        "https://mlworkspacecanary.azure.ai",
        "https://mlworkspace.azureml-test.net",
        "https://42.swedencentral.instances.azureml.ms",
        "https://*.instances.azureml.ms",
        "https://*.azureml.ms"
      ]
    },
    "applicationInsightsName": {
      "type": "string"
    },
    "logAnalyticsWorkspaceName": {
      "type": "string"
    },
    "logAnalyticsWorkspaceRG": {
      "type": "string"
    },
    "runtime": {
      "type": "string",
      "defaultValue": "python",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java"
      ]
    },
    "runtimeVersion": {
      "type": "string",
      "defaultValue": "3.11",
      "allowedValues": [
        "3.7",
        "3.8",
        "3.9",
        "3.10",
        "3.11",
        "3.12",
        "18-lts",
        "20-lts",
        "8",
        "11",
        "17",
        "21",
        "v4.8",
        "v6.0",
        "v7.0",
        "v8.0"
      ]
    },
    "subnetIntegrationName": {
      "type": "string"
    },
    "hostNameSslStatesIn": {
      "type": "array",
      "defaultValue": []
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": true
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {}
    },
    "redundancyMode": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "ActiveActive",
        "Failover",
        "GeoRedundant",
        "Manual",
        "None"
      ],
      "metadata": {
        "description": "Optional. Site redundancy mode."
      }
    },
    "alwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "byoASEv3": {
      "type": "bool",
      "defaultValue": false
    },
    "byoAseFullResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "byoAseAppServicePlanRID": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedIpRules",
        "count": "[length(parameters('ipRules'))]",
        "input": {
          "ipAddress": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'ipAddress'), parameters('ipRules')[copyIndex('formattedIpRules')].ipAddress, if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], '/'), parameters('ipRules')[copyIndex('formattedIpRules')], format('{0}/32', parameters('ipRules')[copyIndex('formattedIpRules')])))]",
          "action": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'action'), parameters('ipRules')[copyIndex('formattedIpRules')].action, 'Allow')]",
          "priority": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'priority'), parameters('ipRules')[copyIndex('formattedIpRules')].priority, add(100, copyIndex('formattedIpRules')))]",
          "name": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'name'), parameters('ipRules')[copyIndex('formattedIpRules')].name, format('Rule-{0}', copyIndex('formattedIpRules')))]",
          "description": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'description'), parameters('ipRules')[copyIndex('formattedIpRules')].description, 'Allow access from IP')]"
        }
      }
    ],
    "servicePlanName": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('{0}-plan', parameters('name')))]",
    "byoACE3Intenal": "[not(empty(parameters('byoAseFullResourceId')))]",
    "aseName": "[last(split(parameters('byoAseFullResourceId'), '/'))]",
    "hostNameSslStatesDefault": "[if(not(empty(parameters('hostNameSslStatesIn'))), parameters('hostNameSslStatesIn'), createArray(createObject('name', format('{0}.azurewebsites.net', parameters('name')), 'hostType', 'Standard', 'sslState', 'Disabled')))]",
    "hostNameSslStates": "[if(parameters('byoASEv3'), createArray(createObject('name', format('{0}.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Standard'), createObject('name', format('{0}.scm.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Repository')), variables('hostNameSslStatesDefault'))]",
    "denyAllRule": {
      "ipAddress": "0.0.0.0/0",
      "action": "Deny",
      "priority": 2147483647,
      "name": "Deny-All",
      "description": "Deny all access by default"
    },
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "condition": "[empty(parameters('byoAseAppServicePlanRID'))]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2024-11-01",
      "name": "[variables('servicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": "[if(parameters('byoASEv3'), createObject('name', 'I1v2', 'tier', 'IsolatedV2', 'size', 'I1v2', 'family', 'Iv2', 'capacity', 1), parameters('sku'))]",
      "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'linux', 'windows')]",
      "properties": {
        "reserved": "[or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python'))]",
        "hostingEnvironmentProfile": "[if(and(parameters('byoASEv3'), not(empty(parameters('byoAseFullResourceId')))), createObject('id', parameters('byoAseFullResourceId')), null())]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2024-11-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'app,linux', 'app')]",
      "identity": "[variables('identity')]",
      "properties": {
        "serverFarmId": "[if(and(not(empty(parameters('byoAseAppServicePlanRID'))), parameters('byoASEv3')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('byoAseAppServicePlanRID'), '/')[2], split(parameters('byoAseAppServicePlanRID'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('byoAseAppServicePlanRID'), '/'))), resourceId('Microsoft.Web/serverfarms', variables('servicePlanName')))]",
        "httpsOnly": true,
        "hostingEnvironmentProfile": "[if(and(not(empty(parameters('byoAseFullResourceId'))), parameters('byoASEv3')), createObject('id', parameters('byoAseFullResourceId')), null())]",
        "virtualNetworkSubnetId": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[1]))]",
        "publicNetworkAccess": "[if(parameters('byoASEv3'), 'Disabled', if(or(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), 'Enabled', 'Disabled'))]",
        "siteConfig": {
          "alwaysOn": "[parameters('alwaysOn')]",
          "cors": {
            "allowedOrigins": "[parameters('allowedOrigins')]"
          },
          "ipSecurityRestrictions": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), createArray(), concat(variables('formattedIpRules'), createArray(variables('denyAllRule'))))]",
          "linuxFxVersion": "[if(equals(parameters('runtime'), 'python'), format('PYTHON|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'node'), format('NODE|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'java'), format('JAVA|{0}', parameters('runtimeVersion')), '')))]",
          "netFrameworkVersion": "[if(equals(parameters('runtime'), 'dotnet'), parameters('runtimeVersion'), null())]",
          "appSettings": "[concat(parameters('appSettings'), if(not(empty(parameters('applicationInsightsName'))), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', if(not(empty(parameters('applicationInsightsName'))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, '')), createObject('name', 'ApplicationInsightsAgent_EXTENSION_VERSION', 'value', '~2')), createArray()))]"
        },
        "hostNameSslStates": "[variables('hostNameSslStates')]",
        "redundancyMode": "[parameters('redundancyMode')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
      ]
    },
    {
      "condition": "[and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2023-05-01",
      "name": "[format('p-{0}-webapp', parameters('name'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "subnet": {
          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[1])]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "[format('p-{0}-webapp', parameters('name'))]",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
              "groupIds": [
                "sites"
              ],
              "privateLinkServiceConnectionState": {
                "status": "Approved",
                "description": "Auto-Approved",
                "actionsRequired": "None"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "webAppName": {
      "type": "string",
      "value": "[parameters('name')]"
    },
    "webAppId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
    },
    "defaultHostname": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01').defaultHostName]"
    },
    "principalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01', 'full').identity.principalId]"
    },
    "dnsConfig": {
      "type": "array",
      "value": [
        {
          "name": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), format('p-{0}-webapp', parameters('name')), '')]",
          "type": "azurewebapps",
          "id": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), resourceId('Microsoft.Web/sites', parameters('name')), '')]"
        }
      ]
    }
  }
}