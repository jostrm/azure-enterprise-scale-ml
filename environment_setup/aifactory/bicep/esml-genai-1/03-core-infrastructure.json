{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "8664096169910482560"
    }
  },
  "parameters": {
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant ID"
      }
    },
    "keyvaultExists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount1001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount2001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "acrProjectExists": {
      "type": "bool",
      "defaultValue": false
    },
    "applicationInsightExists": {
      "type": "bool",
      "defaultValue": false
    },
    "vmExists": {
      "type": "bool",
      "defaultValue": false
    },
    "bingExists": {
      "type": "bool",
      "defaultValue": false
    },
    "serviceSettingDeployBingSearch": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Bing Search deployment"
      }
    },
    "serviceSettingDeployProjectVM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable private VM deployment"
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetNameFull": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "defaultSubnet": {
      "type": "string",
      "defaultValue": "snet-common"
    },
    "genaiSubnetName": {
      "type": "string",
      "defaultValue": "snet-genai"
    },
    "targetResourceGroup": {
      "type": "string"
    },
    "commonResourceGroup": {
      "type": "string"
    },
    "keyvaultSoftDeleteDays": {
      "type": "int",
      "defaultValue": 90
    },
    "keyvaultEnablePurgeProtection": {
      "type": "bool",
      "defaultValue": true
    },
    "vmSKUSelectedArrayIndex": {
      "type": "int",
      "defaultValue": 2
    },
    "vmSKU": {
      "type": "array",
      "defaultValue": [
        "Standard_E2s_v3",
        "Standard_D4s_v3",
        "standard_D2as_v5"
      ]
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "string"
    },
    "hybridBenefit": {
      "type": "bool",
      "defaultValue": false
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true
    },
    "bingSearchSKU": {
      "type": "string",
      "defaultValue": "S1"
    },
    "projecttags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "uniqueInAIFenv": {
      "type": "string",
      "defaultValue": ""
    },
    "prjResourceSuffixNoDash": {
      "type": "string",
      "defaultValue": ""
    },
    "restore": {
      "type": "bool",
      "defaultValue": true
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": ""
    },
    "inputKeyvault": {
      "type": "string"
    },
    "inputKeyvaultResourcegroup": {
      "type": "string"
    },
    "inputKeyvaultSubscription": {
      "type": "string"
    },
    "projectServicePrincipleOID_SeedingKeyvaultName": {
      "type": "string"
    },
    "projectServicePrincipleAppID_SeedingKeyvaultName": {
      "type": "string"
    },
    "projectServicePrincipleSecret_SeedingKeyvaultName": {
      "type": "string"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "processedIpRulesKv",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesKv')])]"
        }
      },
      {
        "name": "processedIpRulesSa",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')])]"
        }
      }
    ],
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "cmnName": "cmn",
    "genaiName": "genai",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', variables('projectName'), parameters('env'), parameters('uniqueInAIFenv'))]",
    "keyvaultName": "[format('kv-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "var_kv1_name": "[variables('keyvaultName')]",
    "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "acrProjectName": "[replace(format('acr{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "acrCommonName": "[replace(format('acr{0}{1}{2}{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "applicationInsightName": "[format('appi-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "vmName": "[format('vm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "laWorkspaceName": "[format('law-{0}esml-common-{1}-{2}{3}', parameters('commonRGNamePrefix'), parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix'))]",
    "kvNameCommon": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "subnet_genai_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), parameters('genaiSubnetName'))]"
    },
    "subnet_aks_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), format('aks-{0}', variables('projectName')))]"
    },
    "var_all_principals": [],
    "p011_genai_team_lead_array": [],
    "secretGetListSet": {
      "secrets": [
        "get",
        "list",
        "set"
      ]
    },
    "secretGetList": {
      "secrets": [
        "get",
        "list"
      ]
    },
    "secretGet": {
      "secrets": [
        "get"
      ]
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('targetResourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[not(parameters('storageAccount1001Exists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMLGenAIStorageAcc4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccount1001Name')]"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "blobPrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-blob-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "filePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-file-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "queuePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-queue-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tablePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-table-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "containers": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "files": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "vnetRules": {
            "value": [
              "[variables('subnet_genai_ref').id]",
              "[variables('subnet_aks_ref').id]"
            ]
          },
          "ipRules": "[if(empty(variables('processedIpRulesSa')), createObject('value', createArray()), createObject('value', variables('processedIpRulesSa')))]",
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://*.ml.azure.com",
                  "https://ai.azure.com",
                  "https://*.ai.azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
                  "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]",
                  "https://*.instances.azureml.ms",
                  "https://*.azureml.ms"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "maxAgeInSeconds": 2520,
                "exposedHeaders": [
                  "*"
                ],
                "allowedHeaders": [
                  "*"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9433826304063167379"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new storage account"
              }
            },
            "blobPrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies name of the blob private endpoint"
              }
            },
            "filePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the file service private endpoint"
              }
            },
            "queuePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the queue service private endpoint"
              }
            },
            "tablePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the table service private endpoint"
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "files": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Specifies the name of the storage account SKU"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the id of the subnet used for the private endpoints"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the storage acocunt resources"
              }
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "action": "Allow",
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]"
                }
              }
            ],
            "groupIds": [
              {
                "name": "[parameters('blobPrivateEndpointName')]",
                "gid": "blob"
              },
              {
                "name": "[parameters('filePrivateEndpointName')]",
                "gid": "file"
              },
              {
                "name": "[parameters('queuePrivateEndpointName')]",
                "gid": "queue"
              },
              {
                "name": "[parameters('tablePrivateEndpointName')]",
                "gid": "table"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "sacc2::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "sacc::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": true,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), null())]"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicGenAIAccess'), false())]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": false,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": "[variables('rules')]",
                  "ipRules": "[if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('blobPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('blobPrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('blobPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('filePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('filePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('filePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "file"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('queuePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('queuePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('queuePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "queue"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('tablePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('tablePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('tablePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "table"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), parameters('storageAccountName'), parameters('storageAccountName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('blobPrivateEndpointName')]",
                  "type": "blob",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('filePrivateEndpointName')]",
                  "type": "file",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('queuePrivateEndpointName')]",
                  "type": "queue",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('tablePrivateEndpointName')]",
                  "type": "table",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[not(parameters('keyvaultExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[variables('keyvaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "enablePurgeProtection": {
            "value": "[parameters('keyvaultEnablePurgeProtection')]"
          },
          "soft_delete_days": {
            "value": "[parameters('keyvaultSoftDeleteDays')]"
          },
          "tenantIdentity": {
            "value": "[parameters('tenantId')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}-kv1-to-vnt-mlcmn', variables('projectName'))]"
          },
          "keyvaultNetworkPolicySubnets": {
            "value": [
              "[variables('subnet_genai_ref').id]",
              "[variables('subnet_aks_ref').id]"
            ]
          },
          "accessPolicies": {
            "value": []
          },
          "ipRules": "[if(empty(variables('processedIpRulesKv')), createObject('value', createArray()), createObject('value', variables('processedIpRulesKv')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14656584830533010964"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the keyvault that is created"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with keyvault resources"
              }
            },
            "tenantIdentity": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the tenant which the keyvault belongs to"
              }
            },
            "keyvaultNetworkPolicySubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an object containing network policies"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of objects containing access policies"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of objects containing ip rules"
              }
            },
            "soft_delete_days": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location"
              }
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('keyvaultNetworkPolicySubnets'))]",
                "input": {
                  "id": "[parameters('keyvaultNetworkPolicySubnets')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyvaultName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": false,
                "enabledForDiskEncryption": false,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": "[if(parameters('enablePurgeProtection'), parameters('soft_delete_days'), null())]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "publicNetworkAccess": "[if(or(and(parameters('enablePublicGenAIAccess'), not(empty(parameters('ipRules')))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "tenantId": "[parameters('tenantIdentity')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccessWithPerimeter'), 'Allow', 'Deny'), 'ipRules', parameters('ipRules'), 'virtualNetworkRules', variables('rules')), null())]",
                "accessPolicies": "[parameters('accessPolicies')]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                      "groupIds": [
                        "vault"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2023-07-01').vaultUri]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "vault",
                  "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('acrProjectExists')), equals(parameters('useCommonACR'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('acrProjectName')]"
          },
          "skuName": {
            "value": "Premium"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}{1}-containerreg-to-vnt-mlcmn', variables('projectName'), parameters('locationSuffix'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1922574652700650329"
            }
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the Azure container registry that will be deployed"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Premium"
              ],
              "metadata": {
                "description": "(Optional) Specifies the Azure container registry service tier name, defaults to premium because of the private endpoints association"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with azure container registry resources"
              }
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "policyOn": "disabled",
            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2024-11-01-preview",
              "name": "[variables('containerRegistryNameCleaned')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'ipRules', createArray()), null())]",
                "dataEndpointEnabled": false,
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[variables('policyOn')]"
                  },
                  "retentionPolicy": {
                    "status": "[variables('policyOn')]",
                    "days": 7
                  },
                  "trustPolicy": {
                    "status": "[variables('policyOn')]",
                    "type": "Notary"
                  }
                },
                "publicNetworkAccess": "[if(not(parameters('enablePublicAccessWithPerimeter')), 'Disabled', 'Enabled')]",
                "zoneRedundancy": "Disabled"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                      "groupIds": [
                        "registry"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryNameCleaned')]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned')), '2024-11-01-preview').loginServer]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "registry",
                  "id": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[not(parameters('applicationInsightExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AppInsightsSWC4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('applicationInsightName')]"
          },
          "logWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logWorkspaceNameRG": {
            "value": "[parameters('commonResourceGroup')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8353361888659384685"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the application insight resources"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the application insights resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location where application insights should be deployed"
              }
            },
            "logWorkspaceName": {
              "type": "string"
            },
            "logWorkspaceNameRG": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceNameRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]"
              }
            }
          ],
          "outputs": {
            "ainsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('vmExists')), equals(parameters('serviceSettingDeployProjectVM'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privVM4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "hybridBenefit": {
            "value": "[parameters('hybridBenefit')]"
          },
          "vmSize": {
            "value": "[parameters('vmSKU')[parameters('vmSKUSelectedArrayIndex')]]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('vmName')]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "vnetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetNameFull'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "keyvaultName": {
            "value": "[variables('var_kv1_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "149838002065094260"
            }
          },
          "parameters": {
            "kvSecretNameSuffix": {
              "type": "string",
              "defaultValue": "-001",
              "metadata": {
                "description": "default is -001 such as esml-dsvm-username-001 as secret name in keyvault Ex: creating multipe VM -001, -002,-003"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Specifies a secure string used as password new local admin user"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the local admin user"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2_v3",
              "metadata": {
                "description": "Size of the virtual machine."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "location for all resources"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual machine"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet that the virtual machine should be connected to"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "Specift the virtual network id used for network interface"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The tags that should be applied on virtual machine resources"
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) speficies the keyvault used to save local admin credentials"
              }
            },
            "hybridBenefit": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Required) true if Hybrid benefits for Windows server VMs, else FALSE for Pay-as-you-go"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1736467877,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended for production purpose is to upgrade to Premium_LRS "
              }
            },
            "extraDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended is to upgrade to Premium_LRS for productional purpose "
              }
            },
            "extraDiskSizeGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "default is 128GB, change to bigger, 1024, GB if much local data"
              }
            }
          },
          "variables": {
            "nicName": "[format('{0}-nic-{1}', parameters('vmName'), substring(uniqueString(parameters('vmName')), 0, 5))]",
            "subnetRef": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]",
            "esmlProjectKVNameUser": "[format('esml-dsvm-username{0}', parameters('kvSecretNameSuffix'))]",
            "esmlProjectKVNamePwd": "[format('esml-dsvm-password{0}', parameters('kvSecretNameSuffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[variables('subnetRef')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2020-12-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "licenseType": "[if(equals(parameters('hybridBenefit'), true()), 'Windows_Server', 'None')]",
                "osProfile": {
                  "computerName": "[substring(parameters('vmName'), 0, 14)]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVMAgent": true,
                    "patchSettings": {
                      "enableHotpatching": false,
                      "patchMode": "AutomaticByOS"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "microsoft-dsvm",
                    "offer": "dsvm-win-2022",
                    "sku": "winserver-2022",
                    "version": "latest"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "diskSizeGB": 256,
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]"
                    }
                  },
                  "dataDisks": [
                    {
                      "diskSizeGB": "[parameters('extraDiskSizeGB')]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('extraDiskType')]"
                      },
                      "lun": 0,
                      "createOption": "Empty"
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "typeHandlerVersion": "1.0",
                "type": "AADLoginForWindows",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.DevTestLab/schedules",
              "apiVersion": "2018-09-15",
              "name": "[format('shutdown-computevm-{0}', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "dailyRecurrence": {
                  "time": "0330"
                },
                "status": "Enabled",
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "taskType": "ComputeVmShutdownTask",
                "timeZoneId": "W. Europe Standard Time"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNameUser'))]",
              "properties": {
                "value": "[parameters('adminUsername')]",
                "contentType": "ESML generated local admin",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNamePwd'))]",
              "properties": {
                "contentType": "[format('ESML generated local admin password for username {0} on VM', parameters('adminUsername'))]",
                "value": "[parameters('adminPassword')]",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('bingExists')), equals(parameters('serviceSettingDeployBingSearch'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('BingSearch4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('bingName')]"
          },
          "location": {
            "value": "global"
          },
          "sku": {
            "value": "[parameters('bingSearchSKU')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17179168099573302819"
            },
            "description": "Creates a Bing Search Grounding instance."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "global"
            },
            "sku": {
              "type": "string",
              "defaultValue": "G1"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Bing/accounts",
              "apiVersion": "2020-06-10",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Bing.Grounding",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Bing/accounts'), parameters('tags')['Microsoft.Bing/accounts'], json('{}'))]",
              "sku": {
                "name": "[parameters('sku')]"
              }
            }
          ],
          "outputs": {
            "bingApiKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Bing/accounts', parameters('name')), '2020-06-10').key1]"
            },
            "endpoint": {
              "type": "string",
              "value": "https://api.bing.microsoft.com/"
            },
            "bingName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[not(parameters('keyvaultExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}S2P{1}', variables('keyvaultName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spAppIDValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleAppID_SeedingKeyvaultName')]"
            }
          },
          "spOIDValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          },
          "spSecretValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleSecret_SeedingKeyvaultName')]"
            }
          },
          "keyvaultName": {
            "value": "[variables('var_kv1_name')]"
          },
          "keyvaultNameRG": {
            "value": "[parameters('targetResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18118337329344880976"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": " KEYVAULT for ESML coreteam or PROJECT team"
              }
            },
            "keyvaultNameRG": {
              "type": "string"
            },
            "spIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-id",
              "metadata": {
                "description": "secret name of App ID for service principle"
              }
            },
            "spAppIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ID"
              }
            },
            "spSecret": {
              "type": "string",
              "defaultValue": "esml-project-sp-secret",
              "metadata": {
                "description": "secret name of for service principle App ID"
              }
            },
            "spSecretValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle secret"
              }
            },
            "esmlTenantID": {
              "type": "string",
              "defaultValue": "esml-tenant-id",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlTenantIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlSubscriptionID": {
              "type": "string",
              "defaultValue": "esml-subscription-id",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "esmlSubscriptionIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1799626400,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "spOIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-oid",
              "metadata": {
                "description": "secret name of Object ID for service principle"
              }
            },
            "spOIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ObjectID"
              }
            }
          },
          "variables": {
            "esml_project_dbx_token_key": "esml-project-dbx-token"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esml_project_dbx_token_key'))]",
              "properties": {
                "value": "TODO Databricks token",
                "contentType": "ESML generated. TODO:Databricks token - needed for Azure ML pipelines with DatabricksSteps",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spIDKey'))]",
              "properties": {
                "value": "[parameters('spAppIDValue')]",
                "contentType": "Application ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spSecret'))]",
              "properties": {
                "value": "[parameters('spSecretValue')]",
                "contentType": "ESML generated. From seeding keyvalt (esml-project-sp-secret). Project specific service principle secret",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spOIDKey'))]",
              "properties": {
                "value": "[parameters('spOIDValue')]",
                "contentType": "OBJECT ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlTenantID'))]",
              "properties": {
                "value": "[parameters('esmlTenantIDSecret')]",
                "contentType": "ESML generated - tenant ID",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlSubscriptionID'))]",
              "properties": {
                "value": "[parameters('esmlSubscriptionIDSecret')]",
                "contentType": "ESML generated - Subscription ID for current ESML environment",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('keyvaultExists')), not(empty(parameters('technicalContactId'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}AP{1}', variables('keyvaultName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGetListSet')]"
          },
          "keyVaultResourceName": {
            "value": "[variables('var_kv1_name')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalPrincipalIds": {
            "value": "[variables('var_all_principals')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('{0}S2P{1}', variables('keyvaultName'), variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('technicalContactId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}GL{1}', variables('kvNameCommon'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGetList')]"
          },
          "keyVaultResourceName": {
            "value": "[variables('kvNameCommon')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalPrincipalIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('spGetList{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGet')]"
          },
          "keyVaultResourceName": {
            "value": "[variables('kvNameCommon')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          },
          "additionalPrincipalIds": {
            "value": []
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "keyVaultDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Key Vault deployment status"
      },
      "value": "[not(parameters('keyvaultExists'))]"
    },
    "storageAccount1001Deployed": {
      "type": "bool",
      "metadata": {
        "description": "Storage Account 1001 deployment status"
      },
      "value": "[not(parameters('storageAccount1001Exists'))]"
    },
    "containerRegistryDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Container Registry deployment status"
      },
      "value": "[and(not(parameters('acrProjectExists')), equals(parameters('useCommonACR'), false()))]"
    },
    "applicationInsightsDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Application Insights deployment status"
      },
      "value": "[not(parameters('applicationInsightExists'))]"
    },
    "virtualMachineDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Virtual Machine deployment status"
      },
      "value": "[and(not(parameters('vmExists')), parameters('serviceSettingDeployProjectVM'))]"
    },
    "bingSearchDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Bing Search deployment status"
      },
      "value": "[and(not(parameters('bingExists')), parameters('serviceSettingDeployBingSearch'))]"
    }
  }
}