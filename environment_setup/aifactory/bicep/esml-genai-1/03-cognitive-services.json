{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "13046640971441719442"
    }
  },
  "parameters": {
    "semanticSearchTier": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "disabled",
        "free",
        "standard"
      ]
    },
    "aiSearchSKUName": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "free",
        "basic",
        "standard",
        "standard2",
        "standard3",
        "storage_optimized_l1",
        "storage_optimized_l2"
      ]
    },
    "aiSearchReplicaCount": {
      "type": "int",
      "defaultValue": 1
    },
    "aiSearchPartitionCount": {
      "type": "int",
      "defaultValue": 1
    },
    "csAIservicesSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csOpenAISKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csContentSafetySKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csVisionSKU": {
      "type": "string",
      "defaultValue": "S1"
    },
    "csSpeechSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csDocIntelligenceSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "storageAccountSkuName": {
      "type": "string",
      "defaultValue": "Standard_LRS"
    },
    "aifactoryVersionMajor": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "AI Factory version information"
      }
    },
    "aifactoryVersionMinor": {
      "type": "int",
      "defaultValue": 22
    },
    "diagnosticSettingLevel": {
      "type": "string",
      "defaultValue": "silver",
      "allowedValues": [
        "gold",
        "silver",
        "bronze"
      ],
      "metadata": {
        "description": "Diagnostic setting level for monitoring and logging"
      }
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "randomValue": {
      "type": "string",
      "metadata": {
        "description": "Random value for deployment uniqueness"
      }
    },
    "aiServicesExists": {
      "type": "bool",
      "defaultValue": false
    },
    "openaiExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiSearchExists": {
      "type": "bool",
      "defaultValue": false
    },
    "keyvaultExists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount2001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount1001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "miACAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miPrjExists": {
      "type": "bool",
      "defaultValue": false
    },
    "technicalAdminsObjectID": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsEmail": {
      "type": "string",
      "defaultValue": ""
    },
    "enableAIServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Services deployment"
      }
    },
    "enableAISearch": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Search deployment"
      }
    },
    "enableAzureOpenAI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable specific service deployments"
      }
    },
    "enableContentSafety": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAzureAIVision": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAzureSpeech": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAIDocIntelligence": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_gpt_X": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy GPT-X model"
      }
    },
    "modelGPTXName": {
      "type": "string",
      "defaultValue": "gpt-5-mini",
      "metadata": {
        "description": "GPT-X model name if deploying"
      }
    },
    "modelGPTXVersion": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "GPT-X model version if deploying"
      }
    },
    "modelGPTXSku": {
      "type": "string",
      "defaultValue": "DataZoneStandard",
      "allowedValues": [
        "Standard",
        "DataZoneStandard",
        "GlobalStandard"
      ]
    },
    "modelGPTXCapacity": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "TPM:Tokens per Minute Rate Limit in K=1000) 30 meaning 30K"
      }
    },
    "deployModel_text_embedding_3_large": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_text_embedding_3_small": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_text_embedding_ada_002": {
      "type": "bool",
      "defaultValue": false
    },
    "default_embedding_capacity": {
      "type": "int",
      "defaultValue": 25
    },
    "deployModel_gpt_4o_mini": {
      "type": "bool",
      "defaultValue": false
    },
    "default_gpt_capacity": {
      "type": "int",
      "defaultValue": 40
    },
    "default_model_sku": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicNetworkAccessForCognitive": {
      "type": "bool",
      "defaultValue": true
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": false
    },
    "genaiSubnetId": {
      "type": "string",
      "metadata": {
        "description": "Required subnet IDs from subnet calculator"
      }
    },
    "aksSubnetId": {
      "type": "string"
    },
    "acaSubnetId": {
      "type": "string"
    },
    "aca2SubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional subnets from subnet calculator"
      }
    },
    "aks2SubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "dbxPubSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "if projectype is not genai-1, but instead all"
      }
    },
    "dbxPrivSubnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameBase": {
      "type": "string"
    },
    "vnetResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameFull_param": {
      "type": "string",
      "defaultValue": ""
    },
    "network_env": {
      "type": "string",
      "defaultValue": ""
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "privDnsSubscription_param": {
      "type": "string",
      "defaultValue": ""
    },
    "privDnsResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "commonResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySalt10char": {
      "type": "string",
      "defaultValue": ""
    },
    "aiSearchEnableSharedPrivateLink": {
      "type": "bool",
      "defaultValue": false
    },
    "serviceSettingOverrideRegionAzureAIVision": {
      "type": "string",
      "defaultValue": ""
    },
    "serviceSettingOverrideRegionAzureAIVisionShort": {
      "type": "string",
      "defaultValue": ""
    },
    "tagsProject": {
      "type": "object",
      "defaultValue": {}
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "keyvaultSoftDeleteDays": {
      "type": "int",
      "defaultValue": 90
    },
    "restore": {
      "type": "bool",
      "defaultValue": false
    },
    "projectPrefix": {
      "type": "string",
      "defaultValue": "esml-"
    },
    "projectSuffix": {
      "type": "string",
      "defaultValue": "-rg"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "processedIpRulesAIServices",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIServices')])]"
        }
      },
      {
        "name": "processedIpRulesAISearch",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesAISearch')])]"
        }
      },
      {
        "name": "processedIpRulesSa",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')])]"
        }
      }
    ],
    "activeVersion": 122,
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "commonResourceGroup": "[if(not(empty(parameters('commonResourceGroup_param'))), parameters('commonResourceGroup_param'), format('{0}esml-common-{1}-{2}{3}', parameters('commonRGNamePrefix'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG')))]",
    "targetResourceGroup": "[format('{0}{1}{2}-{3}-{4}{5}{6}', parameters('commonRGNamePrefix'), parameters('projectPrefix'), replace(variables('projectName'), 'prj', 'project'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG'), parameters('projectSuffix'))]",
    "vnetNameFull": "[if(not(empty(parameters('vnetNameFull_param'))), replace(parameters('vnetNameFull_param'), '<network_env>', parameters('network_env')), format('{0}-{1}-{2}{3}', parameters('vnetNameBase'), parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix')))]",
    "vnetResourceGroupName": "[if(not(empty(parameters('vnetResourceGroup_param'))), replace(parameters('vnetResourceGroup_param'), '<network_env>', parameters('network_env')), variables('commonResourceGroup'))]",
    "privDnsResourceGroupName": "[if(and(not(empty(parameters('privDnsResourceGroup_param'))), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsResourceGroup_param'), variables('vnetResourceGroupName'))]",
    "privDnsSubscription": "[if(and(not(empty(parameters('privDnsSubscription_param'))), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsSubscription_param'), subscription().subscriptionId)]",
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', parameters('projectNumber'), parameters('env'), variables('targetResourceGroup'))]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "kindContentSafety": "ContentSafety",
    "kindAIServices": "AIServices",
    "kindAOpenAI": "OpenAI"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privDnsResourceGroupName": {
            "value": "[variables('privDnsResourceGroupName')]"
          },
          "privDnsSubscription": {
            "value": "[variables('privDnsSubscription')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13811377964307861425"
            }
          },
          "parameters": {
            "privDnsSubscription": {
              "type": "string"
            },
            "privDnsResourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "privateDnsZoneName": {
              "azureusgovernment": "privatelink.api.ml.azure.us",
              "azurechinacloud": "privatelink.api.ml.azure.cn",
              "azurecloud": "privatelink.api.azureml.ms"
            },
            "privateAznbDnsZoneName": {
              "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
              "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
              "azurecloud": "privatelink.notebooks.azure.net"
            },
            "privateLinksDnsZones": {
              "blob": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
              },
              "file": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.file.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
              },
              "dfs": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]"
              },
              "queue": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.queue.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.queue.{0}', environment().suffixes.storage)]"
              },
              "table": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.table.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.table.{0}', environment().suffixes.storage)]"
              },
              "registry": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azurecr.io"
              },
              "registryregion": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}.data.privatelink.azurecr.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), parameters('location'))]",
                "name": "[format('{0}.data.privatelink.azurecr.io', parameters('location'))]"
              },
              "vault": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.vaultcore.azure.net"
              },
              "amlworkspace": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), variables('privateDnsZoneName')[toLower(environment().name)])]",
                "name": "[variables('privateDnsZoneName')[toLower(environment().name)]]"
              },
              "notebooks": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), variables('privateAznbDnsZoneName')[toLower(environment().name)])]",
                "name": "[variables('privateAznbDnsZoneName')[toLower(environment().name)]]"
              },
              "dataFactory": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.datafactory.azure.net"
              },
              "portal": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.adf.azure.com"
              },
              "openai": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.openai.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.openai.azure.com"
              },
              "searchService": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.search.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.search.windows.net"
              },
              "azurewebapps": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurewebsites.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azurewebsites.net"
              },
              "cosmosdbnosql": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.documents.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.documents.azure.com"
              },
              "cognitiveservices": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.cognitiveservices.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.cognitiveservices.azure.com"
              },
              "azuredatabricks": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azuredatabricks.net"
              },
              "namespace": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.servicebus.windows.net"
              },
              "azureeventgrid": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.eventgrid.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.eventgrid.azure.net"
              },
              "azuremonitor": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.monitor.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.monitor.azure.com"
              },
              "azuremonitoroms": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.oms.opinsights.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.oms.opinsights.azure.com"
              },
              "azuremonitorods": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.ods.opinsights.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.ods.opinsights.azure.com"
              },
              "azuremonitoragentsvc": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.agentsvc.azure-automation.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.agentsvc.azure-automation.net"
              },
              "servicesai": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.services.ai.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.services.ai.azure.com"
              },
              "azurecontainerapps": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.{2}.azurecontainerapps.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), parameters('location'))]",
                "name": "[format('privatelink.{0}.azurecontainerapps.io', parameters('location'))]"
              },
              "redis": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.redis.cache.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.redis.cache.windows.net"
              },
              "postgres": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.postgres.database.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.postgres.database.azure.com"
              },
              "sql": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.database.windows.net"
              },
              "cosmosdbmongo": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.mongo.cosmos.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.mongo.cosmos.azure.com"
              }
            }
          },
          "resources": [],
          "outputs": {
            "privateLinksDnsZones": {
              "type": "object",
              "value": "[variables('privateLinksDnsZones')]"
            }
          }
        }
      }
    },
    {
      "condition": "[not(parameters('miPrjExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1018302119329499090"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity name"
              }
            }
          },
          "resources": [],
          "outputs": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "Client ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').clientId]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the managed identity"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Managed identity name"
              },
              "value": "[parameters('managedIdentityName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('miACAExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1018302119329499090"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity name"
              }
            }
          },
          "resources": [],
          "outputs": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "Client ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').clientId]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the managed identity"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Managed identity name"
              },
              "value": "[parameters('managedIdentityName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-naming-{0}', variables('targetResourceGroup')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceSuffix": {
            "value": "[parameters('commonResourceSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt10char": {
            "value": "[parameters('aifactorySalt10char')]"
          },
          "randomValue": {
            "value": "[parameters('randomValue')]"
          },
          "aifactorySuffixRG": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "commonRGNamePrefix": {
            "value": "[parameters('commonRGNamePrefix')]"
          },
          "technicalAdminsObjectID": {
            "value": "[parameters('technicalAdminsObjectID')]"
          },
          "technicalAdminsEmail": {
            "value": "[parameters('technicalAdminsEmail')]"
          },
          "commonResourceGroupName": {
            "value": "[variables('commonResourceGroup')]"
          },
          "subscriptionIdDevTestProd": {
            "value": "[variables('subscriptionIdDevTestProd')]"
          },
          "genaiSubnetId": {
            "value": "[parameters('genaiSubnetId')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "acaSubnetId": {
            "value": "[parameters('acaSubnetId')]"
          },
          "aca2SubnetId": {
            "value": "[parameters('aca2SubnetId')]"
          },
          "aks2SubnetId": {
            "value": "[parameters('aks2SubnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12584890335791498911"
            }
          },
          "definitions": {
            "aifactoryNamingType": {
              "type": "object",
              "properties": {
                "genaiSubnetName": {
                  "type": "string"
                },
                "aksSubnetName": {
                  "type": "string"
                },
                "aks2SubnetName": {
                  "type": "string"
                },
                "acaSubnetName": {
                  "type": "string"
                },
                "aca2SubnetName": {
                  "type": "string"
                },
                "defaultSubnet": {
                  "type": "string"
                },
                "aifV1HubName": {
                  "type": "string"
                },
                "aifV1ProjectName": {
                  "type": "string"
                },
                "aifV2Name": {
                  "type": "string"
                },
                "aifV2PrjName": {
                  "type": "string"
                },
                "aoaiName": {
                  "type": "string"
                },
                "amlName": {
                  "type": "string"
                },
                "safeNameAISearch": {
                  "type": "string"
                },
                "aiServicesName": {
                  "type": "string"
                },
                "dashboardInsightsName": {
                  "type": "string"
                },
                "applicationInsightName": {
                  "type": "string"
                },
                "applicationInsightName2": {
                  "type": "string"
                },
                "bingName": {
                  "type": "string"
                },
                "containerAppsEnvName": {
                  "type": "string"
                },
                "containerAppAName": {
                  "type": "string"
                },
                "containerAppWName": {
                  "type": "string"
                },
                "cosmosDBName": {
                  "type": "string"
                },
                "redisName": {
                  "type": "string"
                },
                "postgreSQLName": {
                  "type": "string"
                },
                "sqlServerName": {
                  "type": "string"
                },
                "sqlDBName": {
                  "type": "string"
                },
                "functionAppName": {
                  "type": "string"
                },
                "webAppName": {
                  "type": "string"
                },
                "funcAppServicePlanName": {
                  "type": "string"
                },
                "webbAppServicePlanName": {
                  "type": "string"
                },
                "vmName": {
                  "type": "string"
                },
                "keyvaultName": {
                  "type": "string"
                },
                "storageAccount1001Name": {
                  "type": "string"
                },
                "storageAccount2001Name": {
                  "type": "string"
                },
                "acrProjectName": {
                  "type": "string"
                },
                "acrCommonName": {
                  "type": "string"
                },
                "miACAName": {
                  "type": "string"
                },
                "miPrjName": {
                  "type": "string"
                },
                "laWorkspaceName": {
                  "type": "string"
                },
                "projectName": {
                  "type": "string"
                },
                "cmnName": {
                  "type": "string"
                },
                "kvNameCommon": {
                  "type": "string"
                },
                "genaiName": {
                  "type": "string"
                },
                "prjResourceSuffixNoDash": {
                  "type": "string"
                },
                "twoNumbers": {
                  "type": "string"
                },
                "p011_genai_team_lead_array": {
                  "type": "array"
                },
                "p011_genai_team_lead_email_array": {
                  "type": "array"
                },
                "uniqueInAIFenv": {
                  "type": "string"
                },
                "randomSalt": {
                  "type": "string"
                },
                "projectTypeESMLName": {
                  "type": "string"
                },
                "projectTypeGenAIName": {
                  "type": "string"
                },
                "aksClusterName": {
                  "type": "string"
                },
                "dataFactoryName": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../types/aifactoryNaming.bicep"
                }
              }
            }
          },
          "parameters": {
            "env": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "prod"
              ],
              "metadata": {
                "description": "Environment: dev, test, prod"
              }
            },
            "projectNumber": {
              "type": "string",
              "metadata": {
                "description": "Project number (e.g., \"005\")"
              }
            },
            "locationSuffix": {
              "type": "string",
              "metadata": {
                "description": "Location suffix (e.g., \"weu\", \"swc\")"
              }
            },
            "commonResourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Common resource suffix (e.g., \"-001\")"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Project-specific resource suffix"
              }
            },
            "aifactorySalt10char": {
              "type": "string",
              "metadata": {
                "description": "Random salt for unique naming"
              }
            },
            "randomValue": {
              "type": "string"
            },
            "aifactorySuffixRG": {
              "type": "string",
              "metadata": {
                "description": "AI Factory suffix for resource groups"
              }
            },
            "commonRGNamePrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Common resource group name prefix"
              }
            },
            "technicalAdminsObjectID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins OID list"
              }
            },
            "technicalAdminsEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins EMAIL list"
              }
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "subscriptionIdDevTestProd": {
              "type": "string"
            },
            "genaiSubnetId": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "aks2SubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "acaSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "aca2SubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "postGresAdminEmails": {
              "type": "string",
              "defaultValue": ""
            },
            "addAIFoundryHub": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Add AI Foundry Hub with random naming for debugging/testing"
              }
            }
          },
          "variables": {
            "projectName": "[format('prj{0}', parameters('projectNumber'))]",
            "cmnName": "cmn",
            "genaiName": "genai",
            "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
            "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
            "resourceSuffixPlusOne": "[format('-{0}', padLeft(string(add(int(substring(parameters('resourceSuffix'), 1, 3)), 1)), 3, '0'))]",
            "technicalAdminsObjectID_array": "[array(split(replace(parameters('technicalAdminsObjectID'), '\\s+', ''), ','))]",
            "p011_genai_team_lead_array": "[if(empty(parameters('technicalAdminsObjectID')), createArray(), union(variables('technicalAdminsObjectID_array'), createArray()))]",
            "postGresAdminEmailsLocal_array": "[array(split(replace(parameters('postGresAdminEmails'), '\\s+', ''), ','))]",
            "postGresAdminEmailsLocal": "[if(empty(parameters('postGresAdminEmails')), createArray(), union(variables('postGresAdminEmailsLocal_array'), createArray()))]",
            "technicalAdminsEmail_array": "[array(split(parameters('technicalAdminsEmail'), ','))]",
            "p011_genai_team_lead_email_array": "[if(empty(parameters('technicalAdminsEmail')), createArray(), variables('technicalAdminsEmail_array'))]",
            "randomSalt": "[if(or(empty(parameters('aifactorySalt10char')), lessOrEquals(length(parameters('aifactorySalt10char')), 5)), substring(parameters('randomValue'), 0, 10), parameters('aifactorySalt10char'))]",
            "uniqueInAIFenv": "[substring(uniqueString(subscriptionResourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('commonResourceGroupName'))), 0, 5)]",
            "cleanRandomValue": "[toLower(replace(replace(variables('randomSalt'), '-', ''), '_', ''))]",
            "aifRandom": "[take(variables('cleanRandomValue'), 2)]",
            "aifWithRandom": "[take(format('aif-hub-{0}-{1}-{2}-{3}{4}{5}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('aifRandom'), parameters('resourceSuffix')), 64)]",
            "aifV1HubName": "[if(parameters('addAIFoundryHub'), variables('aifWithRandom'), format('aif-hub-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix')))]",
            "aifV1ProjectName": "[format('aif-p-{0}-1-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifV2Name": "[take(replace(toLower(format('aif2{0}{1}', variables('uniqueInAIFenv'), variables('randomSalt'))), '-', ''), 12)]",
            "aifV2PrjName": "[take(replace(toLower(format('aif2p{0}{1}', variables('uniqueInAIFenv'), variables('randomSalt'))), '-', ''), 12)]",
            "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "safeNameAISearch": "[take(replace(toLower(format('aisearch{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', ''), 64)]",
            "aiServicesName": "[take(replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', ''), 64)]",
            "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName2": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('resourceSuffixPlusOne'))]",
            "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('twoNumbers'))]",
            "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
            "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
            "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "segments": "[split(parameters('genaiSubnetId'), '/')]",
            "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
            "defaultSubnet": "[variables('genaiSubnetName')]",
            "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
            "segmentsAKS2": "[split(parameters('aks2SubnetId'), '/')]",
            "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
            "aks2SubnetName": "[variables('segmentsAKS2')[sub(length(variables('segmentsAKS2')), 1)]]",
            "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
            "segmentsACA2": "[split(parameters('aca2SubnetId'), '/')]",
            "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]",
            "aca2SubnetName": "[variables('segmentsACA2')[sub(length(variables('segmentsACA2')), 1)]]",
            "adfName": "[format('adf-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]"
          },
          "resources": {
            "commonResourceGroupRef": {
              "existing": true,
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2024-07-01",
              "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
              "name": "[parameters('commonResourceGroupName')]"
            }
          },
          "outputs": {
            "genaiSubnetName": {
              "type": "string",
              "value": "[variables('genaiSubnetName')]"
            },
            "aksSubnetName": {
              "type": "string",
              "value": "[variables('aksSubnetName')]"
            },
            "aks2SubnetName": {
              "type": "string",
              "value": "[variables('aks2SubnetName')]"
            },
            "acaSubnetName": {
              "type": "string",
              "value": "[variables('acaSubnetName')]"
            },
            "aca2SubnetName": {
              "type": "string",
              "value": "[variables('aca2SubnetName')]"
            },
            "defaultSubnet": {
              "type": "string",
              "value": "[variables('defaultSubnet')]"
            },
            "aoaiName": {
              "type": "string",
              "value": "[variables('aoaiName')]"
            },
            "amlName": {
              "type": "string",
              "value": "[variables('amlName')]"
            },
            "safeNameAISearch": {
              "type": "string",
              "value": "[variables('safeNameAISearch')]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "dashboardInsightsName": {
              "type": "string",
              "value": "[variables('dashboardInsightsName')]"
            },
            "applicationInsightName": {
              "type": "string",
              "value": "[variables('applicationInsightName')]"
            },
            "applicationInsightName2": {
              "type": "string",
              "value": "[variables('applicationInsightName2')]"
            },
            "bingName": {
              "type": "string",
              "value": "[variables('bingName')]"
            },
            "containerAppsEnvName": {
              "type": "string",
              "value": "[variables('containerAppsEnvName')]"
            },
            "containerAppAName": {
              "type": "string",
              "value": "[variables('containerAppAName')]"
            },
            "containerAppWName": {
              "type": "string",
              "value": "[variables('containerAppWName')]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[variables('cosmosDBName')]"
            },
            "redisName": {
              "type": "string",
              "value": "[variables('redisName')]"
            },
            "postgreSQLName": {
              "type": "string",
              "value": "[variables('postgreSQLName')]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[variables('sqlServerName')]"
            },
            "sqlDBName": {
              "type": "string",
              "value": "[variables('sqlDBName')]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[variables('functionAppName')]"
            },
            "webAppName": {
              "type": "string",
              "value": "[variables('webAppName')]"
            },
            "funcAppServicePlanName": {
              "type": "string",
              "value": "[variables('funcAppServicePlanName')]"
            },
            "webbAppServicePlanName": {
              "type": "string",
              "value": "[variables('webbAppServicePlanName')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmName')]"
            },
            "aifV1HubName": {
              "type": "string",
              "value": "[variables('aifV1HubName')]"
            },
            "aifV1ProjectName": {
              "type": "string",
              "value": "[variables('aifV1ProjectName')]"
            },
            "aifV2Name": {
              "type": "string",
              "value": "[variables('aifV2Name')]"
            },
            "aifV2PrjName": {
              "type": "string",
              "value": "[variables('aifV2PrjName')]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "storageAccount1001Name": {
              "type": "string",
              "value": "[variables('storageAccount1001Name')]"
            },
            "storageAccount2001Name": {
              "type": "string",
              "value": "[variables('storageAccount2001Name')]"
            },
            "acrProjectName": {
              "type": "string",
              "value": "[variables('acrProjectName')]"
            },
            "acrCommonName": {
              "type": "string",
              "value": "[variables('acrCommonName')]"
            },
            "miACAName": {
              "type": "string",
              "value": "[variables('miACAName')]"
            },
            "miPrjName": {
              "type": "string",
              "value": "[variables('miPrjName')]"
            },
            "laWorkspaceName": {
              "type": "string",
              "value": "[variables('laWorkspaceName')]"
            },
            "projectName": {
              "type": "string",
              "value": "[variables('projectName')]"
            },
            "cmnName": {
              "type": "string",
              "value": "[variables('cmnName')]"
            },
            "kvNameCommon": {
              "type": "string",
              "value": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
            },
            "genaiName": {
              "type": "string",
              "value": "[variables('genaiName')]"
            },
            "prjResourceSuffixNoDash": {
              "type": "string",
              "value": "[variables('prjResourceSuffixNoDash')]"
            },
            "twoNumbers": {
              "type": "string",
              "value": "[variables('twoNumbers')]"
            },
            "p011_genai_team_lead_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_array')]"
            },
            "postGresAdminEmails": {
              "type": "array",
              "value": "[variables('postGresAdminEmailsLocal')]"
            },
            "p011_genai_team_lead_email_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_email_array')]"
            },
            "uniqueInAIFenv": {
              "type": "string",
              "value": "[variables('uniqueInAIFenv')]"
            },
            "randomSalt": {
              "type": "string",
              "value": "[variables('randomSalt')]"
            },
            "projectTypeESMLName": {
              "type": "string",
              "value": "esml"
            },
            "projectTypeGenAIName": {
              "type": "string",
              "value": "genai"
            },
            "aksClusterName": {
              "type": "string",
              "value": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]"
            },
            "dataFactoryName": {
              "type": "string",
              "value": "[variables('adfName')]"
            },
            "namingConvention": {
              "$ref": "#/definitions/aifactoryNamingType",
              "value": {
                "genaiSubnetName": "[variables('genaiSubnetName')]",
                "aksSubnetName": "[variables('aksSubnetName')]",
                "aks2SubnetName": "[variables('aks2SubnetName')]",
                "acaSubnetName": "[variables('acaSubnetName')]",
                "aca2SubnetName": "[variables('aca2SubnetName')]",
                "defaultSubnet": "[variables('defaultSubnet')]",
                "aifV1HubName": "[variables('aifV1HubName')]",
                "aifV1ProjectName": "[variables('aifV1ProjectName')]",
                "aifV2Name": "[variables('aifV2Name')]",
                "aifV2PrjName": "[variables('aifV2PrjName')]",
                "aoaiName": "[variables('aoaiName')]",
                "amlName": "[variables('amlName')]",
                "safeNameAISearch": "[variables('safeNameAISearch')]",
                "aiServicesName": "[variables('aiServicesName')]",
                "dashboardInsightsName": "[variables('dashboardInsightsName')]",
                "applicationInsightName": "[variables('applicationInsightName')]",
                "applicationInsightName2": "[variables('applicationInsightName2')]",
                "bingName": "[variables('bingName')]",
                "containerAppsEnvName": "[variables('containerAppsEnvName')]",
                "containerAppAName": "[variables('containerAppAName')]",
                "containerAppWName": "[variables('containerAppWName')]",
                "cosmosDBName": "[variables('cosmosDBName')]",
                "redisName": "[variables('redisName')]",
                "postgreSQLName": "[variables('postgreSQLName')]",
                "sqlServerName": "[variables('sqlServerName')]",
                "sqlDBName": "[variables('sqlDBName')]",
                "functionAppName": "[variables('functionAppName')]",
                "webAppName": "[variables('webAppName')]",
                "funcAppServicePlanName": "[variables('funcAppServicePlanName')]",
                "webbAppServicePlanName": "[variables('webbAppServicePlanName')]",
                "vmName": "[variables('vmName')]",
                "keyvaultName": "[variables('keyvaultName')]",
                "storageAccount1001Name": "[variables('storageAccount1001Name')]",
                "storageAccount2001Name": "[variables('storageAccount2001Name')]",
                "acrProjectName": "[variables('acrProjectName')]",
                "acrCommonName": "[variables('acrCommonName')]",
                "miACAName": "[variables('miACAName')]",
                "miPrjName": "[variables('miPrjName')]",
                "laWorkspaceName": "[variables('laWorkspaceName')]",
                "projectName": "[variables('projectName')]",
                "cmnName": "[variables('cmnName')]",
                "kvNameCommon": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
                "genaiName": "[variables('genaiName')]",
                "prjResourceSuffixNoDash": "[variables('prjResourceSuffixNoDash')]",
                "twoNumbers": "[variables('twoNumbers')]",
                "p011_genai_team_lead_array": "[variables('p011_genai_team_lead_array')]",
                "p011_genai_team_lead_email_array": "[variables('p011_genai_team_lead_email_array')]",
                "uniqueInAIFenv": "[variables('uniqueInAIFenv')]",
                "randomSalt": "[variables('randomSalt')]",
                "projectTypeESMLName": "esml",
                "projectTypeGenAIName": "genai",
                "aksClusterName": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "dataFactoryName": "[variables('adfName')]"
              }
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('enableContentSafety'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-ContentSafety{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csContentSafetySKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "contentsafetyName": {
            "value": "[format('cs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "[variables('kindContentSafety')]"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-contentsafety-{1}', variables('projectName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiName.value)]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiSubnetName.value]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10916679774013996783"
            }
          },
          "parameters": {
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "ResourceID of subnet for private endpoints"
              }
            },
            "vnetName": {
              "type": "string"
            },
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "contentsafetyName": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "ContentSafety"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('contentsafetyName'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('contentsafetyName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', parameters('contentsafetyName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', parameters('contentsafetyName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', parameters('contentsafetyName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('contentsafetyName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), format('{0}-pend', parameters('contentsafetyName')), '')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[equals(parameters('enableAzureAIVision'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-Vision4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csVisionSKU')]"
          },
          "location": "[if(not(empty(parameters('serviceSettingOverrideRegionAzureAIVision'))), createObject('value', parameters('serviceSettingOverrideRegionAzureAIVision')), createObject('value', parameters('location')))]",
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": "[if(not(empty(parameters('serviceSettingOverrideRegionAzureAIVisionShort'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('serviceSettingOverrideRegionAzureAIVisionShort'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))))]",
          "kind": {
            "value": "ComputerVision"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-vision-{1}', variables('projectName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiName.value)]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9183572861826501192"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "ComputerVision"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "apiProperties": {
                  "responsibleAiNotice": "Acknowledged"
                },
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', variables('nameCleaned'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', variables('nameCleaned'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-vision-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Computer Vision K in vault as S"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-vision-api-endpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Computer Vision Endpoint in vault as S"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "computerVisionEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), format('{0}-pend', variables('nameCleaned')), '')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[equals(parameters('enableAzureSpeech'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-AISpeech4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csSpeechSKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": {
            "value": "[format('speech-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "SpeechServices"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-speech-{1}', variables('projectName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiName.value)]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9205264108980854371"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "SpeechServices"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(parameters('publicNetworkAccess'), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', variables('nameCleaned'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', variables('nameCleaned'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-speech-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Speech k in vault"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-speech-api-ednpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Speech Endpoint in vault"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), format('{0}-pend', variables('nameCleaned')), '')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[equals(parameters('enableAIDocIntelligence'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-AIDocInt4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csDocIntelligenceSKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": {
            "value": "[format('docs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "FormRecognizer"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-docs-{1}', variables('projectName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiName.value)]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5592111147123411515"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "FormRecognizer"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(parameters('publicNetworkAccess'), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', variables('nameCleaned'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', variables('nameCleaned'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aidocintelligence-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azur AI Document Intelligence K in vault as S"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aidocintelligence-api-endpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azure AI Document Intelligence Endpoint in vault as S"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]"
            },
            "host": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint, '/')[2]]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), format('{0}-pend', variables('nameCleaned')), '')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('storageAccount2001Exists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "skuName": {
            "value": "[parameters('storageAccountSkuName')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "blobPrivateEndpointName": {
            "value": "[format('{0}-blob-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value)]"
          },
          "filePrivateEndpointName": {
            "value": "[format('{0}-file-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value)]"
          },
          "queuePrivateEndpointName": {
            "value": "[format('{0}-queue-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value)]"
          },
          "tablePrivateEndpointName": {
            "value": "[format('{0}-table-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value)]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesSa')), createObject('value', createArray()), createObject('value', variables('processedIpRulesSa')))]",
          "containers": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "files": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://*.ml.azure.com",
                  "https://ai.azure.com",
                  "https://*.ai.azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
                  "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]",
                  "https://*.instances.azureml.ms",
                  "https://*.azureml.ms"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "allowedHeaders": [
                  "*"
                ],
                "exposedHeaders": [
                  "*"
                ],
                "maxAgeInSeconds": 86400
              },
              {
                "allowedOrigins": [
                  "*"
                ],
                "allowedMethods": [
                  "GET",
                  "OPTIONS",
                  "POST",
                  "PUT"
                ],
                "maxAgeInSeconds": 200,
                "exposedHeaders": [
                  "*"
                ],
                "allowedHeaders": [
                  "*"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12405802681587269080"
            }
          },
          "definitions": {
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new storage account"
              }
            },
            "blobPrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies name of the blob private endpoint"
              }
            },
            "filePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the file service private endpoint"
              }
            },
            "queuePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the queue service private endpoint"
              }
            },
            "tablePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the table service private endpoint"
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "files": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Specifies the name of the storage account SKU"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the id of the subnet used for the private endpoints"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the storage acocunt resources"
              }
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "action": "Allow",
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]"
                }
              }
            ],
            "groupIds": [
              {
                "name": "[parameters('blobPrivateEndpointName')]",
                "gid": "blob"
              },
              {
                "name": "[parameters('filePrivateEndpointName')]",
                "gid": "file"
              },
              {
                "name": "[parameters('queuePrivateEndpointName')]",
                "gid": "queue"
              },
              {
                "name": "[parameters('tablePrivateEndpointName')]",
                "gid": "table"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), createObject('type', 'SystemAssigned'))]"
          },
          "resources": {
            "sacc2::blobServices::container": {
              "copy": {
                "name": "sacc2::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "sacc2::blobServices"
              ]
            },
            "sacc2::blobServices": {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc2"
              ]
            },
            "sacc2::fileServices": {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc2"
              ]
            },
            "sacc::blobServices::container": {
              "copy": {
                "name": "sacc::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "sacc::blobServices"
              ]
            },
            "sacc::blobServices": {
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc"
              ]
            },
            "sacc::fileServices": {
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc"
              ]
            },
            "vnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[parameters('vnetName')]"
            },
            "subnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]"
            },
            "sacc2": {
              "condition": "[or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": true,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(and(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), createObject('bypass', 'AzureServices', 'defaultAction', 'Allow', 'virtualNetworkRules', variables('rules'), 'ipRules', createArray()), if(and(not(parameters('enablePublicAccessWithPerimeter')), parameters('enablePublicGenAIAccess')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), if(or(or(parameters('enablePublicGenAIAccess'), not(empty(parameters('ipRules')))), not(empty(parameters('vnetRules')))), createObject('bypass', 'AzureServices', 'defaultAction', if(and(and(parameters('enablePublicGenAIAccess'), empty(parameters('ipRules'))), empty(parameters('vnetRules'))), 'Allow', 'Deny'), 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), null())))]"
              }
            },
            "sacc": {
              "condition": "[not(parameters('enablePublicGenAIAccess'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": false,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": "[variables('rules')]",
                  "ipRules": "[if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))]"
                }
              }
            },
            "pendSaccBlob": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('blobPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('blobPrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('blobPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccFile": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('filePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('filePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('filePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "file"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccQ": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('queuePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('queuePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('queuePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "queue"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccTable": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('tablePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('tablePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('tablePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "table"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            }
          },
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), parameters('storageAccountName'), parameters('storageAccountName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('blobPrivateEndpointName')]",
                  "type": "blob",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('filePrivateEndpointName')]",
                  "type": "file",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('queuePrivateEndpointName')]",
                  "type": "queue",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('tablePrivateEndpointName')]",
                  "type": "table",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiSearchExists')), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "replicaCount": {
            "value": "[parameters('aiSearchReplicaCount')]"
          },
          "partitionCount": {
            "value": "[parameters('aiSearchPartitionCount')]"
          },
          "privateEndpointName": {
            "value": "[format('{0}-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.safeNameAISearch.value)]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "semanticSearchTier": {
            "value": "[parameters('semanticSearchTier')]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "skuName": {
            "value": "[parameters('aiSearchSKUName')]"
          },
          "enableSharedPrivateLink": {
            "value": "[parameters('aiSearchEnableSharedPrivateLink')]"
          },
          "sharedPrivateLinks": {
            "value": []
          },
          "ipRules": "[if(empty(variables('processedIpRulesAISearch')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAISearch')))]",
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "managedIdentities": {
            "value": {
              "systemAssigned": true,
              "userAssignedResourceIds": "[union(if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value)), createArray(resourceId(variables('subscriptionIdDevTestProd'), variables('targetResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value)), createArray()), if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value)), createArray(resourceId(variables('subscriptionIdDevTestProd'), variables('targetResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value)), createArray()))]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9064211910677899001"
            }
          },
          "definitions": {
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of service"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "tags": {
              "type": "object"
            },
            "location": {
              "type": "string"
            },
            "enableSharedPrivateLink": {
              "type": "bool"
            },
            "acrNameDummy": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "sharedPrivateLinks": {
              "type": "array",
              "defaultValue": []
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "free",
                "basic",
                "standard",
                "standard2",
                "standard3",
                "storage_optimized_l1",
                "storage_optimized_l2"
              ]
            },
            "hostingMode": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default",
                "highDensity"
              ]
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 1
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 1
            },
            "privateEndpointName": {
              "type": "string"
            },
            "semanticSearchTier": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "free",
                "standard"
              ]
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), createObject('type', 'SystemAssigned'))]",
            "hostName": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]"
          },
          "resources": {
            "aiSearchSharedPend::sharedPrivateLinkResource": {
              "copy": {
                "name": "aiSearchSharedPend::sharedPrivateLinkResource",
                "count": "[length(parameters('sharedPrivateLinks'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('enableSharedPrivateLink'), true())]",
              "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
              "apiVersion": "2024-06-01-preview",
              "name": "[format('{0}/{1}', parameters('aiSearchName'), format('{0}-shared-pe-{1}', parameters('aiSearchName'), copyIndex()))]",
              "properties": "[parameters('sharedPrivateLinks')[copyIndex()]]",
              "dependsOn": [
                "aiSearchSharedPend"
              ]
            },
            "vnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[parameters('vnetName')]"
            },
            "subnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]"
            },
            "aiSearchSharedPend": {
              "condition": "[equals(parameters('enableSharedPrivateLink'), true())]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-03-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "standard2"
              },
              "identity": "[variables('identity')]",
              "properties": {
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "replicaCount": "[parameters('replicaCount')]",
                "hostingMode": "[parameters('hostingMode')]",
                "partitionCount": "[parameters('partitionCount')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "networkRuleSet": {
                  "bypass": "AzureServices",
                  "ipRules": "[parameters('ipRules')]"
                },
                "semanticSearch": "[parameters('semanticSearchTier')]"
              }
            },
            "aiSearch": {
              "condition": "[not(parameters('enableSharedPrivateLink'))]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-03-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": "[variables('identity')]",
              "properties": {
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "replicaCount": "[parameters('replicaCount')]",
                "hostingMode": "[parameters('hostingMode')]",
                "partitionCount": "[parameters('partitionCount')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'ipRules', parameters('ipRules')), null())]",
                "semanticSearch": "[parameters('semanticSearchTier')]"
              }
            },
            "pendAISearch": {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', parameters('aiSearchName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('aiSearchName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                      "groupIds": [
                        "searchService"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "aiSearch"
              ]
            }
          },
          "outputs": {
            "aiSearchEndpoint": {
              "type": "string",
              "value": "[variables('hostName')]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[parameters('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference('aiSearch', '2024-03-01-preview', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), parameters('aiSearchName'), '')]",
                  "type": "searchService",
                  "id": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiServicesExists')), parameters('enableAIServices'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-AIServices4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentities": {
            "value": {
              "systemAssigned": true,
              "userAssignedResourceIds": "[union(if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value)), createArray(resourceId(variables('subscriptionIdDevTestProd'), variables('targetResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value)), createArray()), if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value)), createArray(resourceId(variables('subscriptionIdDevTestProd'), variables('targetResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value)), createArray()))]"
            }
          },
          "sku": {
            "value": "[parameters('csAIservicesSKU')]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "cognitiveName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.aiServicesName.value]"
          },
          "pendCogSerName": {
            "value": "[format('aiservices{0}{1}{2}{3}-pend', variables('projectName'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('resourceSuffix'))]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "kind": {
            "value": "[variables('kindAIServices')]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]"
            ]
          },
          "ipRules": "[if(empty(variables('processedIpRulesAIServices')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAIServices')))]",
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          },
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "deployModel_gpt_X": {
            "value": "[parameters('deployModel_gpt_X')]"
          },
          "modelGPTXName": {
            "value": "[parameters('modelGPTXName')]"
          },
          "modelGPTXVersion": {
            "value": "[parameters('modelGPTXVersion')]"
          },
          "modelGPTXSku": {
            "value": "[parameters('modelGPTXSku')]"
          },
          "modelGPTXCapacity": {
            "value": "[parameters('modelGPTXCapacity')]"
          },
          "deployModel_gpt_4o_mini": {
            "value": "[parameters('deployModel_gpt_4o_mini')]"
          },
          "deployModel_text_embedding_3_small": {
            "value": "[parameters('deployModel_text_embedding_3_small')]"
          },
          "deployModel_text_embedding_3_large": {
            "value": "[parameters('deployModel_text_embedding_3_large')]"
          },
          "deployModel_text_embedding_ada_002": {
            "value": "[parameters('deployModel_text_embedding_ada_002')]"
          },
          "default_embedding_capacity": {
            "value": "[parameters('default_embedding_capacity')]"
          },
          "default_gpt_capacity": {
            "value": "[parameters('default_gpt_capacity')]"
          },
          "default_model_sku": {
            "value": "[parameters('default_model_sku')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "916902668434375436"
            }
          },
          "definitions": {
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "cognitiveName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the service"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that will be associated with resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location that will be used"
              }
            },
            "sku": {
              "type": "string",
              "metadata": {
                "description": "Specifies the SKU, where default is standard"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of vNet"
              }
            },
            "restore": {
              "type": "bool",
              "metadata": {
                "description": "Restore instead of Purge"
              }
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool",
              "defaultValue": true
            },
            "kind": {
              "type": "string",
              "defaultValue": "AIServices"
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "acrNameDummy": {
              "type": "string",
              "defaultValue": ""
            },
            "keyvaultName": {
              "type": "string"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "deployModel_text_embedding_ada_002": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_text_embedding_3_small": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_text_embedding_3_large": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_gpt_4o_mini": {
              "type": "bool",
              "defaultValue": false
            },
            "default_embedding_capacity": {
              "type": "int",
              "defaultValue": 25
            },
            "default_gpt_capacity": {
              "type": "int",
              "defaultValue": 40
            },
            "default_model_sku": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "deployModel_gpt_X": {
              "type": "bool",
              "defaultValue": false
            },
            "modelGPTXName": {
              "type": "string",
              "defaultValue": ""
            },
            "modelGPTXVersion": {
              "type": "string",
              "defaultValue": "1"
            },
            "modelGPTXSku": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "modelGPTXCapacity": {
              "type": "int",
              "defaultValue": 30
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('cognitiveName'), '-', ''))]",
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), createObject('type', 'SystemAssigned'))]"
          },
          "resources": {
            "vnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[parameters('vnetName')]"
            },
            "subnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]"
            },
            "aiServices": {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-06-01",
              "name": "[variables('nameCleaned')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": false,
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccessWithPerimeter'), 'Allow', 'Deny'), 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              },
              "identity": "[variables('identity')]"
            },
            "textEmbedding3Small": {
              "condition": "[parameters('deployModel_text_embedding_3_small')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-3-small')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-3-small"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "aiServices"
              ]
            },
            "embedding2": {
              "condition": "[parameters('deployModel_text_embedding_ada_002')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-ada-002')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "aiServices",
                "textEmbedding3Small"
              ]
            },
            "gpt4omini": {
              "condition": "[parameters('deployModel_gpt_4o_mini')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'gpt-4o-mini')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_gpt_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4o-mini"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "aiServices",
                "embedding2",
                "textEmbedding3Small"
              ]
            },
            "gptXmodelOpenAI": {
              "condition": "[and(and(parameters('deployModel_gpt_X'), not(empty(parameters('modelGPTXVersion')))), not(empty(parameters('modelGPTXName'))))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), parameters('modelGPTXName'))]",
              "sku": {
                "name": "[parameters('modelGPTXSku')]",
                "capacity": "[parameters('modelGPTXCapacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('modelGPTXName')]",
                  "version": "[parameters('modelGPTXVersion')]"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "aiServices",
                "embedding2",
                "gpt4omini",
                "textEmbedding3Small"
              ]
            },
            "embedding3large": {
              "condition": "[parameters('deployModel_text_embedding_3_large')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-3-large')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-3-large"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "aiServices",
                "embedding2",
                "gpt4omini",
                "gptXmodelOpenAI",
                "textEmbedding3Small"
              ]
            },
            "pendCognitiveServices": {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', variables('nameCleaned'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', variables('nameCleaned'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "aiServices"
              ]
            },
            "privateEndpointDns": {
              "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), not(parameters('enablePublicAccessWithPerimeter')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', format('{0}-pend', variables('nameCleaned')), format('{0}DnsZone', format('{0}-pend', variables('nameCleaned'))))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateLinksDnsZones').openai.name]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').openai.id]"
                    }
                  },
                  {
                    "name": "[parameters('privateLinksDnsZones').cognitiveservices.name]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').cognitiveservices.id]"
                    }
                  },
                  {
                    "name": "[parameters('privateLinksDnsZones').servicesai.name]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').servicesai.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "pendCognitiveServices"
              ]
            },
            "keyVaultOpenAI": {
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyvaultName')]"
            },
            "epValueAIServices": {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aiservices-ep')]",
              "properties": {
                "value": "[reference('aiServices').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "aiServices"
              ],
              "metadata": {
                "description": "Key Vault: Azure AI Services endpoint in vault as S"
              }
            },
            "epValueOpenAI": {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-openai-ep')]",
              "properties": {
                "value": "[reference('aiServices').endpoints['OpenAI Language Model Instance API']]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "aiServices"
              ],
              "metadata": {
                "description": "Key Vault: Azure OpenAI endpoint in vault as S. Same key as Azure AI Services"
              }
            }
          },
          "outputs": {
            "aiServicesEndpoint": {
              "type": "string",
              "value": "[reference('aiServices').endpoint]"
            },
            "endpoints": {
              "type": "object",
              "value": "[reference('aiServices').endpoints]"
            },
            "openAIEndpoint": {
              "type": "string",
              "value": "[reference('aiServices').endpoints['OpenAI Language Model Instance API']]"
            },
            "aiServicesPrincipalId": {
              "type": "string",
              "value": "[reference('aiServices', '2025-06-01', 'full').identity.principalId]"
            },
            "name": {
              "type": "string",
              "value": "[variables('nameCleaned')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-getAISearchI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "aiSearchExists": {
            "value": "[parameters('aiSearchExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4132537862794185216"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "AI Search service name"
              }
            },
            "aiSearchExists": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Check if AI Search exists"
              }
            }
          },
          "resources": [],
          "outputs": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of AI Search service (empty if service does not exist)"
              },
              "value": "[if(parameters('aiSearchExists'), reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-06-01-preview', 'Full').identity.principalId, '')]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "AI Search service name"
              },
              "value": "[parameters('aiSearchName')]"
            },
            "exists": {
              "type": "bool",
              "metadata": {
                "description": "AI Search exists flag"
              },
              "value": "[parameters('aiSearchExists')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('openaiExists')), parameters('enableAzureOpenAI'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-AzureOpenAI4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.aoaiName.value]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "laWorkspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "commonResourceGroupName": {
            "value": "[variables('commonResourceGroup')]"
          },
          "sku": {
            "value": "[parameters('csOpenAISKU')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiSubnetName.value]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "aiSearchPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getAISearchI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.principalId.value]"
          },
          "kind": {
            "value": "[variables('kindAOpenAI')]"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-openai-{1}', variables('projectName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.genaiName.value)]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          },
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]",
              "[parameters('aksSubnetId')]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18424144454758087816"
            }
          },
          "parameters": {
            "cognitiveName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the service"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that will be associated with resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location that will be used"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "metadata": {
                "description": "Specifies the SKU, where default is standard"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the VNET name that will be associated with the private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "restore": {
              "type": "bool",
              "defaultValue": false
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true
            },
            "modelGPT4Version": {
              "type": "string",
              "defaultValue": "1106-Preview"
            },
            "laWorkspaceName": {
              "type": "string"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "aiSearchPrincipalId": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('cognitiveName'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('cognitiveName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "allowedFqdnList": [],
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('cognitiveName'), 'text-embedding-ada-002')]",
              "sku": {
                "name": "Standard",
                "capacity": 25
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.Default",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveName'))]",
              "name": "default",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('commonResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('laWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logAnalyticsDestinationType": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
              ]
            },
            {
              "condition": "[not(parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pend', parameters('cognitiveName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-pend-nic', parameters('cognitiveName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pend', parameters('cognitiveName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('cognitiveName'), 'text-embedding-ada-002')]"
              ]
            }
          ],
          "outputs": {
            "cognitiveId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
            },
            "azureOpenAIEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName')), '2024-10-01').endpoint]"
            },
            "cognitiveName": {
              "type": "string",
              "value": "[parameters('cognitiveName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName')), '2024-10-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(not(parameters('enablePublicAccessWithPerimeter')), format('{0}-pend', parameters('cognitiveName')), '')]",
                  "type": "openai",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getAISearchI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enableContentSafety'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsCS{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-ContentSafety{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-ContentSafety{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enableAzureAIVision'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsVision{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-Vision4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-Vision4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enableAzureSpeech'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsSpeech{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AISpeech4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AISpeech4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enableAIDocIntelligence'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsDocInt{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AIDocInt4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AIDocInt4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(and(not(parameters('openaiExists')), parameters('enableAzureOpenAI')), not(parameters('centralDnsZoneByPolicyInHub')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsLAOAI{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureOpenAI4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureOpenAI4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(and(not(parameters('aiSearchExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsAISearch{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": "[if(parameters('enableAISearch'), if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value[0].name)), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value), createObject('value', createArray())), createObject('value', createArray()))]",
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('storageAccount2001Exists')), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-privDnsSAGenAI{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiServicesExists')), parameters('enableAIServices'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagAIServices-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.aiServicesName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AIServices4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('openaiExists')), parameters('enableAzureOpenAI'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagOpenAI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.aoaiName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureOpenAI4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[parameters('enableContentSafety')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagContentSafety-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": {
            "value": "[format('cs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-ContentSafety{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[parameters('enableAzureAIVision')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagVision-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": "[if(not(empty(parameters('serviceSettingOverrideRegionAzureAIVisionShort'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('serviceSettingOverrideRegionAzureAIVisionShort'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))))]",
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-Vision4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[parameters('enableAzureSpeech')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagSpeech-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": {
            "value": "[format('speech-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AISpeech4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[parameters('enableAIDocIntelligence')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagDocInt-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveServiceName": {
            "value": "[format('docs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16260296219714507346"
            }
          },
          "parameters": {
            "cognitiveServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cognitive Services resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('cognitiveServiceName'))]",
              "metadata": {
                "description": "Optional. Cognitive Service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "Trace",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "RequestResponse",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "Audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AIDocInt4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiSearchExists')), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagAISearch-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "searchServiceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5037670786706416154"
            }
          },
          "parameters": {
            "searchServiceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the AI Search service resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('searchServiceName'))]",
              "metadata": {
                "description": "Optional. AI Search service name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "OperationLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "OperationLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "OperationLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('searchServiceName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Search/searchServices', parameters('searchServiceName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('storageAccount2001Exists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('03-diagStorage-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12555103905323571485"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Storage Account resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('storageAccountName'))]",
              "metadata": {
                "description": "Optional. Storage Account name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "StorageRead",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "StorageDelete",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "StorageDelete",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-blob', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-table', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-queue', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-file', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            },
            "blobDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-blob', parameters('diagnosticSettingName')))]"
            },
            "tableDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-table', parameters('diagnosticSettingName')))]"
            },
            "queueDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-queue', parameters('diagnosticSettingName')))]"
            },
            "fileDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-file', parameters('diagnosticSettingName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-naming-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('03-GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    }
  ]
}