{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "13811876078597091518"
    }
  },
  "parameters": {
    "postgreSQLSKU": {
      "type": "object",
      "defaultValue": {
        "name": "Standard_B1ms",
        "tier": "Burstable"
      }
    },
    "redisSKU": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "sqlServerSKU_DTU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "sqlServerTier_DTU": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant ID"
      }
    },
    "cosmosDBExists": {
      "type": "bool",
      "defaultValue": false
    },
    "postgreSQLExists": {
      "type": "bool",
      "defaultValue": false
    },
    "redisExists": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlServerExists": {
      "type": "bool",
      "defaultValue": false
    },
    "serviceSettingDeployCosmosDB": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Cosmos DB deployment"
      }
    },
    "serviceSettingDeployPostgreSQL": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable PostgreSQL deployment"
      }
    },
    "serviceSettingDeployRedisCache": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Redis Cache deployment"
      }
    },
    "serviceSettingDeploySQLDatabase": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable SQL Database deployment"
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetNameFull": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "genaiSubnetId": {
      "type": "string"
    },
    "aksSubnetId": {
      "type": "string"
    },
    "acaSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "targetResourceGroup": {
      "type": "string"
    },
    "commonResourceGroup": {
      "type": "string"
    },
    "projecttags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "uniqueInAIFenv": {
      "type": "string",
      "defaultValue": ""
    },
    "prjResourceSuffixNoDash": {
      "type": "string",
      "defaultValue": ""
    },
    "cosmosDBProvisionedThroughput": {
      "type": "int",
      "defaultValue": 400
    },
    "cosmosTotalThroughputLimit": {
      "type": "int",
      "defaultValue": 4000
    },
    "cosmosKind": {
      "type": "string",
      "defaultValue": "MongoDB"
    },
    "cosmosMinimalTlsVersion": {
      "type": "string",
      "defaultValue": "Tls12"
    },
    "postgreSQLStorage": {
      "type": "object",
      "defaultValue": {
        "storageSizeGB": 32
      }
    },
    "postgreSQLVersion": {
      "type": "string",
      "defaultValue": "14"
    },
    "postgreSQLHighAvailability": {
      "type": "object",
      "defaultValue": {
        "mode": "Disabled"
      }
    },
    "postgresAvailabilityZone": {
      "type": "string",
      "defaultValue": ""
    },
    "postgresEnableCustomerManagedKey": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlServerCapacity_DTU": {
      "type": "int",
      "defaultValue": 10
    },
    "useAdGroups": {
      "type": "bool",
      "defaultValue": false
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": ""
    },
    "inputKeyvault": {
      "type": "string"
    },
    "inputKeyvaultResourcegroup": {
      "type": "string"
    },
    "inputKeyvaultSubscription": {
      "type": "string"
    }
  },
  "variables": {
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', variables('projectName'), parameters('env'), parameters('uniqueInAIFenv'))]",
    "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
    "segments": "[split(parameters('genaiSubnetId'), '/')]",
    "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
    "defaultSubnet": "[variables('genaiSubnetName')]",
    "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
    "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
    "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
    "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "subnet_genai_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), variables('genaiSubnetName'))]"
    },
    "subnet_aks_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), variables('aksSubnetName'))]"
    },
    "sqlServerSKUObject_DTU": {
      "name": "[parameters('sqlServerSKU_DTU')]",
      "tier": "[parameters('sqlServerTier_DTU')]",
      "capacity": "[parameters('sqlServerCapacity_DTU')]"
    },
    "privateLinksDnsZones": [],
    "p011_genai_team_lead_array": [],
    "p011_genai_team_lead_email_array": [],
    "spAndMiArray": []
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('targetResourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceSuffix": {
            "value": "[parameters('commonResourceSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "randomSalt": {
            "value": "[substring(uniqueString(subscription().subscriptionId, parameters('targetResourceGroup')), 0, 5)]"
          },
          "aifactorySuffixRG": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "uniqueInAIFenv": {
            "value": "[parameters('uniqueInAIFenv')]"
          },
          "commonRGNamePrefix": {
            "value": "[parameters('commonRGNamePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12625160494595296240"
            }
          },
          "parameters": {
            "env": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "prod"
              ],
              "metadata": {
                "description": "Environment: dev, test, prod"
              }
            },
            "projectNumber": {
              "type": "string",
              "metadata": {
                "description": "Project number (e.g., \"005\")"
              }
            },
            "locationSuffix": {
              "type": "string",
              "metadata": {
                "description": "Location suffix (e.g., \"weu\", \"swc\")"
              }
            },
            "commonResourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Common resource suffix (e.g., \"-001\")"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Project-specific resource suffix"
              }
            },
            "randomSalt": {
              "type": "string",
              "metadata": {
                "description": "Random salt for unique naming"
              }
            },
            "aifactorySuffixRG": {
              "type": "string",
              "metadata": {
                "description": "AI Factory suffix for resource groups"
              }
            },
            "uniqueInAIFenv": {
              "type": "string",
              "metadata": {
                "description": "Unique string for AI Factory environment"
              }
            },
            "commonRGNamePrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Common resource group name prefix"
              }
            }
          },
          "variables": {
            "projectName": "[format('prj{0}', parameters('projectNumber'))]",
            "cmnName": "cmn",
            "genaiName": "genai",
            "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
            "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
            "aiHubName": "[format('ai-hub-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifProjectName": "[format('ai-prj{0}-01-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "safeNameAISearch": "[replace(toLower(format('aisearch{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))), '-', '')]",
            "aiServicesName": "[replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', '')]",
            "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifName": "[format('aifoundry-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifPrjName": "[format('aifoundry-{0}-01-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), variables('twoNumbers'))]",
            "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
            "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', parameters('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
            "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('randomSalt'), parameters('resourceSuffix'))]",
            "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('randomSalt'), parameters('resourceSuffix'))]",
            "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "aiProjectName": "[format('ai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
          },
          "resources": [],
          "outputs": {
            "aiHubName": {
              "type": "string",
              "value": "[variables('aiHubName')]"
            },
            "aifProjectName": {
              "type": "string",
              "value": "[variables('aifProjectName')]"
            },
            "aoaiName": {
              "type": "string",
              "value": "[variables('aoaiName')]"
            },
            "amlName": {
              "type": "string",
              "value": "[variables('amlName')]"
            },
            "safeNameAISearch": {
              "type": "string",
              "value": "[variables('safeNameAISearch')]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "dashboardInsightsName": {
              "type": "string",
              "value": "[variables('dashboardInsightsName')]"
            },
            "applicationInsightName": {
              "type": "string",
              "value": "[variables('applicationInsightName')]"
            },
            "bingName": {
              "type": "string",
              "value": "[variables('bingName')]"
            },
            "containerAppsEnvName": {
              "type": "string",
              "value": "[variables('containerAppsEnvName')]"
            },
            "containerAppAName": {
              "type": "string",
              "value": "[variables('containerAppAName')]"
            },
            "containerAppWName": {
              "type": "string",
              "value": "[variables('containerAppWName')]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[variables('cosmosDBName')]"
            },
            "redisName": {
              "type": "string",
              "value": "[variables('redisName')]"
            },
            "postgreSQLName": {
              "type": "string",
              "value": "[variables('postgreSQLName')]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[variables('sqlServerName')]"
            },
            "sqlDBName": {
              "type": "string",
              "value": "[variables('sqlDBName')]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[variables('functionAppName')]"
            },
            "webAppName": {
              "type": "string",
              "value": "[variables('webAppName')]"
            },
            "funcAppServicePlanName": {
              "type": "string",
              "value": "[variables('funcAppServicePlanName')]"
            },
            "webbAppServicePlanName": {
              "type": "string",
              "value": "[variables('webbAppServicePlanName')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmName')]"
            },
            "aifName": {
              "type": "string",
              "value": "[variables('aifName')]"
            },
            "aifPrjName": {
              "type": "string",
              "value": "[variables('aifPrjName')]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "storageAccount1001Name": {
              "type": "string",
              "value": "[variables('storageAccount1001Name')]"
            },
            "storageAccount2001Name": {
              "type": "string",
              "value": "[variables('storageAccount2001Name')]"
            },
            "acrProjectName": {
              "type": "string",
              "value": "[variables('acrProjectName')]"
            },
            "acrCommonName": {
              "type": "string",
              "value": "[variables('acrCommonName')]"
            },
            "miACAName": {
              "type": "string",
              "value": "[variables('miACAName')]"
            },
            "miPrjName": {
              "type": "string",
              "value": "[variables('miPrjName')]"
            },
            "laWorkspaceName": {
              "type": "string",
              "value": "[variables('laWorkspaceName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "projectName": {
              "type": "string",
              "value": "[variables('projectName')]"
            },
            "cmnName": {
              "type": "string",
              "value": "[variables('cmnName')]"
            },
            "genaiName": {
              "type": "string",
              "value": "[variables('genaiName')]"
            },
            "prjResourceSuffixNoDash": {
              "type": "string",
              "value": "[variables('prjResourceSuffixNoDash')]"
            },
            "twoNumbers": {
              "type": "string",
              "value": "[variables('twoNumbers')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(not(parameters('cosmosDBExists')), parameters('serviceSettingDeployCosmosDB'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('CosmosDB4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "ipRules": "[if(or(or(empty(variables('ipWhitelist_array')), not(parameters('enablePublicGenAIAccess'))), parameters('enablePublicAccessWithPerimeter')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_array')))]",
          "totalThroughputLimit": {
            "value": "[parameters('cosmosTotalThroughputLimit')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.keyvaultName.value]"
          },
          "vNetRules": {
            "value": [
              "[variables('subnet_genai_ref').id]",
              "[variables('subnet_aks_ref').id]"
            ]
          },
          "kind": {
            "value": "[parameters('cosmosKind')]"
          },
          "minimalTlsVersion": {
            "value": "[parameters('cosmosMinimalTlsVersion')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://ai.azure.com",
                  "https://azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "allowedHeaders": [
                  "Content-Type",
                  "Accept",
                  "Authorization",
                  "x-ms-blob-type",
                  "x-ms-blob-content-type",
                  "x-ms-version",
                  "x-ms-date",
                  "x-ms-copy-source",
                  "Content-Length",
                  "Origin",
                  "Access-Control-Request-Method",
                  "Access-Control-Request-Headers"
                ],
                "exposedHeaders": [
                  "Content-Length",
                  "Content-Type",
                  "Content-Range",
                  "Content-Encoding",
                  "Content-Language",
                  "Cache-Control",
                  "Last-Modified",
                  "ETag",
                  "x-ms-request-id",
                  "x-ms-version",
                  "x-ms-copy-status",
                  "x-ms-copy-progress"
                ],
                "maxAgeInSeconds": 2520
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9151356478799027478"
            },
            "description": "Creates an Azure Cosmos DB account."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "vNetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "capacityMode": {
              "type": "string",
              "defaultValue": "Serverless",
              "allowedValues": [
                "Serverless",
                "Provisioned"
              ]
            },
            "totalThroughputLimit": {
              "type": "int",
              "defaultValue": 1000,
              "minValue": 1000,
              "maxValue": 1000000
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB"
              ]
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "autoscaleMaxThroughput": {
              "type": "int",
              "defaultValue": 4000,
              "minValue": 4000,
              "maxValue": 1000000
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "aifdb"
            },
            "containerName": {
              "type": "string",
              "defaultValue": "defaultcontainer"
            },
            "partitionKeyPath": {
              "type": "string",
              "defaultValue": "/id"
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "Tls12"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-cosmosdb-con-string"
            },
            "keyvaultName": {
              "type": "string"
            },
            "defaultTtl": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Default TTL in seconds. Set to -1 to disable or positive integer for automatic document expiration"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vNetRules'))]",
                "input": {
                  "id": "[string(parameters('vNetRules')[copyIndex('rules')])]",
                  "ignoreMissingVNetServiceEndpoint": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-12-01-preview",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipRules",
                    "count": "[length(parameters('ipRules'))]",
                    "input": {
                      "ipAddressOrRange": "[string(parameters('ipRules')[copyIndex('ipRules')])]"
                    }
                  }
                ],
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "createMode": "Default",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.2'), createObject())]",
                "capacityMode": "[parameters('capacityMode')]",
                "capacity": "[if(equals(parameters('capacityMode'), 'Serverless'), createObject('totalThroughputLimit', parameters('totalThroughputLimit')), null())]",
                "enableFreeTier": false,
                "isVirtualNetworkFilterEnabled": "[not(equals(parameters('vNetRules'), createArray()))]",
                "networkAclBypass": "AzureServices",
                "publicNetworkAccess": "[if(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "virtualNetworkRules": "[if(parameters('enablePublicAccessWithPerimeter'), createArray(), variables('rules'))]"
              }
            },
            {
              "condition": "[equals(parameters('kind'), 'GlobalDocumentDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'GlobalDocumentDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), parameters('containerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerName')]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('partitionKeyPath')]"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "defaultTtl": "[parameters('defaultTtl')]"
                },
                "options": "[if(equals(parameters('capacityMode'), 'Provisioned'), createObject('autoscaleSettings', createObject('maxThroughput', parameters('autoscaleMaxThroughput'))), createObject())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('name'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'MongoDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'MongoDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), parameters('containerName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerName')]",
                  "shardKey": {
                    "[format('{0}', replace(parameters('partitionKeyPath'), '/', ''))]": "Hash"
                  },
                  "indexes": [
                    {
                      "key": {
                        "keys": [
                          "_id"
                        ]
                      }
                    }
                  ]
                },
                "options": "[if(equals(parameters('capacityMode'), 'Provisioned'), createObject('autoscaleSettings', createObject('maxThroughput', parameters('autoscaleMaxThroughput'))), createObject())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('name'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]",
                      "groupIds": [
                        "[if(equals(parameters('kind'), 'GlobalDocumentDB'), 'Sql', if(equals(parameters('kind'), 'MongoDB'), 'MongoDB', 'Cassandra'))]"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[if(equals(parameters('kind'), 'MongoDB'), listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').connectionStrings[0].connectionString, format('AccountEndpoint={0};AccountKey={1};', reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').documentEndpoint, listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').primaryMasterKey))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: CosmosDB"
              }
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').documentEndpoint]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name')), '')]",
                  "type": "[if(equals(parameters('kind'), 'GlobalDocumentDB'), 'cosmosdbnosql', if(equals(parameters('kind'), 'MongoDB'), 'cosmosdbmongo', 'cosmosdbcassandra'))]",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('cosmosDBExists')), parameters('serviceSettingDeployCosmosDB'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosRbac{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[variables('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15636990560246303873"
            },
            "description": "Creates a role assignment for a service principal."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "cosmosName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionReader": "00000000-0000-0000-0000-000000000001",
            "roleDefinitionContributor": "00000000-0000-0000-0000-000000000002"
          },
          "resources": [
            {
              "copy": {
                "name": "userSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'), parameters('usersOrAdGroupArray')[copyIndex()]))]",
              "properties": {
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'))]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "copy": {
                "name": "spSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'), parameters('servicePrincipleAndMIArray')[copyIndex()]))]",
              "properties": {
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'))]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('CosmosDB4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('cosmosDBExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployCosmosDB')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkCosmos{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]",
                "type": "Microsoft.DocumentDB/databaseAccounts",
                "groupIds": [
                  "Sql"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('CosmosDB4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('postgreSQLExists')), parameters('serviceSettingDeployPostgreSQL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PostgreSQL4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.postgreSQLName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.keyvaultName.value]"
          },
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
          "sku": {
            "value": "[parameters('postgreSQLSKU')]"
          },
          "storage": {
            "value": "[parameters('postgreSQLStorage')]"
          },
          "version": {
            "value": "[parameters('postgreSQLVersion')]"
          },
          "tenantId": {
            "value": "[parameters('tenantId')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "highAvailability": {
            "value": "[parameters('postgreSQLHighAvailability')]"
          },
          "availabilityZone": {
            "value": "[parameters('postgresAvailabilityZone')]"
          },
          "useCMK": {
            "value": "[parameters('postgresEnableCustomerManagedKey')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1294879000209345168"
            },
            "description": "Creates an Azure Database for PostgreSQL - Flexible Server."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_B2s",
                "tier": "Burstable"
              }
            },
            "storage": {
              "type": "object",
              "defaultValue": {
                "iops": 120,
                "tier": "P4",
                "storageSizeGB": 32,
                "autoGrow": "Disabled"
              }
            },
            "version": {
              "type": "string",
              "defaultValue": "16"
            },
            "administratorLogin": {
              "type": "string",
              "defaultValue": "aifactoryadmin"
            },
            "resourceExists": {
              "type": "bool",
              "defaultValue": false
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "administratorLoginPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Administrator login password. If not provided, a random password will be generated."
              }
            },
            "databaseNames": {
              "type": "array",
              "defaultValue": [
                "aifdb"
              ]
            },
            "allowAzureIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowAllIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowedSingleIPs": {
              "type": "array",
              "defaultValue": []
            },
            "tenantId": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "entraIdPrincipleAdmin": {
              "type": "string",
              "defaultValue": ""
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
              }
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-postgresqlflex-con-string"
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "highAvailability": {
              "type": "object",
              "defaultValue": {
                "mode": "Disabled"
              }
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": "1"
            },
            "useCMK": {
              "type": "bool",
              "defaultValue": false
            },
            "keyVaultKeyId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The key vault key ID for customer managed key encryption. Required when useCMK is true."
              }
            },
            "cmkUserAssignedIdentityId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The user assigned identity ID for customer managed key encryption. Required when useCMK is true."
              }
            }
          },
          "variables": {
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]",
            "seed": "[uniqueString(resourceGroup().id, subscription().subscriptionId, deployment().name)]",
            "uppercaseLetter": "[substring(toUpper(variables('seed')), 0, 1)]",
            "lowercaseLetter": "[substring(toLower(variables('seed')), 1, 1)]",
            "numbers": "[substring(variables('seed'), 2, 4)]",
            "specialChar": "!@#$",
            "randomSpecialChar": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "loginPwd": "[if(empty(parameters('administratorLoginPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar'), variables('numbers'), guid(deployment().name)), parameters('administratorLoginPassword'))]",
            "defaultDbName": "aifdb",
            "dbNameToUse": "[if(not(empty(parameters('databaseNames'))), first(parameters('databaseNames')), variables('defaultDbName'))]",
            "keyVaultPermissions": {
              "secrets": [
                "get",
                "wrap key",
                "unwrap key"
              ]
            }
          },
          "resources": [
            {
              "copy": {
                "name": "postgreSQLFlex::firewall_single",
                "count": "[length(parameters('allowedSingleIPs'))]"
              },
              "condition": "[not(parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('allow-single-{0}', replace(parameters('allowedSingleIPs')[copyIndex()], '.', '')))]",
              "properties": {
                "startIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]",
                "endIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2024-11-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "replica": {
                  "role": "Primary"
                },
                "storage": "[parameters('storage')]",
                "network": {
                  "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]"
                },
                "dataEncryption": "[if(parameters('useCMK'), createObject('type', 'AzureKeyVault', 'primaryKeyURI', parameters('keyVaultKeyId'), 'primaryUserAssignedIdentityId', parameters('cmkUserAssignedIdentityId')), createObject('type', 'SystemManaged'))]",
                "authConfig": {
                  "activeDirectoryAuth": "Enabled",
                  "passwordAuth": "Enabled",
                  "tenantId": "[parameters('tenantId')]"
                },
                "version": "[parameters('version')]",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[variables('loginPwd')]",
                "availabilityZone": "1",
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                },
                "highAvailability": "[parameters('highAvailability')]",
                "maintenanceWindow": {
                  "customWindow": "Disabled",
                  "dayOfWeek": 0,
                  "startHour": 0,
                  "startMinute": 0
                },
                "replicationRole": "Primary"
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('dbNameToUse'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.utf8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAllIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'AllowAll_2025-5-23_18-6-32')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAzureIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'AllowAllAzureServicesAndResourcesWithinAzureIps_2025-5-23_18-8-9')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-postgreSQLFlexibleServer-{0}', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-postgreSQLFlexibleServer-{0}', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]",
                      "groupIds": [
                        "postgresqlServer"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('Server={0};Database={1};Port=5432;User Id={2};Password={3};Ssl Mode=Require;', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview').fullyQualifiedDomainName, variables('dbNameToUse'), parameters('administratorLogin'), variables('loginPwd'))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('useCMK')]",
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'add')]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview', 'full').identity.principalId]",
                    "permissions": "[variables('keyVaultPermissions')]",
                    "tenantId": "[subscription().tenantId]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "POSTGRES_DOMAIN_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview').fullyQualifiedDomainName]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-postgreSQLFlexibleServer-{0}', parameters('name')), '')]",
                  "type": "postgres",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('postgreSQLExists')), parameters('serviceSettingDeployPostgreSQL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PostgreSQLRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "postgreSqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.postgreSQLName.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[variables('spAndMiArray')]"
          },
          "adminNames": {
            "value": "[variables('p011_genai_team_lead_email_array')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11848605134918445830"
            },
            "description": "Creates role assignments for PostgreSQL Flexible Server."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "adminNames": {
              "type": "array",
              "defaultValue": []
            },
            "postgreSqlServerName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "postgreSqlReaderRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "postgreSqlContributorRoleId": "a9f2b5d7-5c0c-4d8e-bd6f-3f9c0f9d5f9b"
          },
          "resources": [
            {
              "copy": {
                "name": "userPostgreSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgreSqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('usersOrAdGroupArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]"
              }
            },
            {
              "copy": {
                "name": "spPostgreSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgreSqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('servicePrincipleAndMIArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "copy": {
                "name": "pgAdmins",
                "count": "[length(parameters('adminNames'))]"
              },
              "condition": "[not(empty(parameters('adminNames')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/administrators",
              "apiVersion": "2025-01-01-preview",
              "name": "[format('{0}/{1}', parameters('postgreSqlServerName'), guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('adminNames')[copyIndex()]))]",
              "properties": {
                "principalName": "[parameters('adminNames')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "tenantId": "[subscription().tenantId]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('PostgreSQL4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('postgreSQLExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployPostgreSQL')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkPostgreSQL{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.postgreSQLName.value]",
                "type": "Microsoft.DBforPostgreSQL/flexibleServers",
                "groupIds": [
                  "postgresqlServer"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.postgreSQLName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('PostgreSQL4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('redisExists')), parameters('serviceSettingDeployRedisCache'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RedisCache4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.redisName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "skuName": {
            "value": "[parameters('redisSKU')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.keyvaultName.value]"
          },
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1593049858357460099"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
              }
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-redis-con-string"
            },
            "redisVersion": {
              "type": "string",
              "defaultValue": "latest"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "replicasPerPrimary": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "shardCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 2,
              "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "metadata": {
                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional, default is Standard. The type of Redis cache to deploy."
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "allLogs",
                "ConnectedClientList"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "metadata": {
                "description": "Has the resource private endpoint?"
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {
                "maxmemory-policy": "volatile-lru",
                "maxmemory-reserved": "50",
                "maxfragmentationmemory-reserved": "50"
              },
              "metadata": {
                "description": "Optional. Redis configuration. See https://docs.microsoft.com/azure/azure-cache-for-redis/cache-configure for valid values."
              }
            },
            "updateChannel": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "Patch",
                "Minor",
                "Major"
              ],
              "metadata": {
                "description": "Optional. Specifies which Redis updates are automatically applied. Default is None."
              }
            },
            "zonalAllocationPolicy": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Specifies distribution of Redis cache nodes across Availability Zones. Only supported for Premium SKUs."
              }
            },
            "disableAccessKeyAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disables access via Redis keys. Requires AAD integration."
              }
            },
            "enableAadIntegration": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables Azure Active Directory authentication."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsSpecified",
                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                "input": {
                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                  "enabled": true
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "redisConfiguration": "[union(parameters('redisConfiguration'), if(parameters('enableAadIntegration'), createObject('aad-enabled', 'true'), createObject()))]",
                "redisVersion": "[parameters('redisVersion')]",
                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                "disableAccessKeyAuthentication": "[parameters('disableAccessKeyAuthentication')]",
                "updateChannel": "[parameters('updateChannel')]",
                "zonalAllocationPolicy": "[if(equals(parameters('skuName'), 'Premium'), parameters('zonalAllocationPolicy'), null())]",
                "sku": {
                  "capacity": "[parameters('capacity')]",
                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                  "name": "[parameters('skuName')]"
                },
                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
              },
              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').primaryKey)]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: REDIS"
              }
            },
            {
              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[parameters('diagnosticSettingsName')]",
              "properties": {
                "storageAccountId": null,
                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                "eventHubAuthorizationRuleId": null,
                "eventHubName": null,
                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-redis-{0}', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-redis-{0}', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Cache/redis', parameters('name'))]",
                      "groupIds": [
                        "redisCache"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The resource name."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID."
              },
              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
            },
            "hostName": {
              "type": "string",
              "metadata": {
                "description": "Redis hostname."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').hostName]"
            },
            "sslPort": {
              "type": "int",
              "metadata": {
                "description": "Redis SSL port."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').sslPort]"
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
              },
              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').subnetId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01', 'full').location]"
            },
            "redisConnectionStringSecretName": {
              "type": "string",
              "metadata": {
                "description": "The name of the secret in keyvault, holding the connection string to redis."
              },
              "value": "[parameters('connectionStringKey')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-redis-{0}', parameters('name')), '')]",
                  "type": "redis",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Cache/redis', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('redisExists')), parameters('serviceSettingDeployRedisCache'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RedisCacheRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "redisName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.redisName.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[variables('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15259879239447699339"
            },
            "description": "Creates role assignments for Redis Cache."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "redisName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            },
            "builtInAccessPolicyName": {
              "type": "string",
              "defaultValue": "Data Contributor",
              "allowedValues": [
                "Data Owner",
                "Data Contributor",
                "Data Reader"
              ],
              "metadata": {
                "description": "Specify name of Built-In access policy to use as assignment."
              }
            },
            "builtInAccessPolicyAssignmentName": {
              "type": "string",
              "defaultValue": "[format('builtInAccessPolicyAssignment-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "builtInAccessPolicyAssignmentObjectId": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Specify the valid objectId(usually it is a GUID) of the Microsoft Entra Service Principal or Managed Identity or User Principal to which the built-in access policy would be assigned."
              }
            },
            "builtInAccessPolicyAssignmentObjectAlias": {
              "type": "string",
              "defaultValue": "[format('builtInAccessPolicyApplication-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify human readable name of principal Id of the Microsoft Entra Application name or Managed Identity name used for built-in policy assignment."
              }
            },
            "customAccessPolicyName": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicy-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "customAccessPolicyPermissions": {
              "type": "string",
              "defaultValue": "+@connection +get +hget allkeys",
              "metadata": {
                "description": "Specify the valid permissions for the customer access policy to create. For details refer to https://aka.ms/redis/ConfigureAccessPolicyPermissions"
              }
            },
            "customAccessPolicyAssignmentName": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicyAssignment-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "customAccessPolicyAssignmentObjectId": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Specify the valid objectId(usually it is a GUID) of the Microsoft Entra Service Principal or Managed Identity or User Principal to which the custom access policy would be assigned."
              }
            },
            "customAccessPolicyAssignmentObjectAlias": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicyApplication-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify human readable name of principal Id of the Microsoft Entra Application name or Managed Identity name used for custom policy assignment."
              }
            }
          },
          "variables": {
            "redisContributorRoleId": "e0f68234-74aa-48ed-b826-c38b57376e17",
            "readerRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "contributorId": "fcfef8a3-163d-4692-937a-460c785b8fdb"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis/accessPolicyAssignments",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('builtInAccessPolicyAssignmentName'))]",
              "properties": {
                "accessPolicyName": "[parameters('builtInAccessPolicyName')]",
                "objectId": "[parameters('builtInAccessPolicyAssignmentObjectId')]",
                "objectIdAlias": "[parameters('builtInAccessPolicyAssignmentObjectAlias')]"
              }
            },
            {
              "type": "Microsoft.Cache/redis/accessPolicies",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('customAccessPolicyName'))]",
              "properties": {
                "permissions": "[parameters('customAccessPolicyPermissions')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis/accessPolicyAssignments', parameters('redisName'), parameters('builtInAccessPolicyAssignmentName'))]"
              ]
            },
            {
              "type": "Microsoft.Cache/redis/accessPolicyAssignments",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('customAccessPolicyAssignmentName'))]",
              "properties": {
                "accessPolicyName": "[parameters('customAccessPolicyName')]",
                "objectId": "[parameters('customAccessPolicyAssignmentObjectId')]",
                "objectIdAlias": "[parameters('customAccessPolicyAssignmentObjectAlias')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis/accessPolicies', parameters('redisName'), parameters('customAccessPolicyName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('RedisCache4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('redisExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployRedisCache')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkRedisCache{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.redisName.value]",
                "type": "Microsoft.Cache/redis",
                "groupIds": [
                  "redisCache"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Cache/redis/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.redisName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('RedisCache4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('sqlServerExists')), parameters('serviceSettingDeploySQLDatabase'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SqlServer4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.sqlServerName.value]"
          },
          "databaseName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.sqlDBName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "skuObject": "[if(empty(variables('sqlServerSKUObject_DTU')), createObject('value', createObject()), createObject('value', variables('sqlServerSKUObject_DTU')))]",
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.keyvaultName.value]"
          },
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15650693920444933281"
            },
            "description": "Creates an Azure SQL Server instance with a SQL Database"
          },
          "parameters": {
            "serverName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "skuObject": {
              "type": "object"
            },
            "version": {
              "type": "string",
              "defaultValue": "12.0"
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "appUser": {
              "type": "string",
              "defaultValue": "aifactory-user"
            },
            "sqlAdmin": {
              "type": "string",
              "defaultValue": "aifactory-admin"
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "aifdb"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-sqldb-con-string"
            },
            "sqlAdminPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "appUserPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "sqlServerAllowedIpRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of IP firewall rules to apply. Example: [ { \"name\": \"AllowAzureServices\", \"startIpAddress\": \"0.0.0.0\", \"endIpAddress\": \"0.0.0.0\" }, { \"name\": \"AllowMyDevIP\", \"startIpAddress\": \"YOUR_IP\", \"endIpAddress\": \"YOUR_IP\" } ]"
              }
            },
            "allowAzureIPsFirewall": {
              "type": "bool",
              "defaultValue": "[not(parameters('createPrivateEndpoint'))]"
            },
            "allowAllIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowedSingleIPs": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "seed": "[uniqueString(resourceGroup().id, subscription().subscriptionId, deployment().name)]",
            "uppercaseLetter": "[substring(toUpper(variables('seed')), 0, 1)]",
            "lowercaseLetter": "[substring(toLower(variables('seed')), 1, 1)]",
            "numbers": "[substring(variables('seed'), 2, 4)]",
            "specialChar": "!@#$",
            "randomSpecialChar": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "randomSpecialChar2": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "adminPwd": "[if(empty(parameters('sqlAdminPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar'), variables('numbers'), guid(deployment().name)), parameters('sqlAdminPassword'))]",
            "userPwd": "[if(empty(parameters('appUserPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar2'), variables('numbers'), guid(deployment().name)), parameters('appUserPassword'))]",
            "defaultSku": {
              "name": "S0",
              "tier": "Standard",
              "capacity": 10
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "sku": "[if(not(empty(parameters('skuObject'))), createObject('name', parameters('skuObject').name, 'tier', parameters('skuObject').tier, 'capacity', parameters('skuObject').capacity), createObject('name', variables('defaultSku').name, 'tier', variables('defaultSku').tier, 'capacity', variables('defaultSku').capacity))]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAllIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'sql-all-fw-rule')]",
              "properties": {
                "startIpAddress": "0.0.0.1",
                "endIpAddress": "255.255.255.254"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAzureIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'sql-allow-azure-services-fw-rule')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlServer::firewallSingle",
                "count": "[length(parameters('allowedSingleIPs'))]"
              },
              "condition": "[not(parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), format('sql-allow-single-{0}', replace(parameters('allowedSingleIPs')[copyIndex()], '.', '')))]",
              "properties": {
                "startIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]",
                "endIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlServer::serverIpFirewallRules",
                "count": "[length(parameters('sqlServerAllowedIpRules'))]"
              },
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlServerAllowedIpRules')[copyIndex()].name)]",
              "properties": {
                "startIpAddress": "[parameters('sqlServerAllowedIpRules')[copyIndex()].startIpAddress]",
                "endIpAddress": "[parameters('sqlServerAllowedIpRules')[copyIndex()].endIpAddress]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('subnetNamePend'))), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/virtualNetworkRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), format('vnetrule-{0}', last(split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend')), '/'))))]",
              "properties": {
                "virtualNetworkSubnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]",
                "ignoreMissingVnetServiceEndpoint": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2024-05-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "version": "[parameters('version')]",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "restrictOutboundNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Enabled', 'Disabled')]",
                "administratorLogin": "[parameters('sqlAdmin')]",
                "administratorLoginPassword": "[variables('adminPwd')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'sqlAdminPassword')]",
              "properties": {
                "value": "[variables('adminPwd')]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'appUserPassword')]",
              "properties": {
                "value": "[variables('userPwd')]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0}; Password={1}', format('Server={0}; Database={1}; User={2}', reference(resourceId('Microsoft.Sql/servers', parameters('serverName')), '2024-05-01-preview').fullyQualifiedDomainName, parameters('databaseName'), parameters('appUser')), variables('userPwd'))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]",
                "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]",
                      "groupIds": [
                        "sqlServer"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "connectionStringKey": {
              "type": "string",
              "value": "[parameters('connectionStringKey')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "serverName": {
              "type": "string",
              "value": "[parameters('serverName')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName')), '')]",
                  "type": "sql",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Sql/servers', parameters('serverName')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('sqlServerExists')), parameters('serviceSettingDeploySQLDatabase'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SqlServerRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlServerName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.sqlServerName.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[variables('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13740601472124994315"
            },
            "description": "Creates role assignments for Azure SQL Server and SQL Database."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "sqlServerName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            }
          },
          "variables": {
            "sqlContributorRoleId": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
            "sqlDatabaseAdminRoleId": "dbaa88c4-8eeb-4f5a-9e09-3c5b2e2f7ef5",
            "readerRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "contributorId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "copy": {
                "name": "userSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('sqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorId'))]",
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]"
              }
            },
            {
              "copy": {
                "name": "spSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('sqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('servicePrincipleAndMIArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "sqlRoleAssignments": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(parameters('usersOrAdGroupArray'))))]",
                "input": {
                  "id": "[extensionResourceId(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[range(0, length(parameters('usersOrAdGroupArray')))[copyIndex()]]))]",
                  "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[range(0, length(parameters('usersOrAdGroupArray')))[copyIndex()]])]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('SqlServer4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('sqlServerExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeploySQLDatabase')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkSqlServer{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.sqlServerName.value]",
                "type": "Microsoft.Sql/servers",
                "groupIds": [
                  "sqlServer"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Sql/servers/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix'))), '2022-09-01').outputs.sqlServerName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('SqlServer4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "cosmosDBDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Cosmos DB deployment status"
      },
      "value": "[and(not(parameters('cosmosDBExists')), parameters('serviceSettingDeployCosmosDB'))]"
    },
    "postgreSQLDeployed": {
      "type": "bool",
      "metadata": {
        "description": "PostgreSQL deployment status"
      },
      "value": "[and(not(parameters('postgreSQLExists')), parameters('serviceSettingDeployPostgreSQL'))]"
    },
    "redisCacheDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Redis Cache deployment status"
      },
      "value": "[and(not(parameters('redisExists')), parameters('serviceSettingDeployRedisCache'))]"
    },
    "sqlServerDeployed": {
      "type": "bool",
      "metadata": {
        "description": "SQL Server deployment status"
      },
      "value": "[and(not(parameters('sqlServerExists')), parameters('serviceSettingDeploySQLDatabase'))]"
    }
  }
}