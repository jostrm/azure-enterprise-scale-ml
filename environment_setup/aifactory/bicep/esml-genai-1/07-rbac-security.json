{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "9375369286965093466"
    }
  },
  "parameters": {
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "aifactorySalt10char": {
      "type": "string",
      "defaultValue": ""
    },
    "randomValue": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsObjectID": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsEmail": {
      "type": "string",
      "defaultValue": ""
    },
    "commonResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "subscriptionIdDevTestProd": {
      "type": "string"
    },
    "genaiSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "aksSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "acaSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "commonRGNamePrefix": {
      "type": "string",
      "defaultValue": ""
    },
    "amlExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiHubExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiServicesExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiSearchExists": {
      "type": "bool",
      "defaultValue": false
    },
    "openaiExists": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAzureMachineLearning": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Machine Learning deployment"
      }
    },
    "enableAIFoundryHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Foundry Hub deployment"
      }
    },
    "enableAIServices": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Services deployment"
      }
    },
    "enableAISearch": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Search deployment"
      }
    },
    "serviceSettingDeployAzureOpenAI": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure OpenAI deployment"
      }
    },
    "serviceSettingDeployAzureAIVision": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure AI Vision deployment"
      }
    },
    "serviceSettingDeployAzureSpeech": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Speech deployment"
      }
    },
    "serviceSettingDeployAIDocIntelligence": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable AI Document Intelligence deployment"
      }
    },
    "addBastionHost": {
      "type": "bool",
      "defaultValue": false
    },
    "bastionResourceGroup": {
      "type": "string",
      "defaultValue": ""
    },
    "bastionSubscription": {
      "type": "string",
      "defaultValue": ""
    },
    "bastionName": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameFullBastion": {
      "type": "string",
      "defaultValue": ""
    },
    "disableContributorAccessForUsers": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetNameFull": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "targetResourceGroup": {
      "type": "string"
    },
    "commonResourceGroup": {
      "type": "string"
    },
    "aiSearchName": {
      "type": "string"
    },
    "openAIName": {
      "type": "string"
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": ""
    },
    "p011_genai_team_lead_array": {
      "type": "array",
      "defaultValue": []
    },
    "spAndMiArray": {
      "type": "array",
      "defaultValue": []
    },
    "useAdGroups": {
      "type": "bool",
      "defaultValue": false
    },
    "azureMachineLearningObjectId": {
      "type": "string",
      "defaultValue": ""
    },
    "datalakeName_param": {
      "type": "string",
      "defaultValue": ""
    },
    "commonLakeNamePrefixMax8chars": {
      "type": "string"
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true
    },
    "projecttags": {
      "type": "object",
      "defaultValue": {}
    }
  },
  "variables": {
    "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
    "cmnName": "cmn",
    "genaiName": "genai",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}-{1}-{2}', variables('projectName'), parameters('env'), parameters('randomValue'))]",
    "var_amlPrincipalId": "",
    "var_aiHubPrincipalId": "",
    "projectResourceGroup_rgId": "[resourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('targetResourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceSuffix": {
            "value": "[parameters('commonResourceSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt10char": {
            "value": "[parameters('aifactorySalt10char')]"
          },
          "randomValue": {
            "value": "[parameters('randomValue')]"
          },
          "aifactorySuffixRG": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "commonRGNamePrefix": {
            "value": "[parameters('commonRGNamePrefix')]"
          },
          "technicalAdminsObjectID": {
            "value": "[parameters('technicalAdminsObjectID')]"
          },
          "technicalAdminsEmail": {
            "value": "[parameters('technicalAdminsEmail')]"
          },
          "commonResourceGroupName": {
            "value": "[parameters('commonResourceGroupName')]"
          },
          "subscriptionIdDevTestProd": {
            "value": "[parameters('subscriptionIdDevTestProd')]"
          },
          "genaiSubnetId": {
            "value": "[parameters('genaiSubnetId')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "acaSubnetId": {
            "value": "[parameters('acaSubnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11269673137520673052"
            }
          },
          "parameters": {
            "env": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "prod"
              ],
              "metadata": {
                "description": "Environment: dev, test, prod"
              }
            },
            "projectNumber": {
              "type": "string",
              "metadata": {
                "description": "Project number (e.g., \"005\")"
              }
            },
            "locationSuffix": {
              "type": "string",
              "metadata": {
                "description": "Location suffix (e.g., \"weu\", \"swc\")"
              }
            },
            "commonResourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Common resource suffix (e.g., \"-001\")"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Project-specific resource suffix"
              }
            },
            "aifactorySalt10char": {
              "type": "string",
              "metadata": {
                "description": "Random salt for unique naming"
              }
            },
            "randomValue": {
              "type": "string"
            },
            "aifactorySuffixRG": {
              "type": "string",
              "metadata": {
                "description": "AI Factory suffix for resource groups"
              }
            },
            "commonRGNamePrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Common resource group name prefix"
              }
            },
            "technicalAdminsObjectID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins OID list"
              }
            },
            "technicalAdminsEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins EMAIL list"
              }
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "subscriptionIdDevTestProd": {
              "type": "string"
            },
            "genaiSubnetId": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "acaSubnetId": {
              "type": "string"
            }
          },
          "variables": {
            "projectName": "[format('prj{0}', parameters('projectNumber'))]",
            "cmnName": "cmn",
            "genaiName": "genai",
            "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
            "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
            "technicalAdminsObjectID_array": "[array(split(replace(parameters('technicalAdminsObjectID'), '\\s+', ''), ','))]",
            "p011_genai_team_lead_array": "[if(empty(parameters('technicalAdminsObjectID')), createArray(), union(variables('technicalAdminsObjectID_array'), createArray()))]",
            "technicalAdminsEmail_array": "[array(split(parameters('technicalAdminsEmail'), ','))]",
            "p011_genai_team_lead_email_array": "[if(empty(parameters('technicalAdminsEmail')), createArray(), variables('technicalAdminsEmail_array'))]",
            "randomSalt": "[if(or(empty(parameters('aifactorySalt10char')), lessOrEquals(length(parameters('aifactorySalt10char')), 5)), substring(parameters('randomValue'), 6, 10), parameters('aifactorySalt10char'))]",
            "uniqueInAIFenv": "[substring(uniqueString(subscriptionResourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('commonResourceGroupName'))), 0, 5)]",
            "aiHubName": "[format('ai-hub-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifProjectName": "[format('ai-prj{0}-01-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "safeNameAISearch": "[replace(toLower(format('aisearch{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))), '-', '')]",
            "aiServicesName": "[replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', '')]",
            "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifName": "[format('aifoundry-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifPrjName": "[format('aifoundry-{0}-01-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('twoNumbers'))]",
            "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
            "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
            "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "aiProjectName": "[format('ai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "segments": "[split(parameters('genaiSubnetId'), '/')]",
            "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
            "defaultSubnet": "[variables('genaiSubnetName')]",
            "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
            "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
            "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
            "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]"
          },
          "resources": [],
          "outputs": {
            "genaiSubnetName": {
              "type": "string",
              "value": "[variables('genaiSubnetName')]"
            },
            "aksSubnetName": {
              "type": "string",
              "value": "[variables('aksSubnetName')]"
            },
            "acaSubnetName": {
              "type": "string",
              "value": "[variables('acaSubnetName')]"
            },
            "defaultSubnet": {
              "type": "string",
              "value": "[variables('defaultSubnet')]"
            },
            "aiHubName": {
              "type": "string",
              "value": "[variables('aiHubName')]"
            },
            "aifProjectName": {
              "type": "string",
              "value": "[variables('aifProjectName')]"
            },
            "aoaiName": {
              "type": "string",
              "value": "[variables('aoaiName')]"
            },
            "amlName": {
              "type": "string",
              "value": "[variables('amlName')]"
            },
            "safeNameAISearch": {
              "type": "string",
              "value": "[variables('safeNameAISearch')]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "dashboardInsightsName": {
              "type": "string",
              "value": "[variables('dashboardInsightsName')]"
            },
            "applicationInsightName": {
              "type": "string",
              "value": "[variables('applicationInsightName')]"
            },
            "bingName": {
              "type": "string",
              "value": "[variables('bingName')]"
            },
            "containerAppsEnvName": {
              "type": "string",
              "value": "[variables('containerAppsEnvName')]"
            },
            "containerAppAName": {
              "type": "string",
              "value": "[variables('containerAppAName')]"
            },
            "containerAppWName": {
              "type": "string",
              "value": "[variables('containerAppWName')]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[variables('cosmosDBName')]"
            },
            "redisName": {
              "type": "string",
              "value": "[variables('redisName')]"
            },
            "postgreSQLName": {
              "type": "string",
              "value": "[variables('postgreSQLName')]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[variables('sqlServerName')]"
            },
            "sqlDBName": {
              "type": "string",
              "value": "[variables('sqlDBName')]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[variables('functionAppName')]"
            },
            "webAppName": {
              "type": "string",
              "value": "[variables('webAppName')]"
            },
            "funcAppServicePlanName": {
              "type": "string",
              "value": "[variables('funcAppServicePlanName')]"
            },
            "webbAppServicePlanName": {
              "type": "string",
              "value": "[variables('webbAppServicePlanName')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmName')]"
            },
            "aifName": {
              "type": "string",
              "value": "[variables('aifName')]"
            },
            "aifPrjName": {
              "type": "string",
              "value": "[variables('aifPrjName')]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "storageAccount1001Name": {
              "type": "string",
              "value": "[variables('storageAccount1001Name')]"
            },
            "storageAccount2001Name": {
              "type": "string",
              "value": "[variables('storageAccount2001Name')]"
            },
            "acrProjectName": {
              "type": "string",
              "value": "[variables('acrProjectName')]"
            },
            "acrCommonName": {
              "type": "string",
              "value": "[variables('acrCommonName')]"
            },
            "miACAName": {
              "type": "string",
              "value": "[variables('miACAName')]"
            },
            "miPrjName": {
              "type": "string",
              "value": "[variables('miPrjName')]"
            },
            "laWorkspaceName": {
              "type": "string",
              "value": "[variables('laWorkspaceName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "projectName": {
              "type": "string",
              "value": "[variables('projectName')]"
            },
            "cmnName": {
              "type": "string",
              "value": "[variables('cmnName')]"
            },
            "genaiName": {
              "type": "string",
              "value": "[variables('genaiName')]"
            },
            "prjResourceSuffixNoDash": {
              "type": "string",
              "value": "[variables('prjResourceSuffixNoDash')]"
            },
            "twoNumbers": {
              "type": "string",
              "value": "[variables('twoNumbers')]"
            },
            "p011_genai_team_lead_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_array')]"
            },
            "p011_genai_team_lead_email_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_email_array')]"
            },
            "uniqueInAIFenv": {
              "type": "string",
              "value": "[variables('uniqueInAIFenv')]"
            },
            "randomSalt": {
              "type": "string",
              "value": "[variables('randomSalt')]"
            }
          }
        }
      }
    },
    {
      "condition": "[and(empty(parameters('bastionResourceGroup')), parameters('addBastionHost'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac1GenAIReadUsersCmnKV{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "common_kv_name": {
            "value": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.uniqueInAIFenv.value, parameters('commonResourceSuffix'))]"
          },
          "user_object_ids": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "bastion_service_name": "[if(empty(parameters('bastionName')), createObject('value', format('bastion-{0}-{1}{2}', parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix'))), createObject('value', parameters('bastionName')))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9895493337093229926"
            }
          },
          "parameters": {
            "common_kv_name": {
              "type": "string"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "bastion_service_name": {
              "type": "string"
            },
            "addBastion": {
              "type": "bool",
              "defaultValue": false
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "copy": {
                "name": "readerUserCommonKv",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('common_kv_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_kv_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for keyvault: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_kv_name'))]"
              }
            },
            {
              "copy": {
                "name": "readerUserBastion",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "condition": "[parameters('addBastion')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('bastion_service_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for Bastion service: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('rbac12GenAIRUsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('bastionResourceGroup'))), not(empty(parameters('bastionSubscription'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac2GenAIUsersBastionExt{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('bastionSubscription')]",
      "resourceGroup": "[parameters('bastionResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "bastion_service_name": "[if(empty(parameters('bastionName')), createObject('value', format('bastion-{0}-{1}{2}', parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix'))), createObject('value', parameters('bastionName')))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8829912748312753645"
            }
          },
          "parameters": {
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "bastion_service_name": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "copy": {
                "name": "readerUserBastion",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('bastion_service_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for Bastion service: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('rbac12GenAIRUsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(parameters('serviceSettingDeployAzureOpenAI'), not(parameters('openaiExists')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac3OpenAI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "aiSearchName": {
            "value": "[parameters('aiSearchName')]"
          },
          "openAIServicePrincipal": {
            "value": "placeholder-principal-id"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "openAIName": {
            "value": "[parameters('openAIName')]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "956532646074107392"
            }
          },
          "parameters": {
            "openAIServicePrincipal": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "openAIName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
            "cognitiveServicesUsagesReaderId": "bba48692-92b0-4667-a9ad-c31c7b334ac2"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "description": "010"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchIndexDataContributor for Azure OpenAI MI"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), '2024-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "description": "012"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchServiceContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage: StorageBlobDataContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: StorageBlobDataContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019b"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage: File Data Privileged Contributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019a"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: File Data Privileged Contributor for Azure OpenAI MI"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesContributor role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Contributor for users. All, except: Access quota, Make inference API call with Microsoft Entra ID"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributor role to project service principal/Mi OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesUsagesReaderId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesUsagesReaderId role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Usage Reader for users. Only Access quota (Minimal permission to view Cognitive Services usages)"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesUsagesReaderId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUsagesReader role to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: OpenAIContributorRole to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI Contributor for users. Full access including the ability to fine-tune, deploy and generate text"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-03-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-03-01-preview', 'full').identity.principalId, parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAIUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('024: OpenAICognitiveServicesUSer to USER with OID  {0} for : {1} to list API keys', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI User:Read access to view files, models, deployments. The ability to create completion and embedding calls."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAISP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIUserRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentSearchIndexDataContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('openAIServicePrincipal')), '')]"
            },
            "roleAssignmentSearchServiceContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('openAIServicePrincipal')), '')]"
            },
            "roleAssignmentStorageBlobDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('rbac12GenAIRUsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiServicesExists')), parameters('enableAIServices'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac4AIServices{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "aiSearchName": {
            "value": "[parameters('aiSearchName')]"
          },
          "aiServicesPrincipalId": {
            "value": "placeholder-principal-id"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2090004415983565691"
            }
          },
          "parameters": {
            "aiServicesPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "cognitiveServicesCustomVisionContributorRoleId": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "description": "012"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019a"
              }
            }
          ],
          "outputs": {
            "roleAssignmentSearchIndexDataContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('aiServicesPrincipalId')), '')]"
            },
            "roleAssignmentSearchServiceContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('aiServicesPrincipalId')), '')]"
            },
            "roleAssignmentStorageBlobDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiSearchExists')), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac5Search{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value]"
          },
          "aiSearchMIObjectId": {
            "value": "placeholder-principal-id"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6954951461031366830"
            }
          },
          "parameters": {
            "aiSearchMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiServicesName": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "description": "018"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentCognitiveServicesOpenAIContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentCognitiveServicesOpenAIContributorGUID": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(and(not(parameters('aiHubExists')), not(empty(parameters('azureMachineLearningObjectId')))), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac6Aml2RG{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureMachineLearningObjectId": {
            "value": "[parameters('azureMachineLearningObjectId')]"
          },
          "aiHubName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiHubName.value]"
          },
          "aiHubPrincipalId": {
            "value": "placeholder-principal-id"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16042463666382824884"
            }
          },
          "parameters": {
            "azureMachineLearningObjectId": {
              "type": "string"
            },
            "aiHubName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "aml_appId": "0736f41a-0425-4b46-bdb5-1563eff02385",
            "contributorRole": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('contributorRole'), parameters('azureMachineLearningObjectId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRole'))]",
                "principalId": "[parameters('azureMachineLearningObjectId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor on RG for AML SP on RG: {0}', resourceGroup().id)]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: AzureML OID for Contributor"
              }
            },
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('contributorRoleId'), parameters('aiHubPrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('aiHubPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('contributorRoleId role to AI Hub for : {0}', parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "AI Hub: azureAIAdministrator:"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac7UsersAIHub{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "resourceGroupId": {
            "value": "[variables('projectResourceGroup_rgId')]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "aiHubName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiHubName.value]"
          },
          "aiHubProjectName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiProjectName.value]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "disableContributorAccessForUsers": {
            "value": "[parameters('disableContributorAccessForUsers')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5100998829289083952"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "resourceGroupId": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "aiServicesName": {
              "type": "string"
            },
            "aiHubName": {
              "type": "string"
            },
            "aiHubProjectName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "disableContributorAccessForUsers": {
              "type": "bool",
              "defaultValue": false
            },
            "idempotency": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleBasedAccessControlAdministratorRG": "f58310d9-a9f6-439a-9e8d-f62e7b41a168",
            "aiUserRoleId": "53ca6127-db72-4b80-b1b0-d745d6d5456d",
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "cognitiveServicesCustomVisionContributorRoleId": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
            "cognitiveServicesUsagesReaderId": "bba48692-92b0-4667-a9ad-c31c7b334ac2",
            "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('azureAIDeveloperRoleId'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), '2024-10-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "description": "[format('Azure AI Developer On AIServices From AIProject MI OID of: {0} to {1}', parameters('aiHubProjectName'), parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderU",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesUsagesReaderId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesUsagesReaderId role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Usage Reader for users. Only Access quota (Minimal permission to view Cognitive Services usages)"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderSPU",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesUsagesReaderId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUsagesReader role to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorUsersU",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: OpenAIContributorRole to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI Contributor for users. Full access including the ability to fine-tune, deploy and generate text"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAIUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('024: OpenAICognitiveServicesUSer to USER with OID  {0} for : {1} to list API keys', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI User:Read access to view files, models, deployments. The ability to create completion and embedding calls."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAISP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIUserRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027a: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 1: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028a: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Azure Storage 1: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole2",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027b: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName2'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole2SP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName2'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor2",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028b: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName2'))]"
              },
              "metadata": {
                "description": "Azure Storage 2: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor2SP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName2'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('043 AzureAIDeveloper role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": ""
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignment",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIAdministrator'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 azureAIAdministrator role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubProjectName'))]"
              },
              "metadata": {
                "description": "AI Project: azureAIAdministrator:"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignmentSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIAdministrator'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIAdministrator to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubProjectName'))]"
              }
            },
            {
              "copy": {
                "name": "aiDevOnAIProject",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('azureAIDeveloperRoleId role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubProjectName'))]"
              },
              "metadata": {
                "description": "AI Project: Azure AI Developer:"
              }
            },
            {
              "copy": {
                "name": "aiDevOnAIProjectSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubProjectName'))]"
              }
            },
            {
              "copy": {
                "name": "cogServiceContribOnAIProjectUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('cognitiveServicesContributorRoleId role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "AI Services: Azure Cognitive services contributor"
              }
            },
            {
              "copy": {
                "name": "cogServiceContribOnAIProjectSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "AI Services: Azure Cognitive services contributor"
              }
            },
            {
              "copy": {
                "name": "aiUserUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Azure AI User role to USER with OID  {0} for RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "aiUserSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Azure AI User to project service principal OID:{0} to RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]"
              }
            },
            {
              "copy": {
                "name": "cogServicesUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('cognitiveServicesUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 cognitiveServicesUserRoleId role to USER with OID  {0} for RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "cogServicesUserSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('cognitiveServicesUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUserRoleId to project service principal OID:{0} to RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]"
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 AzureAIInferenceDeploymentOperator role to USER with OID  {0} for {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIInferenceDeploymentOperatorRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMLDataScientistRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('041 AzureMLDataScientist role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: Azure ML Data scientist: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMLDataScientistRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMLDataScientistRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('042 AzureMachineLearningWorkspaceConnectionSecretsReader role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: AzureMachineLearningWorkspaceConnectionSecretsReader: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(parameters('disableContributorAccessForUsers'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('contributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('029: CONTRIBUTOR on RG to USER with OID  {0} for {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: CONTRIBUTOR for users."
              }
            },
            {
              "copy": {
                "name": "contributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('contributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('contributorRoleId to project service principal OID:{0} for {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            },
            {
              "copy": {
                "name": "roleBasedAccessControlAdminRGRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('roleBasedAccessControlAdministratorRG'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleBasedAccessControlAdministratorRG'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: RoleBasedAccessControlAdministrator on RG to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: RoleBasedAccessControlAdministrator for users."
              }
            },
            {
              "copy": {
                "name": "roleBasedAccessControlAdminRGRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('roleBasedAccessControlAdministratorRG'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleBasedAccessControlAdministratorRG'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('roleBasedAccessControlAdministrator to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            },
            {
              "copy": {
                "name": "acrPush",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('acrPushRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: acrPush role on RG to USER with OID  {0} for RG: {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: acrPushRoleId for users."
              }
            },
            {
              "copy": {
                "name": "acrPushSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('acrPushRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('acrPush role to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiSearchExists')), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac7Users2AISearch{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[parameters('aiSearchName')]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17996995908680566119"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
          },
          "resources": [
            {
              "copy": {
                "name": "searchIndexDataContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('020: SearchIndexUserDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchIndexDataContributor for users. \tGrants full access to Azure Cognitive Search index data"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataReaderAssign",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('021: searchIndexDataReader to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchIndexDataContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "searchServiceContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('022: CONTRIBUTOR to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: Search Service Contributor for users. Lets you manage Search services, but not access to them."
              }
            },
            {
              "copy": {
                "name": "searchServiceContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchServiceContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[equals(parameters('serviceSettingDeployAzureAIVision'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac8Vision{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "aiVisionMIObjectId": {
            "value": "placeholder-vision-principal"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "visonServiceName": {
            "value": "placeholder-vision-service-name"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3746189495030053250"
            }
          },
          "parameters": {
            "aiVisionMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "visonServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            },
            {
              "copy": {
                "name": "visionServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('visonServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('visonServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: CognitiveServicesUser to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('visonServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('visonServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('visonServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('visonServiceName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiVisionMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorName2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiVisionMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[equals(parameters('serviceSettingDeployAzureSpeech'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac9Speech{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "aiSpeechMIObjectId": {
            "value": "placeholder-speech-principal"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "speechServiceName": {
            "value": "placeholder-speech-service-name"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4272164495390143512"
            }
          },
          "parameters": {
            "aiSpeechMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "speechServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "copy": {
                "name": "speechServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('speechServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: CognitiveServicesUser to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('speechServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('speechServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('speechServiceName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[equals(parameters('serviceSettingDeployAIDocIntelligence'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac10Docs{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount2001Name.value]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "aiDocsIntelMIObjectId": {
            "value": "placeholder-docs-principal"
          },
          "docsServiceName": {
            "value": "placeholder-docs-service-name"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2371144325820084205"
            }
          },
          "parameters": {
            "aiDocsIntelMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "docsServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            },
            {
              "copy": {
                "name": "docsServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('docsServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('docsServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesContributor role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('docsServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('docsServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('docsServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('docsServiceName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorName2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiDocsIntelMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(parameters('addBastionHost'), empty(parameters('bastionSubscription')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac12GenAIRUsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "vNetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "common_bastion_subnet_name": {
            "value": "AzureBastionSubnet"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12912332237226903380"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the datafactory resource"
              }
            },
            "common_bastion_subnet_name": {
              "type": "string"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "networkContributorUserVnet",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Network Contributor to USER with OID  {0} for vNet: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "networkContributorSPVnet",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContribSP-{1}-{2}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Network Contributor to SERVICE PRINCIPLE with OID  {0} for vNet: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorUserBastionNSG",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}', parameters('common_bastion_subnet_name')))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER with OID  {0} for Bastion NSG: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(parameters('addBastionHost'), not(empty(parameters('bastionSubscription'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac13UsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('bastionSubscription')]",
      "resourceGroup": "[parameters('bastionResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "vNetName": {
            "value": "[parameters('vnetNameFullBastion')]"
          },
          "common_bastion_subnet_name": {
            "value": "AzureBastionSubnet"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12912332237226903380"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the datafactory resource"
              }
            },
            "common_bastion_subnet_name": {
              "type": "string"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "networkContributorUserVnet",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Network Contributor to USER with OID  {0} for vNet: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "networkContributorSPVnet",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContribSP-{1}-{2}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Network Contributor to SERVICE PRINCIPLE with OID  {0} for vNet: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorUserBastionNSG",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}', parameters('common_bastion_subnet_name')))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER with OID  {0} for Bastion NSG: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[parameters('useCommonACR')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac14UsersToCmnACR{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "commonRGId": {
            "value": "[resourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('commonResourceGroup'))]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10636290043371289123"
            }
          },
          "parameters": {
            "commonRGId": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
          },
          "resources": [
            {
              "copy": {
                "name": "acrPushCmn",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('commonRGId'), variables('acrPushRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: acrPush role on RG to USER with OID  {0} for RG: {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('commonRGId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: acrPushRoleId for users."
              }
            },
            {
              "copy": {
                "name": "acrPushSPCmn",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('commonRGId'), variables('acrPushRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('acrPush role to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('commonRGId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('rbac7UsersAIHub{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacLake4PrjFoundry{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlPrincipalId": {
            "value": "[variables('var_amlPrincipalId')]"
          },
          "aiHubPrincipleId": {
            "value": "[variables('var_aiHubPrincipalId')]"
          },
          "projectTeamGroupOrUser": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "adfPrincipalId": {
            "value": ""
          },
          "datalakeName": "[if(not(equals(parameters('datalakeName_param'), '')), createObject('value', parameters('datalakeName_param')), createObject('value', format('{0}{1}esml{2}{3}', parameters('commonLakeNamePrefixMax8chars'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.uniqueInAIFenv.value, replace(parameters('commonResourceSuffix'), '-', ''), parameters('env'))))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4566676250626908128"
            }
          },
          "parameters": {
            "amlPrincipalId": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipleId": {
              "type": "string",
              "defaultValue": ""
            },
            "projectTeamGroupOrUser": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "adfPrincipalId": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "datalakeName": {
              "type": "string"
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": {
            "datalakeFromCommon": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('datalakeName')]"
            },
            "readerAML": {
              "condition": "[not(empty(parameters('amlPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('readerRoleDefinitionId'), parameters('amlPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('amlPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to AML Managed Identity: {0} for Azure ML Studio to get access to datalake: {1}', parameters('amlPrincipalId'), parameters('datalakeName'))]"
              }
            },
            "lakeAIFoundry": {
              "condition": "[not(empty(parameters('aiHubPrincipleId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', variables('storageBlobDataContributor'), parameters('aiHubPrincipleId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('aiHubPrincipleId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributor to Managed Identity: {0} for Azure AI Foundry to get access to datalake: {1}', parameters('aiHubPrincipleId'), parameters('datalakeName'))]"
              }
            },
            "readerUserGroup": {
              "copy": {
                "name": "readerUserGroup",
                "count": "[length(range(0, length(parameters('projectTeamGroupOrUser'))))]"
              },
              "condition": "[greater(length(parameters('projectTeamGroupOrUser')), 0)]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], variables('readerRoleDefinitionId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('READER to USER or Group with OID  {0} for lake: {1}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], parameters('datalakeName'))]"
              }
            },
            "storageBlobDataContributorADF": {
              "condition": "[not(empty(parameters('adfPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('storageBlobDataContributor'), parameters('adfPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('adfPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to ADF Managed Identity: {0} for Azure Datafactory to get accesst to datalake: {1}', parameters('adfPrincipalId'), parameters('datalakeName'))]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacLake4Amlv2{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlPrincipalId": {
            "value": "[variables('var_amlPrincipalId')]"
          },
          "aiHubPrincipleId": {
            "value": "[variables('var_aiHubPrincipalId')]"
          },
          "projectTeamGroupOrUser": {
            "value": []
          },
          "adfPrincipalId": {
            "value": ""
          },
          "datalakeName": "[if(not(equals(parameters('datalakeName_param'), '')), createObject('value', parameters('datalakeName_param')), createObject('value', format('{0}{1}esml{2}{3}', parameters('commonLakeNamePrefixMax8chars'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.uniqueInAIFenv.value, replace(parameters('commonResourceSuffix'), '-', ''), parameters('env'))))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4566676250626908128"
            }
          },
          "parameters": {
            "amlPrincipalId": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipleId": {
              "type": "string",
              "defaultValue": ""
            },
            "projectTeamGroupOrUser": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "adfPrincipalId": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "datalakeName": {
              "type": "string"
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": {
            "datalakeFromCommon": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('datalakeName')]"
            },
            "readerAML": {
              "condition": "[not(empty(parameters('amlPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('readerRoleDefinitionId'), parameters('amlPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('amlPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to AML Managed Identity: {0} for Azure ML Studio to get access to datalake: {1}', parameters('amlPrincipalId'), parameters('datalakeName'))]"
              }
            },
            "lakeAIFoundry": {
              "condition": "[not(empty(parameters('aiHubPrincipleId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', variables('storageBlobDataContributor'), parameters('aiHubPrincipleId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('aiHubPrincipleId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributor to Managed Identity: {0} for Azure AI Foundry to get access to datalake: {1}', parameters('aiHubPrincipleId'), parameters('datalakeName'))]"
              }
            },
            "readerUserGroup": {
              "copy": {
                "name": "readerUserGroup",
                "count": "[length(range(0, length(parameters('projectTeamGroupOrUser'))))]"
              },
              "condition": "[greater(length(parameters('projectTeamGroupOrUser')), 0)]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], variables('readerRoleDefinitionId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('READER to USER or Group with OID  {0} for lake: {1}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], parameters('datalakeName'))]"
              }
            },
            "storageBlobDataContributorADF": {
              "condition": "[not(empty(parameters('adfPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('storageBlobDataContributor'), parameters('adfPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('adfPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to ADF Managed Identity: {0} for Azure Datafactory to get accesst to datalake: {1}', parameters('adfPrincipalId'), parameters('datalakeName'))]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    }
  ],
  "outputs": {
    "keystoreAndBastionRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Key Vault and Bastion RBAC deployment status"
      },
      "value": "[or(and(empty(parameters('bastionResourceGroup')), parameters('addBastionHost')), and(not(empty(parameters('bastionResourceGroup'))), not(empty(parameters('bastionSubscription')))))]"
    },
    "aiServicesRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "AI Services RBAC deployment status"
      },
      "value": "[or(or(and(parameters('serviceSettingDeployAzureOpenAI'), not(parameters('openaiExists'))), and(not(parameters('aiServicesExists')), parameters('enableAIServices'))), and(not(parameters('aiSearchExists')), parameters('enableAISearch')))]"
    },
    "aiHubMlRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "AI Hub and ML Platform RBAC deployment status"
      },
      "value": "[or(or(and(and(not(parameters('aiHubExists')), not(empty(parameters('azureMachineLearningObjectId')))), parameters('enableAIFoundryHub')), and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub'))), and(not(parameters('aiSearchExists')), parameters('enableAISearch')))]"
    },
    "optionalCognitiveRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Optional Cognitive Services RBAC deployment status"
      },
      "value": "[or(or(parameters('serviceSettingDeployAzureAIVision'), parameters('serviceSettingDeployAzureSpeech')), parameters('serviceSettingDeployAIDocIntelligence'))]"
    },
    "networkRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Network and VNet RBAC deployment status"
      },
      "value": "[or(and(parameters('addBastionHost'), empty(parameters('bastionSubscription'))), and(parameters('addBastionHost'), not(empty(parameters('bastionSubscription')))))]"
    },
    "commonResourceGroupRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Common Resource Group RBAC deployment status"
      },
      "value": "[parameters('useCommonACR')]"
    },
    "dataLakeRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Data Lake RBAC deployment status"
      },
      "value": "[or(and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub')), and(not(parameters('amlExists')), parameters('enableAzureMachineLearning')))]"
    },
    "rbacSecurityPhaseCompleted": {
      "type": "bool",
      "metadata": {
        "description": "RBAC Security Phase 7 deployment completed successfully"
      },
      "value": true
    }
  }
}