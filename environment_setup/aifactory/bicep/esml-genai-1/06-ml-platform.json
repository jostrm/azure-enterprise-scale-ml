{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "13287713030576044096"
    }
  },
  "parameters": {
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant ID"
      }
    },
    "amlExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiHubExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aifProjectExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aksExists": {
      "type": "bool",
      "defaultValue": false
    },
    "enableAzureMachineLearning": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Machine Learning deployment"
      }
    },
    "enableAIFoundryHub": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable AI Foundry Hub deployment"
      }
    },
    "serviceSettingEnableAIFoundryPreview": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable AI Foundry Preview features"
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "AMLStudioUIPrivate": {
      "type": "bool",
      "defaultValue": true
    },
    "allowPublicAccessWhenBehindVnet": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetNameFull": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "defaultSubnet": {
      "type": "string",
      "defaultValue": "snet-common"
    },
    "genaiSubnetName": {
      "type": "string",
      "defaultValue": "snet-genai"
    },
    "aksSubnetName": {
      "type": "string",
      "defaultValue": "aks-prj005"
    },
    "targetResourceGroup": {
      "type": "string"
    },
    "commonResourceGroup": {
      "type": "string"
    },
    "storageAccount1001Name": {
      "type": "string"
    },
    "storageAccount2001Name": {
      "type": "string"
    },
    "keyvaultName": {
      "type": "string"
    },
    "applicationInsightName": {
      "type": "string"
    },
    "acrName": {
      "type": "string"
    },
    "aiSearchName": {
      "type": "string"
    },
    "aiServicesName": {
      "type": "string"
    },
    "aksSubnetId": {
      "type": "string"
    },
    "aksServiceCidr": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "aksDnsServiceIP": {
      "type": "string",
      "defaultValue": "10.0.0.10"
    },
    "aksDockerBridgeCidr": {
      "type": "string",
      "defaultValue": "172.17.0.1/16"
    },
    "aksOutboundType": {
      "type": "string",
      "defaultValue": "loadBalancer"
    },
    "aks_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_version_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_dev_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aks_test_prod_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aml_ci_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_ci_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_dev_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aml_cluster_test_prod_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "projecttags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "uniqueInAIFenv": {
      "type": "string",
      "defaultValue": ""
    },
    "prjResourceSuffixNoDash": {
      "type": "string",
      "defaultValue": ""
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": ""
    },
    "p011_genai_team_lead_array": {
      "type": "array",
      "defaultValue": []
    },
    "spAndMiArray": {
      "type": "array",
      "defaultValue": []
    },
    "useAdGroups": {
      "type": "bool",
      "defaultValue": false
    },
    "laWorkspaceName": {
      "type": "string"
    },
    "aks_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_B4ms",
        "Standard_A4m_v2",
        "Standard_D3_v2"
      ]
    },
    "aks_testProd_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS13-2_v2",
        "Standard_A8m_v2"
      ]
    },
    "aml_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS3_v2",
        "Standard_F8s_v2",
        "Standard_DS12_v2"
      ]
    },
    "aml_testProd_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_D13_v2",
        "Standard_D4_v2",
        "Standard_F16s_v2"
      ]
    },
    "ci_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS11_v2"
      ]
    },
    "ci_devTest_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_D11_v2"
      ]
    }
  },
  "variables": {
    "copy": [
      {
        "name": "ipWhitelist_remove_ending_32",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": "[replace(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_32')], '/32', '')]"
      },
      {
        "name": "processedIpRulesAzureML",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')]))]"
        }
      },
      {
        "name": "processedIpRulesAIHub",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIHub')])]"
        }
      }
    ],
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "cmnName": "cmn",
    "genaiName": "genai",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', variables('projectName'), parameters('env'), parameters('uniqueInAIFenv'))]",
    "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "aiHubName": "[format('ai-hub-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "aifName": "[format('aif-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "aifProjectName": "[format('ai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "aksClusterName": "[format('aks-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "aiHubNameShort": "[format('ai-hub-{0}-{1}-{2}{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('resourceSuffix'))]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
    "aksSubnetNameExtracted": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
    "acrCommonName": "[replace(format('acr{0}{1}{2}{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('uniqueInAIFenv'), parameters('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "var_acr_cmn_or_prj": "[if(parameters('useCommonACR'), variables('acrCommonName'), parameters('acrName'))]",
    "privateLinksDnsZones": {
      "amlworkspace": {
        "id": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.api.azureml.ms', subscription().subscriptionId, parameters('commonResourceGroup'))]",
        "name": "privatelink.api.azureml.ms"
      },
      "notebooks": {
        "id": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.notebooks.azure.net', subscription().subscriptionId, parameters('commonResourceGroup'))]",
        "name": "privatelink.notebooks.azure.net"
      }
    },
    "aks_dev_sku_param": "[if(not(equals(parameters('aks_dev_sku_override'), '')), parameters('aks_dev_sku_override'), parameters('aks_dev_defaults')[0])]",
    "aks_test_prod_sku_param": "[if(not(equals(parameters('aks_test_prod_sku_override'), '')), parameters('aks_test_prod_sku_override'), parameters('aks_testProd_defaults')[0])]",
    "aks_version_param": "[if(not(equals(parameters('aks_version_override'), '')), parameters('aks_version_override'), '1.30.3')]",
    "aks_dev_nodes_param": "[if(not(equals(parameters('aks_dev_nodes_override'), -1)), parameters('aks_dev_nodes_override'), 1)]",
    "aks_test_prod_nodes_param": "[if(not(equals(parameters('aks_test_prod_nodes_override'), -1)), parameters('aks_test_prod_nodes_override'), 3)]",
    "aml_ci_dev_sku_param": "[if(not(equals(parameters('aml_ci_dev_sku_override'), '')), parameters('aml_ci_dev_sku_override'), parameters('ci_dev_defaults')[0])]",
    "aml_ci_test_prod_sku_param": "[if(not(equals(parameters('aml_ci_test_prod_sku_override'), '')), parameters('aml_ci_test_prod_sku_override'), parameters('ci_devTest_defaults')[0])]",
    "aml_cluster_dev_sku_param": "[if(not(equals(parameters('aml_cluster_dev_sku_override'), '')), parameters('aml_cluster_dev_sku_override'), parameters('aml_dev_defaults')[0])]",
    "aml_cluster_test_prod_sku_param": "[if(not(equals(parameters('aml_cluster_test_prod_sku_override'), '')), parameters('aml_cluster_test_prod_sku_override'), parameters('aml_testProd_defaults')[1])]",
    "aml_cluster_dev_nodes_param": "[if(not(equals(parameters('aml_cluster_dev_nodes_override'), -1)), parameters('aml_cluster_dev_nodes_override'), 3)]",
    "aml_cluster_test_prod_nodes_param": "[if(not(equals(parameters('aml_cluster_test_prod_nodes_override'), -1)), parameters('aml_cluster_test_prod_nodes_override'), 3)]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('targetResourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AzureMLDepl_{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('amlName')]"
          },
          "uniqueDepl": {
            "value": "[variables('deploymentProjSpecificUniqueSuffix')]"
          },
          "uniqueSalt5char": {
            "value": "[parameters('uniqueInAIFenv')]"
          },
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "aifactorySuffix": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "skuName": {
            "value": "basic"
          },
          "skuTier": {
            "value": "basic"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "aksSubnetName": {
            "value": "[variables('aksSubnetNameExtracted')]"
          },
          "aksDnsServiceIP": {
            "value": "[parameters('aksDnsServiceIP')]"
          },
          "aksServiceCidr": {
            "value": "[parameters('aksServiceCidr')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "vnetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetNameFull'))]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}-aml-to-vnt-mlcmn', variables('projectName'))]"
          },
          "amlPrivateDnsZoneID": {
            "value": "[variables('privateLinksDnsZones').amlworkspace.id]"
          },
          "notebookPrivateDnsZoneID": {
            "value": "[variables('privateLinksDnsZones').notebooks.id]"
          },
          "allowPublicAccessWhenBehindVnet": "[if(and(equals(parameters('AMLStudioUIPrivate'), true()), empty(variables('ipWhitelist_remove_ending_32'))), createObject('value', false()), createObject('value', true()))]",
          "enablePublicAccessWithPerimeter": "[if(equals(parameters('AMLStudioUIPrivate'), false()), createObject('value', true()), createObject('value', false()))]",
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "aksVmSku_dev": {
            "value": "[variables('aks_dev_sku_param')]"
          },
          "aksVmSku_testProd": {
            "value": "[variables('aks_test_prod_sku_param')]"
          },
          "aksNodes_dev": {
            "value": "[variables('aks_dev_nodes_param')]"
          },
          "aksNodes_testProd": {
            "value": "[variables('aks_test_prod_nodes_param')]"
          },
          "kubernetesVersionAndOrchestrator": {
            "value": "[variables('aks_version_param')]"
          },
          "amlComputeDefaultVmSize_dev": {
            "value": "[variables('aml_cluster_dev_sku_param')]"
          },
          "amlComputeDefaultVmSize_testProd": {
            "value": "[variables('aml_cluster_test_prod_sku_param')]"
          },
          "amlComputeMaxNodex_dev": {
            "value": "[variables('aml_cluster_dev_nodes_param')]"
          },
          "amlComputeMaxNodex_testProd": {
            "value": "[variables('aml_cluster_test_prod_nodes_param')]"
          },
          "ciVmSku_dev": {
            "value": "[variables('aml_ci_dev_sku_param')]"
          },
          "ciVmSku_testProd": {
            "value": "[variables('aml_ci_test_prod_sku_param')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesAzureML')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAzureML')))]",
          "ipWhitelist_array": "[if(empty(variables('ipWhitelist_remove_ending_32')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_remove_ending_32')))]",
          "saName": {
            "value": "[parameters('storageAccount2001Name')]"
          },
          "kvName": {
            "value": "[parameters('keyvaultName')]"
          },
          "acrName": {
            "value": "[variables('var_acr_cmn_or_prj')]"
          },
          "acrRGName": "[if(parameters('useCommonACR'), createObject('value', parameters('commonResourceGroup')), createObject('value', parameters('targetResourceGroup')))]",
          "appInsightsName": {
            "value": "[parameters('applicationInsightName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6944343267955003006"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new machine learning studio resources"
              }
            },
            "uniqueDepl": {
              "type": "string"
            },
            "uniqueSalt5char": {
              "type": "string"
            },
            "locationSuffix": {
              "type": "string"
            },
            "aifactorySuffix": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "projectNumber": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "aksSubnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet name for aks"
              }
            },
            "aksServiceCidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/16"
            },
            "aksDnsServiceIP": {
              "type": "string",
              "defaultValue": "10.0.0.10"
            },
            "aksDockerBridgeCidr": {
              "type": "string",
              "defaultValue": "172.17.0.1/16"
            },
            "ownSSL": {
              "type": "string",
              "defaultValue": "disabled",
              "metadata": {
                "description": "AKS own SSL on private cluster. MS auto SSL is not possible since private cluster"
              }
            },
            "aksCert": {
              "type": "string",
              "defaultValue": ""
            },
            "aksCname": {
              "type": "string",
              "defaultValue": ""
            },
            "aksCertKey": {
              "type": "string",
              "defaultValue": ""
            },
            "aksSSLOverwriteExistingDomain": {
              "type": "bool",
              "defaultValue": false
            },
            "aksSSLstatus": {
              "type": "string",
              "defaultValue": ""
            },
            "skuName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the skuname of the machine learning studio"
              }
            },
            "skuTier": {
              "type": "string",
              "metadata": {
                "description": "Specifies the sku tier of the machine learning studio"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to machine learning studio resources"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the virtual network id associated with private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "amlPrivateDnsZoneID": {
              "type": "string",
              "metadata": {
                "description": "Resource name ID on DnsZone"
              }
            },
            "notebookPrivateDnsZoneID": {
              "type": "string",
              "metadata": {
                "description": "Resource name ID on DnsZone"
              }
            },
            "kubernetesVersionAndOrchestrator": {
              "type": "string",
              "metadata": {
                "description": "AKS Kubernetes version and AgentPool orchestrator version"
              }
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Azure ML allowPublicAccessWhenBehindVnet"
              }
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "ESML can run in DEMO mode, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can turn this off, to use your HUB instead."
              }
            },
            "amlComputeDefaultVmSize_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default VM size for the default compute cluster: STANDARD_D3"
              }
            },
            "amlComputeDefaultVmSize_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default VM size for the default compute cluster: STANDARD_D4"
              }
            },
            "amlComputeMaxNodex_dev": {
              "type": "int",
              "metadata": {
                "description": "Dev Max nodes: 0-Max"
              }
            },
            "amlComputeMaxNodex_testProd": {
              "type": "int",
              "metadata": {
                "description": "TestProd Max nodes: 0-Max"
              }
            },
            "aksVmSku_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default  VM size for the default AKS cluster:Standard_D12. More: Standard_D3_v2(4,14)"
              }
            },
            "aksVmSku_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default  VM size for the default AKS cluster:Standard_D12(4,28,200GB)"
              }
            },
            "aksNodes_dev": {
              "type": "int",
              "metadata": {
                "description": "Dev Agentpool agents/nodes: 1 as default for Dev"
              }
            },
            "aksNodes_testProd": {
              "type": "int",
              "metadata": {
                "description": "Dev Agentpool agents/nodes: 3 as default for Test or Prod"
              }
            },
            "ciVmSku_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default VM size for the default Compute Instance cluster:Standard_D4_v3(4,16,100)"
              }
            },
            "ciVmSku_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default VM size for the default Compute Instance cluster:Standard_D4_v3. More: Standard_D14 (16 cores,112 ram)"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "saName": {
              "type": "string"
            },
            "kvName": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            },
            "acrRGName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            },
            "ipWhitelist_array": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "subnetRef": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]",
            "aiFactoryNumber": "[substring(parameters('aifactorySuffix'), 1, 3)]",
            "aml_create_ci": false,
            "aksName": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
            "nodeResourceGroupName": "[format('aks-{0}', resourceGroup().name)]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Default",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "imageBuildCompute": "[format('{0}/p{1}-m01{2}-{3}', parameters('name'), parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "friendlyName": "[parameters('name')]",
                "description": "Azure Machine Learning v2, managed networking, not using legacy V1 mode",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false
                },
                "ipAllowlist": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Default",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "imageBuildCompute": "[format('{0}/p{1}-m01{2}-{3}', parameters('name'), parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "friendlyName": "[parameters('name')]",
                "description": "Azure Machine Learning v2, managed networking, not using legacy V1 mode",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false
                },
                "ipAllowlist": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('ownSSL'), 'disabled'), equals(parameters('env'), 'dev'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('aksName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AKS",
                "computeLocation": "[parameters('location')]",
                "description": "[format('Serve model ONLINE inference on AKS powered webservice. Defaults: Dev={0}. TestProd={1}', parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                "resourceId": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value, reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value)]",
                "properties": {
                  "agentCount": "[if(equals(parameters('env'), 'dev'), 1, 3)]",
                  "clusterPurpose": "[if(equals(parameters('env'), 'dev'), 'DevTest', 'FastProd')]",
                  "agentVmSize": "[if(equals(parameters('env'), 'dev'), parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                  "loadBalancerType": "InternalLoadBalancer",
                  "aksNetworkingConfiguration": {
                    "subnetId": "[parameters('aksSubnetId')]",
                    "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]",
                    "serviceCidr": "[parameters('aksServiceCidr')]"
                  },
                  "loadBalancerSubnet": "[parameters('aksSubnetName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(and(equals(parameters('ownSSL'), 'disabled'), equals(parameters('env'), 'test')), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('aksName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AKS",
                "computeLocation": "[parameters('location')]",
                "description": "[format('Serve model ONLINE inference on AKS powered webservice. Defaults: Dev={0}. TestProd={1}', parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                "resourceId": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value, reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value)]",
                "properties": {
                  "agentCount": "[if(equals(parameters('env'), 'dev'), 1, 3)]",
                  "clusterPurpose": "[if(equals(parameters('env'), 'dev'), 'DevTest', 'FastProd')]",
                  "agentVmSize": "[if(equals(parameters('env'), 'dev'), parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                  "loadBalancerType": "InternalLoadBalancer",
                  "aksNetworkingConfiguration": {
                    "subnetId": "[parameters('aksSubnetId')]",
                    "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]",
                    "serviceCidr": "[parameters('aksServiceCidr')]"
                  },
                  "loadBalancerSubnet": "[parameters('aksSubnetName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('p{0}-m01{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('location')]",
                "description": "[format('CPU cluster for batch training models ( or batch scoring with AML pipeline) for {0} in ESML-{1} AI Factory. Defaults: Dev={2}. TestProd={3}', parameters('projectName'), parameters('env'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                "disableLocalAuth": true,
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                  "enableNodePublicIp": false,
                  "isolatedNetwork": false,
                  "osType": "Linux",
                  "remoteLoginPortPublicAccess": "Disabled",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeMaxNodex_dev'), parameters('amlComputeMaxNodex_testProd'))]",
                    "nodeIdleTimeBeforeScaleDown": "PT120S"
                  },
                  "subnet": {
                    "id": "[variables('subnetRef')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('p{0}-m01{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('location')]",
                "description": "[format('CPU cluster for batch training models ( or batch scoring with AML pipeline) for {0} in ESML-{1} AI Factory. Defaults: Dev={2}. TestProd={3}', parameters('projectName'), parameters('env'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                "disableLocalAuth": true,
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                  "enableNodePublicIp": false,
                  "isolatedNetwork": false,
                  "osType": "Linux",
                  "remoteLoginPortPublicAccess": "Disabled",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeMaxNodex_dev'), parameters('amlComputeMaxNodex_testProd'))]",
                    "nodeIdleTimeBeforeScaleDown": "PT120S"
                  },
                  "subnet": {
                    "id": "[variables('subnetRef')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('mlNetworking1{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceArmId": "[if(equals(parameters('env'), 'dev'), createObject('value', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))), createObject('value', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))))]",
                  "subnetId": {
                    "value": "[variables('subnetRef')]"
                  },
                  "machineLearningPleName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "amlPrivateDnsZoneID": {
                    "value": "[parameters('amlPrivateDnsZoneID')]"
                  },
                  "notebookPrivateDnsZoneID": {
                    "value": "[parameters('notebookPrivateDnsZoneID')]"
                  },
                  "centralDnsZoneByPolicyInHub": {
                    "value": "[parameters('centralDnsZoneByPolicyInHub')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15700423160202838962"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "machineLearningPleName": {
                      "type": "string",
                      "metadata": {
                        "description": "Machine learning workspace private link endpoint name"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the subnet resource"
                      }
                    },
                    "workspaceArmId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the machine learning workspace"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "amlPrivateDnsZoneID": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name ID on DnsZone"
                      }
                    },
                    "notebookPrivateDnsZoneID": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name ID on DnsZone"
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "centralDnsZoneByPolicyInHub": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "ESML can run standalone/demo mode, this is deafault mode, meaning default FALSE value, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can change this, to use your HUB DnzZones instead."
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneName": {
                      "azureusgovernment": "privatelink.api.ml.azure.us",
                      "azurechinacloud": "privatelink.api.ml.azure.cn",
                      "azurecloud": "privatelink.api.azureml.ms"
                    },
                    "privateAznbDnsZoneName": {
                      "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
                      "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
                      "azurecloud": "privatelink.notebooks.azure.net"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('machineLearningPleName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('machineLearningPleName')]",
                            "properties": {
                              "groupIds": [
                                "amlworkspace"
                              ],
                              "privateLinkServiceId": "[parameters('workspaceArmId')]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('centralDnsZoneByPolicyInHub'), false())]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}DnsZone', parameters('machineLearningPleName'), parameters('machineLearningPleName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('privateDnsZoneName')[environment().name]]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('amlPrivateDnsZoneID')]"
                            }
                          },
                          {
                            "name": "[variables('privateAznbDnsZoneName')[environment().name]]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('notebookPrivateDnsZoneID')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('machineLearningPleName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AMLAKSDev4{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('aksName')]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kubernetesVersion": {
                    "value": "[parameters('kubernetesVersionAndOrchestrator')]"
                  },
                  "dnsPrefix": {
                    "value": "[format('{0}-dns', variables('aksName'))]"
                  },
                  "enableRbac": {
                    "value": true
                  },
                  "nodeResourceGroup": {
                    "value": "[variables('nodeResourceGroupName')]"
                  },
                  "aksDnsServiceIP": {
                    "value": "[parameters('aksDnsServiceIP')]"
                  },
                  "aksServiceCidr": {
                    "value": "[parameters('aksServiceCidr')]"
                  },
                  "agentPoolProfiles": {
                    "value": [
                      {
                        "name": "[toLower('agentpool')]",
                        "count": "[parameters('aksNodes_dev')]",
                        "vmSize": "[parameters('aksVmSku_dev')]",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "mode": "System",
                        "vnetSubnetID": "[parameters('aksSubnetId')]",
                        "type": "VirtualMachineScaleSets",
                        "maxPods": 30,
                        "orchestratorVersion": "[parameters('kubernetesVersionAndOrchestrator')]",
                        "osDiskSizeGB": 128
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "949985098030188726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the AKS cluster"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Specifies the tags that should be applied to aks resources"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies location were aks resources should be deployed"
                      }
                    },
                    "kubernetesVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies version of kubernetes on the AKS cluster"
                      }
                    },
                    "dnsPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the DNS prefix for the AKS cluster"
                      }
                    },
                    "enableRbac": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if RBAC permission model should be enabled or not"
                      }
                    },
                    "disableLocalAccounts": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if LOCAL accounts in kubernetes permission model should be enabled or not"
                      }
                    },
                    "enableAzureRbac": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if AzureRbac accounts in kubernetes permission model should be enabled or not. 2022-11 needs to be false, since Azure ML"
                      }
                    },
                    "outboundType": {
                      "type": "string",
                      "defaultValue": "loadBalancer",
                      "allowedValues": [
                        "loadBalancer",
                        "userDefinedRouting",
                        "none"
                      ]
                    },
                    "agentPoolProfiles": {
                      "type": "array",
                      "metadata": {
                        "description": "Specifies agent pool profile settings in a array with hashmaps format"
                      }
                    },
                    "nodeResourceGroup": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the resource group that is used for node pool resources"
                      }
                    },
                    "aksServiceCidr": {
                      "type": "string",
                      "defaultValue": "10.0.0.0/16"
                    },
                    "aksDnsServiceIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.10"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Paid"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "kubernetesVersion": "[parameters('kubernetesVersion')]",
                        "dnsPrefix": "[parameters('dnsPrefix')]",
                        "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                        "enableRBAC": "[parameters('enableRbac')]",
                        "agentPoolProfiles": "[parameters('agentPoolProfiles')]",
                        "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                        "networkProfile": {
                          "networkPlugin": "azure",
                          "outboundType": "[parameters('outboundType')]",
                          "serviceCidr": "[parameters('aksServiceCidr')]",
                          "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                          "dockerBridgeCidr": "172.17.0.1/16",
                          "loadBalancerSku": "standard"
                        },
                        "apiServerAccessProfile": {
                          "enablePrivateCluster": true
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "aksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('aksName')]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kubernetesVersion": {
                    "value": "[parameters('kubernetesVersionAndOrchestrator')]"
                  },
                  "dnsPrefix": {
                    "value": "[format('{0}-dns', variables('aksName'))]"
                  },
                  "enableRbac": {
                    "value": true
                  },
                  "nodeResourceGroup": {
                    "value": "[variables('nodeResourceGroupName')]"
                  },
                  "aksDnsServiceIP": {
                    "value": "[parameters('aksDnsServiceIP')]"
                  },
                  "aksServiceCidr": {
                    "value": "[parameters('aksServiceCidr')]"
                  },
                  "agentPoolProfiles": {
                    "value": [
                      {
                        "name": "agentpool",
                        "count": "[parameters('aksNodes_testProd')]",
                        "vmSize": "[parameters('aksVmSku_testProd')]",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "mode": "System",
                        "vnetSubnetID": "[parameters('aksSubnetId')]",
                        "type": "VirtualMachineScaleSets",
                        "maxPods": 30,
                        "orchestratorVersion": "[parameters('kubernetesVersionAndOrchestrator')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "949985098030188726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the AKS cluster"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Specifies the tags that should be applied to aks resources"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies location were aks resources should be deployed"
                      }
                    },
                    "kubernetesVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies version of kubernetes on the AKS cluster"
                      }
                    },
                    "dnsPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the DNS prefix for the AKS cluster"
                      }
                    },
                    "enableRbac": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if RBAC permission model should be enabled or not"
                      }
                    },
                    "disableLocalAccounts": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if LOCAL accounts in kubernetes permission model should be enabled or not"
                      }
                    },
                    "enableAzureRbac": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if AzureRbac accounts in kubernetes permission model should be enabled or not. 2022-11 needs to be false, since Azure ML"
                      }
                    },
                    "outboundType": {
                      "type": "string",
                      "defaultValue": "loadBalancer",
                      "allowedValues": [
                        "loadBalancer",
                        "userDefinedRouting",
                        "none"
                      ]
                    },
                    "agentPoolProfiles": {
                      "type": "array",
                      "metadata": {
                        "description": "Specifies agent pool profile settings in a array with hashmaps format"
                      }
                    },
                    "nodeResourceGroup": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the resource group that is used for node pool resources"
                      }
                    },
                    "aksServiceCidr": {
                      "type": "string",
                      "defaultValue": "10.0.0.0/16"
                    },
                    "aksDnsServiceIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.10"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Paid"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "kubernetesVersion": "[parameters('kubernetesVersion')]",
                        "dnsPrefix": "[parameters('dnsPrefix')]",
                        "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                        "enableRBAC": "[parameters('enableRbac')]",
                        "agentPoolProfiles": "[parameters('agentPoolProfiles')]",
                        "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                        "networkProfile": {
                          "networkPlugin": "azure",
                          "outboundType": "[parameters('outboundType')]",
                          "serviceCidr": "[parameters('aksServiceCidr')]",
                          "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                          "dockerBridgeCidr": "172.17.0.1/16",
                          "loadBalancerSku": "standard"
                        },
                        "apiServerAccessProfile": {
                          "enablePrivateCluster": true
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "aksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "amlId": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')))]"
            },
            "amlName": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), parameters('name'), parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "amlworkspace"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacUsersAmlVersion2{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccount2001Name')]"
          },
          "userObjectIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "azureMLworkspaceName": {
            "value": "[variables('amlName')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "user2Storage": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12124267625136021728"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "azureMLworkspaceName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "user2Storage": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd"
          },
          "resources": [
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027a: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 1: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028a: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Azure Storage 1: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('043 AzureAIDeveloper role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": ""
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignment",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIAdministrator'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 azureAIAdministrator role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "AI Project: azureAIAdministrator:"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignmentSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIAdministrator'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIAdministrator to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 AzureAIInferenceDeploymentOperator role to USER with OID  {0} for {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIInferenceDeploymentOperatorRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMLDataScientistRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('041 AzureMLDataScientist role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: Azure ML Data scientist: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('042 AzureMachineLearningWorkspaceConnectionSecretsReader role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: AzureMachineLearningWorkspaceConnectionSecretsReader: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('AzureMLDepl_{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aifProjectExists')), parameters('serviceSettingEnableAIFoundryPreview'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AIFoundryPrevview4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('aifName')]"
          },
          "projectName": {
            "value": "[variables('aifProjectName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12553744537568059336"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus2"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "properties": {
                "publicNetworkAccess": "[if(parameters('enablePublicAccessWithPerimeter'), 'Enabled', 'Disabled')]",
                "allowProjectManagement": true,
                "customSubDomainName": "[parameters('name')]",
                "disableLocalAuth": true
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('projectName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('name'), 'gpt-4o')]",
              "sku": {
                "capacity": 1,
                "name": "GlobalStandard"
              },
              "properties": {
                "model": {
                  "name": "gpt-4o",
                  "format": "OpenAI"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('name'), parameters('projectName')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', variables('aiHubNameShort'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('aiHubName')]"
          },
          "defaultProjectName": {
            "value": "[variables('aifProjectName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "aifactorySuffix": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "applicationInsightsName": {
            "value": "[parameters('applicationInsightName')]"
          },
          "acrName": {
            "value": "[variables('var_acr_cmn_or_prj')]"
          },
          "acrRGName": "[if(parameters('useCommonACR'), createObject('value', parameters('commonResourceGroup')), createObject('value', parameters('targetResourceGroup')))]",
          "env": {
            "value": "[parameters('env')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyvaultName')]"
          },
          "privateEndpointName": {
            "value": "[format('p-aihub-{0}{1}{2}{3}amlworkspace', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "aifactoryProjectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccount1001Name')]"
          },
          "subnetName": {
            "value": "[parameters('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "allowPublicAccessWhenBehindVnet": {
            "value": "[parameters('allowPublicAccessWhenBehindVnet')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "aiSearchName": {
            "value": "[parameters('aiSearchName')]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          },
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "kindAIHub": {
            "value": "Hub"
          },
          "aiServicesName": {
            "value": "[parameters('aiServicesName')]"
          },
          "logWorkspaceName": {
            "value": "[parameters('laWorkspaceName')]"
          },
          "logWorkspaceResoureGroupName": {
            "value": "[parameters('commonResourceGroup')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt": {
            "value": "[parameters('uniqueInAIFenv')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesAIHub')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAIHub')))]",
          "ipWhitelist_array": "[if(empty(variables('ipWhitelist_remove_ending_32')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_remove_ending_32')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12697721245313197837"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new machine learning studio resources"
              }
            },
            "aifactorySuffix": {
              "type": "string"
            },
            "aifactoryProjectNumber": {
              "type": "string",
              "metadata": {
                "description": "Specifies the computer pool name"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location where the new machine learning studio resource should be deployed"
              }
            },
            "env": {
              "type": "string",
              "metadata": {
                "description": "ESML dev,test or prod. If DEV then AKS cluster is provisioned with 1 agent otherwise 3"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the storageaccount id used for the machine learning studio"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the keyvault id used for the machine learning studio"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to machine learning studio resources"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the virtual network id associated with private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "defaultProjectName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ESML can run in DEMO mode, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can turn this off, to use your HUB instead."
              }
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool"
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "aiSearchName": {
              "type": "string"
            },
            "aifactorySalt": {
              "type": "string"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "kindAIHub": {
              "type": "string",
              "defaultValue": "Hub",
              "allowedValues": [
                "Hub"
              ]
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "aiServicesName": {
              "type": "string"
            },
            "logWorkspaceName": {
              "type": "string"
            },
            "logWorkspaceResoureGroupName": {
              "type": "string"
            },
            "locationSuffix": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "ipWhitelist_array": {
              "type": "array",
              "defaultValue": []
            },
            "acrName": {
              "type": "string"
            },
            "acrRGName": {
              "type": "string"
            }
          },
          "variables": {
            "aiFactoryNumber": "[substring(parameters('aifactorySuffix'), 1, 3)]",
            "privateDnsZoneName": {
              "azureusgovernment": "privatelink.api.ml.azure.us",
              "azurechinacloud": "privatelink.api.ml.azure.cn",
              "azurecloud": "privatelink.api.azureml.ms"
            },
            "privateDnsZoneNameNotebooks": {
              "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
              "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
              "azurecloud": "privatelink.notebooks.azure.net"
            },
            "azureOpenAIConnectionName": "azureOpenAI",
            "azureAIServicesConnectionName": "azureAIServices",
            "azureAISearchConnectionName": "azureAISearch",
            "aiProjectDiagSettingName": "aiProjectDiagnosticSetting",
            "aiHubDiagSettingName": "aiHubDiagnosticSetting",
            "epDefaultName": "[format('ep-{0}-01-{1}-{2}-{3}{4}', parameters('aifactoryProjectNumber'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySalt'), parameters('resourceSuffix'))]",
            "epDefaultName2": "[format('ep-{0}-1-{1}-{2}-{3}{4}', parameters('aifactoryProjectNumber'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySalt'), parameters('resourceSuffix'))]"
          },
          "resources": [
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureOpenAIConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AzureOpenAI",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAIServicesConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AIServices",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), and(not(empty(parameters('aiSearchName'))), equals(parameters('enablePublicAccessWithPerimeter'), true())))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAISearchConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "CognitiveSearch",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchName'))]",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), true()), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/onlineEndpoints",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('defaultProjectName'), variables('epDefaultName2'))]",
              "location": "[parameters('location')]",
              "kind": "Managed",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "This is the default inference endpoint for the AI Factory project, prompt flow deployment. Called by the UI hosted in Web Apps.",
                "authMode": "Key",
                "publicNetworkAccess": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureOpenAIConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AzureOpenAI",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "peStatus": "[if(parameters('enablePublicGenAIAccess'), 'NotApplicable', 'Active')]",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAIServicesConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AIServices",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "peStatus": "[if(parameters('enablePublicGenAIAccess'), 'NotApplicable', 'Active')]",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), and(not(empty(parameters('aiSearchName'))), equals(parameters('enablePublicAccessWithPerimeter'), false())))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAISearchConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "CognitiveSearch",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchName'))]",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/onlineEndpoints",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('defaultProjectName'), variables('epDefaultName'))]",
              "location": "[parameters('location')]",
              "kind": "Managed",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "This is the default inference endpoint for the AI Factory project, prompt flow deployment. Called by the UI hosted in Web Apps.",
                "authMode": "Key",
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePublicAccessWithPerimeter')]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kindAIHub')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "friendlyName": "[format('{0}-{1}-{2}', parameters('name'), parameters('env'), variables('aiFactoryNumber'))]",
                "description": "AI Hub with optional enablePublicAccessWithPerimeter. If using Azure Container Apps for UX and API. Create 2 deployments of your preffered GPT models GPT-4o, called gpt ,gpt-evals",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": "[if(parameters('enablePublicAccessWithPerimeter'), false(), true())]",
                "publicNetworkAccess": "Enabled",
                "allowPublicAccessWhenBehindVnet": "[if(parameters('enablePublicAccessWithPerimeter'), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutbound",
                  "enableNetworkMonitor": false,
                  "outboundRules": "[union(createObject('OpenAI', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'subresourceTarget', 'account', 'sparkEnabled', false(), 'sparkStatus', 'Active'), 'status', 'Active'), 'SaBlob', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'subresourceTarget', 'blob', 'sparkEnabled', true(), 'sparkStatus', 'Active'), 'status', 'Active'), 'SaFile', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'subresourceTarget', 'file', 'sparkEnabled', true(), 'sparkStatus', 'Active'), 'status', 'Active')), if(not(empty(parameters('aiSearchName'))), createObject('search', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'subresourceTarget', 'searchService', 'sparkEnabled', false(), 'sparkStatus', 'Inactive'))), createObject()))]"
                }
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[variables('aiHubDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: Azure AI Foundry hub - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[variables('aiHubDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: Azure AI Foundry hub 2 - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('defaultProjectName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "Project",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('defaultProjectName')]",
                "description": "[format('Project for AI Factory project{0} in {1} environment in {2}', parameters('aifactoryProjectNumber'), parameters('env'), parameters('location'))]",
                "v1LegacyMode": false,
                "hbiWorkspace": false,
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "This is a container for the ai foundry project."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kindAIHub')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "friendlyName": "[format('{0}-{1}-{2}', parameters('name'), parameters('env'), variables('aiFactoryNumber'))]",
                "description": "AI Foundry hub requires an underlying Azure ML workspace. If using Azure Container Apps for UX and API. Create 2 deployments of your preffered GPT models GPT-4o, called gpt ,gpt-evals",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[parameters('allowPublicAccessWhenBehindVnet')]",
                "ipAllowlist": "[if(parameters('allowPublicAccessWhenBehindVnet'), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(parameters('allowPublicAccessWhenBehindVnet'), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false,
                  "outboundRules": "[union(if(not(empty(parameters('aiSearchName'))), createObject('search', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'subresourceTarget', 'searchService', 'sparkEnabled', false(), 'sparkStatus', 'Inactive'))), createObject()), createObject('OpenAI', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'subresourceTarget', 'account', 'sparkEnabled', false(), 'sparkStatus', 'Active'), 'status', 'Active')))]"
                }
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('defaultProjectName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "Project",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('defaultProjectName')]",
                "description": "[format('Project for AI Factory project{0} in {1} environment in {2}', parameters('aifactoryProjectNumber'), parameters('env'), parameters('location'))]",
                "v1LegacyMode": false,
                "hbiWorkspace": false,
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]",
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "This is a container for the ai foundry project."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to interact with the secrets of the parent project. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to invoke models in Azure OpenAI. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[variables('aiProjectDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}/onlineEndpoints/{1}', parameters('defaultProjectName'), variables('epDefaultName'))]",
              "name": "chatProjectOnlineEndpointDiagSettingsDefault",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project online endpoint - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'aifactory-proj-ep-default-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview').primaryKey]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Key Vault Secret: The Managed Online Endpoint key to be referenced from the Chat UI app."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('pend-nic-aihub-{0}', parameters('name'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "groupIds": [
                        "amlworkspace"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}DnsZone', parameters('privateEndpointName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[variables('privateDnsZoneName')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').amlworkspace.id]"
                    }
                  },
                  {
                    "name": "[variables('privateDnsZoneNameNotebooks')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').notebooks.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to interact with the secrets of the parent project. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to invoke models in Azure OpenAI. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[variables('aiProjectDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}/onlineEndpoints/{1}', parameters('defaultProjectName'), variables('epDefaultName2'))]",
              "name": "chatProjectOnlineEndpointDiagSettingsDefault2",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project online endpoint - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'aifactory-proj-ep-default2-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview').primaryKey]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Key Vault Secret: The Managed Online Endpoint key to be referenced from the Chat UI app."
              }
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('pend-nic-aihub-{0}', parameters('name'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "groupIds": [
                        "amlworkspace"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(and(not(parameters('centralDnsZoneByPolicyInHub')), parameters('enablePublicAccessWithPerimeter')), parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}DnsZone', parameters('privateEndpointName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[variables('privateDnsZoneName')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').amlworkspace.id]"
                    }
                  },
                  {
                    "name": "[variables('privateDnsZoneNameNotebooks')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').notebooks.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), parameters('name'), parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), parameters('defaultProjectName'), parameters('defaultProjectName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('useCommonACR'), false()), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacAcrProject{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": {
            "value": "[parameters('acrName')]"
          },
          "aiHubName": {
            "value": "[variables('aiHubName')]"
          },
          "aiHubRgName": {
            "value": "[parameters('targetResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1851622493075134410"
            }
          },
          "parameters": {
            "aiHubName": {
              "type": "string"
            },
            "aiHubRgName": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('aiHubName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec'), parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('aiHubRgName')), 'Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "metadata": {
                "description": "Assign AML Workspace's ID: AcrPush to workload's container registry."
              }
            },
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('aiHubName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'), parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('aiHubRgName')), 'Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "metadata": {
                "description": "Assign AML Workspace's Managed Online Endpoint: AcrPull to workload's container registry."
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('{0}{1}', variables('aiHubNameShort'), variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacDBX2AMLGenAI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlName": {
            "value": "[variables('amlName')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[parameters('spAndMiArray')]"
          },
          "adfSP": {
            "value": "placeholder-principal-id"
          },
          "projectADuser": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalUserIds": {
            "value": "[parameters('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12414950222453870612"
            }
          },
          "parameters": {
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "adfSP": {
              "type": "string",
              "metadata": {
                "description": "Specifies the objectId of the Data factory managed identity"
              }
            },
            "projectADuser": {
              "type": "string",
              "metadata": {
                "description": "Specifies the objectId of the technical contact"
              }
            },
            "amlName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the azure machine learning resource"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "additionalUserIds": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "contributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor to service principal {0} for Azure ML {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('amlName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('adfSP')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('adfSP'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('adfSP')]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor to Azure datafactory {0} to run Azure ML pipelines {1}', parameters('adfSP'), parameters('amlName'))]"
              },
              "dependsOn": [
                "contributorSP"
              ]
            },
            {
              "copy": {
                "name": "contributorUserOrGroup",
                "count": "[length(range(0, length(parameters('additionalUserIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER or GROUP with OID  {0} for Azure ML {1}', parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]], parameters('amlName'))]"
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')), 'Microsoft.Authorization/roleAssignments', guid(parameters('adfSP'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName'))))]",
                "contributorSP"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('AzureMLDepl_{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "azureMLDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Azure ML Workspace deployment status"
      },
      "value": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]"
    },
    "aiFoundryHubDeployed": {
      "type": "bool",
      "metadata": {
        "description": "AI Foundry Hub deployment status"
      },
      "value": "[and(not(parameters('aiHubExists')), parameters('enableAIFoundryHub'))]"
    },
    "aiFoundryPreviewDeployed": {
      "type": "bool",
      "metadata": {
        "description": "AI Foundry Preview deployment status"
      },
      "value": "[and(not(parameters('aifProjectExists')), parameters('serviceSettingEnableAIFoundryPreview'))]"
    },
    "acrRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Project-specific ACR RBAC deployment status"
      },
      "value": "[and(equals(parameters('useCommonACR'), false()), parameters('enableAIFoundryHub'))]"
    },
    "mlPlatformRbacDeployed": {
      "type": "bool",
      "metadata": {
        "description": "ML Platform RBAC deployment status"
      },
      "value": "[and(not(parameters('amlExists')), parameters('enableAzureMachineLearning'))]"
    }
  }
}