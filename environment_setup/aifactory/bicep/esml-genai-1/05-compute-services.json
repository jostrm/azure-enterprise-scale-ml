{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "11881294733734483061"
    }
  },
  "parameters": {
    "functionSKU": {
      "type": "object",
      "defaultValue": {
        "name": "EP1",
        "tier": "ElasticPremium",
        "size": "EP1",
        "family": "EP",
        "capacity": 1
      }
    },
    "webappSKU": {
      "type": "object",
      "defaultValue": {
        "name": "P1v3",
        "tier": "PremiumV3",
        "size": "P1v3",
        "family": "Pv3",
        "capacity": 1
      }
    },
    "webappSKUAce": {
      "type": "object",
      "defaultValue": {
        "name": "I1v2",
        "tier": "IsolatedV2",
        "size": "I1v2",
        "family": "Iv2",
        "capacity": 1
      }
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant ID"
      }
    },
    "containerAppsEnvExists": {
      "type": "bool",
      "defaultValue": false
    },
    "containerAppAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "containerAppWExists": {
      "type": "bool",
      "defaultValue": false
    },
    "functionAppExists": {
      "type": "bool",
      "defaultValue": false
    },
    "webAppExists": {
      "type": "bool",
      "defaultValue": false
    },
    "funcAppServicePlanExists": {
      "type": "bool",
      "defaultValue": false
    },
    "webAppServicePlanExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miACAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "serviceSettingDeployContainerApps": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Container Apps deployment"
      }
    },
    "serviceSettingDeployFunction": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Function deployment"
      }
    },
    "serviceSettingDeployWebApp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Web App deployment"
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "vnetNameFull": {
      "type": "string"
    },
    "vnetResourceGroupName": {
      "type": "string"
    },
    "genaiSubnetId": {
      "type": "string"
    },
    "aksSubnetId": {
      "type": "string"
    },
    "acaSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "targetResourceGroup": {
      "type": "string"
    },
    "commonResourceGroup": {
      "type": "string"
    },
    "functionAlwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "functionRuntime": {
      "type": "string",
      "defaultValue": "python"
    },
    "functionVersion": {
      "type": "string",
      "defaultValue": "3.11"
    },
    "webappAlwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "webAppRuntime": {
      "type": "string",
      "defaultValue": "python"
    },
    "webAppRuntimeVersion": {
      "type": "string",
      "defaultValue": "3.11"
    },
    "byoASEv3": {
      "type": "bool",
      "defaultValue": false
    },
    "byoAseFullResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "byoAseAppServicePlanResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "wlMinCountServerless": {
      "type": "int",
      "defaultValue": 0
    },
    "wlMinCountDedicated": {
      "type": "int",
      "defaultValue": 1
    },
    "wlMaxCount": {
      "type": "int",
      "defaultValue": 100
    },
    "wlProfileDedicatedName": {
      "type": "string",
      "defaultValue": "Dedicated"
    },
    "wlProfileGPUConsumptionName": {
      "type": "string",
      "defaultValue": "gpu-consumption"
    },
    "acaAppWorkloadProfileName": {
      "type": "string",
      "defaultValue": "consumption"
    },
    "containerCpuCoreCount": {
      "type": "int",
      "defaultValue": 1
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "1.0Gi"
    },
    "aca_a_registry_image": {
      "type": "string",
      "defaultValue": ""
    },
    "aca_w_registry_image": {
      "type": "string",
      "defaultValue": ""
    },
    "aca_default_image": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
    },
    "imageRegistryTypeA": {
      "type": "string",
      "defaultValue": "ms"
    },
    "imageRegistryTypeW": {
      "type": "string",
      "defaultValue": "ms"
    },
    "acaCustomDomainsArray": {
      "type": "array",
      "defaultValue": []
    },
    "appRedundancyMode": {
      "type": "string",
      "defaultValue": "None"
    },
    "openAiApiVersion": {
      "type": "string",
      "defaultValue": "2024-06-01"
    },
    "projecttags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "aifactorySalt10char": {
      "type": "string",
      "defaultValue": ""
    },
    "randomValue": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsObjectID": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsEmail": {
      "type": "string",
      "defaultValue": ""
    },
    "commonResourceGroupName": {
      "type": "string"
    },
    "subscriptionIdDevTestProd": {
      "type": "string"
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true
    },
    "laWorkspaceName": {
      "type": "string"
    },
    "keyvaultName": {
      "type": "string"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "ipSecurityRestrictions",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "name": "[replace(replace(variables('ipWhitelist_array')[copyIndex('ipSecurityRestrictions')], ',', ''), '/', '_')]",
          "ipAddressRange": "[variables('ipWhitelist_array')[copyIndex('ipSecurityRestrictions')]]",
          "action": "Allow"
        }
      }
    ],
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "cmnName": "cmn",
    "genaiName": "genai",
    "randomSalt": "[substring(uniqueString(subscription().subscriptionId, parameters('targetResourceGroup')), 0, 5)]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', variables('projectName'), parameters('env'), variables('randomSalt'))]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "subnet_genai_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.genaiSubnetName.value)]"
    },
    "subnet_aks_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aksSubnetName.value)]"
    },
    "subnet_aca_ref": {
      "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetNameFull'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acaSubnetName.value)]"
    },
    "var_webAppPrincipalId": "[if(parameters('serviceSettingDeployWebApp'), 'webapp-principal-computed-at-runtime', '')]",
    "var_functionPrincipalId": "[if(parameters('serviceSettingDeployFunction'), 'function-principal-computed-at-runtime', '')]",
    "var_containerAppApiDomain": "[if(parameters('serviceSettingDeployContainerApps'), 'computed-at-runtime.azurecontainerapps.io', 'placeholder-domain')]",
    "allowedOrigins": [
      "https://portal.azure.com",
      "https://ms.portal.azure.com",
      "https://mlworkspace.azure.ai",
      "https://ml.azure.com",
      "https://ai.azure.com",
      "https://mlworkspacecanary.azure.ai",
      "https://mlworkspace.azureml-test.net",
      "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
      "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('targetResourceGroup')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceSuffix": {
            "value": "[parameters('commonResourceSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt10char": {
            "value": "[parameters('aifactorySalt10char')]"
          },
          "randomValue": {
            "value": "[parameters('randomValue')]"
          },
          "aifactorySuffixRG": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "commonRGNamePrefix": {
            "value": "[parameters('commonRGNamePrefix')]"
          },
          "technicalAdminsObjectID": {
            "value": "[parameters('technicalAdminsObjectID')]"
          },
          "technicalAdminsEmail": {
            "value": "[parameters('technicalAdminsEmail')]"
          },
          "commonResourceGroupName": {
            "value": "[parameters('commonResourceGroupName')]"
          },
          "subscriptionIdDevTestProd": {
            "value": "[parameters('subscriptionIdDevTestProd')]"
          },
          "genaiSubnetId": {
            "value": "[parameters('genaiSubnetId')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "acaSubnetId": {
            "value": "[parameters('acaSubnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11269673137520673052"
            }
          },
          "parameters": {
            "env": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "prod"
              ],
              "metadata": {
                "description": "Environment: dev, test, prod"
              }
            },
            "projectNumber": {
              "type": "string",
              "metadata": {
                "description": "Project number (e.g., \"005\")"
              }
            },
            "locationSuffix": {
              "type": "string",
              "metadata": {
                "description": "Location suffix (e.g., \"weu\", \"swc\")"
              }
            },
            "commonResourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Common resource suffix (e.g., \"-001\")"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Project-specific resource suffix"
              }
            },
            "aifactorySalt10char": {
              "type": "string",
              "metadata": {
                "description": "Random salt for unique naming"
              }
            },
            "randomValue": {
              "type": "string"
            },
            "aifactorySuffixRG": {
              "type": "string",
              "metadata": {
                "description": "AI Factory suffix for resource groups"
              }
            },
            "commonRGNamePrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Common resource group name prefix"
              }
            },
            "technicalAdminsObjectID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins OID list"
              }
            },
            "technicalAdminsEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins EMAIL list"
              }
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "subscriptionIdDevTestProd": {
              "type": "string"
            },
            "genaiSubnetId": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "acaSubnetId": {
              "type": "string"
            }
          },
          "variables": {
            "projectName": "[format('prj{0}', parameters('projectNumber'))]",
            "cmnName": "cmn",
            "genaiName": "genai",
            "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
            "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
            "technicalAdminsObjectID_array": "[array(split(replace(parameters('technicalAdminsObjectID'), '\\s+', ''), ','))]",
            "p011_genai_team_lead_array": "[if(empty(parameters('technicalAdminsObjectID')), createArray(), union(variables('technicalAdminsObjectID_array'), createArray()))]",
            "technicalAdminsEmail_array": "[array(split(parameters('technicalAdminsEmail'), ','))]",
            "p011_genai_team_lead_email_array": "[if(empty(parameters('technicalAdminsEmail')), createArray(), variables('technicalAdminsEmail_array'))]",
            "randomSalt": "[if(or(empty(parameters('aifactorySalt10char')), lessOrEquals(length(parameters('aifactorySalt10char')), 5)), substring(parameters('randomValue'), 6, 10), parameters('aifactorySalt10char'))]",
            "uniqueInAIFenv": "[substring(uniqueString(subscriptionResourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('commonResourceGroupName'))), 0, 5)]",
            "aiHubName": "[format('ai-hub-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifProjectName": "[format('ai-prj{0}-01-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "safeNameAISearch": "[replace(toLower(format('aisearch{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))), '-', '')]",
            "aiServicesName": "[replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', '')]",
            "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifName": "[format('aifoundry-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifPrjName": "[format('aifoundry-{0}-01-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('twoNumbers'))]",
            "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
            "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
            "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "aiProjectName": "[format('ai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "segments": "[split(parameters('genaiSubnetId'), '/')]",
            "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
            "defaultSubnet": "[variables('genaiSubnetName')]",
            "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
            "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
            "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
            "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]"
          },
          "resources": [],
          "outputs": {
            "genaiSubnetName": {
              "type": "string",
              "value": "[variables('genaiSubnetName')]"
            },
            "aksSubnetName": {
              "type": "string",
              "value": "[variables('aksSubnetName')]"
            },
            "acaSubnetName": {
              "type": "string",
              "value": "[variables('acaSubnetName')]"
            },
            "defaultSubnet": {
              "type": "string",
              "value": "[variables('defaultSubnet')]"
            },
            "aiHubName": {
              "type": "string",
              "value": "[variables('aiHubName')]"
            },
            "aifProjectName": {
              "type": "string",
              "value": "[variables('aifProjectName')]"
            },
            "aoaiName": {
              "type": "string",
              "value": "[variables('aoaiName')]"
            },
            "amlName": {
              "type": "string",
              "value": "[variables('amlName')]"
            },
            "safeNameAISearch": {
              "type": "string",
              "value": "[variables('safeNameAISearch')]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "dashboardInsightsName": {
              "type": "string",
              "value": "[variables('dashboardInsightsName')]"
            },
            "applicationInsightName": {
              "type": "string",
              "value": "[variables('applicationInsightName')]"
            },
            "bingName": {
              "type": "string",
              "value": "[variables('bingName')]"
            },
            "containerAppsEnvName": {
              "type": "string",
              "value": "[variables('containerAppsEnvName')]"
            },
            "containerAppAName": {
              "type": "string",
              "value": "[variables('containerAppAName')]"
            },
            "containerAppWName": {
              "type": "string",
              "value": "[variables('containerAppWName')]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[variables('cosmosDBName')]"
            },
            "redisName": {
              "type": "string",
              "value": "[variables('redisName')]"
            },
            "postgreSQLName": {
              "type": "string",
              "value": "[variables('postgreSQLName')]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[variables('sqlServerName')]"
            },
            "sqlDBName": {
              "type": "string",
              "value": "[variables('sqlDBName')]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[variables('functionAppName')]"
            },
            "webAppName": {
              "type": "string",
              "value": "[variables('webAppName')]"
            },
            "funcAppServicePlanName": {
              "type": "string",
              "value": "[variables('funcAppServicePlanName')]"
            },
            "webbAppServicePlanName": {
              "type": "string",
              "value": "[variables('webbAppServicePlanName')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmName')]"
            },
            "aifName": {
              "type": "string",
              "value": "[variables('aifName')]"
            },
            "aifPrjName": {
              "type": "string",
              "value": "[variables('aifPrjName')]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "storageAccount1001Name": {
              "type": "string",
              "value": "[variables('storageAccount1001Name')]"
            },
            "storageAccount2001Name": {
              "type": "string",
              "value": "[variables('storageAccount2001Name')]"
            },
            "acrProjectName": {
              "type": "string",
              "value": "[variables('acrProjectName')]"
            },
            "acrCommonName": {
              "type": "string",
              "value": "[variables('acrCommonName')]"
            },
            "miACAName": {
              "type": "string",
              "value": "[variables('miACAName')]"
            },
            "miPrjName": {
              "type": "string",
              "value": "[variables('miPrjName')]"
            },
            "laWorkspaceName": {
              "type": "string",
              "value": "[variables('laWorkspaceName')]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[variables('aiProjectName')]"
            },
            "projectName": {
              "type": "string",
              "value": "[variables('projectName')]"
            },
            "cmnName": {
              "type": "string",
              "value": "[variables('cmnName')]"
            },
            "genaiName": {
              "type": "string",
              "value": "[variables('genaiName')]"
            },
            "prjResourceSuffixNoDash": {
              "type": "string",
              "value": "[variables('prjResourceSuffixNoDash')]"
            },
            "twoNumbers": {
              "type": "string",
              "value": "[variables('twoNumbers')]"
            },
            "p011_genai_team_lead_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_array')]"
            },
            "p011_genai_team_lead_email_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_email_array')]"
            },
            "uniqueInAIFenv": {
              "type": "string",
              "value": "[variables('uniqueInAIFenv')]"
            },
            "randomSalt": {
              "type": "string",
              "value": "[variables('randomSalt')]"
            }
          }
        }
      }
    },
    {
      "condition": "[not(parameters('miACAExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10728264960472795345"
            },
            "description": "Creates a user assigned MI, needed to be created before ACA, and needs to be assigned ACR Pull permissions to access an Azure Container Registry, before ACA"
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "cognitiveServicesUserRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), variables('cognitiveServicesUserRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('cognitiveServicesUserRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').clientId]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('miACAExists')), parameters('useCommonACR'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miRbacCmn-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrCommonName.value]"
          },
          "principalId": "[if(parameters('miACAExists'), createObject('value', 'existing-mi-principal-id'), createObject('value', format('{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value)))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17212244635106074430"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('miACAExists')), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miRbacProj-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrProjectName.value]"
          },
          "principalId": "[if(parameters('miACAExists'), createObject('value', 'existing-mi-principal-id'), createObject('value', format('{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value)))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17212244635106074430"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('functionAppExists')), not(parameters('webAppExists'))), or(parameters('serviceSettingDeployWebApp'), parameters('serviceSettingDeployFunction'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('subnetDelegationServerFarm1{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "resourceGroup": "[parameters('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aksSubnetName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "delegations": {
            "value": [
              {
                "name": "webapp-delegation",
                "properties": {
                  "serviceName": "Microsoft.Web/serverFarms"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17392790951735419702"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "existingAddressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "serviceEndpoints": {
              "type": "array",
              "defaultValue": []
            },
            "delegations": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[if(not(empty(parameters('addressPrefix'))), parameters('addressPrefix'), if(not(empty(parameters('existingAddressPrefix'))), parameters('existingAddressPrefix'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.addressPrefix.value))]",
                "serviceEndpoints": "[if(not(empty(parameters('serviceEndpoints'))), parameters('serviceEndpoints'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.serviceEndpoints.value)]",
                "routeTable": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value), null())]",
                "networkSecurityGroup": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value), null())]",
                "natGateway": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value), null())]",
                "delegations": "[parameters('delegations')]",
                "privateEndpointNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')]",
                "privateLinkServiceNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')]"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-snet-props-{0}', uniqueString(deployment().name))]",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17165401858716077681"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').addressPrefix]"
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').serviceEndpoints, createArray())]"
                    },
                    "delegations": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').delegations, createArray())]"
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').networkSecurityGroup.id, '')]"
                    },
                    "routeTableId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'routeTable'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').routeTable.id, '')]"
                    },
                    "natGatewayId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'natGateway'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').natGateway.id, '')]"
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateEndpointNetworkPolicies, '')]"
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateLinkServiceNetworkPolicies, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            },
            "subnetName": {
              "type": "string",
              "value": "[parameters('subnetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('containerAppsEnvExists')), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('subnetDelegationAcaEnv{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "resourceGroup": "[parameters('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acaSubnetName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "delegations": {
            "value": [
              {
                "name": "aca-delegation",
                "properties": {
                  "serviceName": "Microsoft.App/environments"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17392790951735419702"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "existingAddressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "serviceEndpoints": {
              "type": "array",
              "defaultValue": []
            },
            "delegations": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[if(not(empty(parameters('addressPrefix'))), parameters('addressPrefix'), if(not(empty(parameters('existingAddressPrefix'))), parameters('existingAddressPrefix'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.addressPrefix.value))]",
                "serviceEndpoints": "[if(not(empty(parameters('serviceEndpoints'))), parameters('serviceEndpoints'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.serviceEndpoints.value)]",
                "routeTable": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value), null())]",
                "networkSecurityGroup": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value), null())]",
                "natGateway": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value), null())]",
                "delegations": "[parameters('delegations')]",
                "privateEndpointNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')]",
                "privateLinkServiceNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')]"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-snet-props-{0}', uniqueString(deployment().name))]",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17165401858716077681"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').addressPrefix]"
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').serviceEndpoints, createArray())]"
                    },
                    "delegations": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').delegations, createArray())]"
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').networkSecurityGroup.id, '')]"
                    },
                    "routeTableId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'routeTable'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').routeTable.id, '')]"
                    },
                    "natGatewayId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'natGateway'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').natGateway.id, '')]"
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateEndpointNetworkPolicies, '')]"
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateLinkServiceNetworkPolicies, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            },
            "subnetName": {
              "type": "string",
              "value": "[parameters('subnetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('webAppExists')), parameters('serviceSettingDeployWebApp'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('WebApp4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.webAppName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "sku": "[if(parameters('byoASEv3'), createObject('value', parameters('webappSKUAce')), createObject('value', parameters('webappSKU')))]",
          "alwaysOn": {
            "value": "[parameters('webappAlwaysOn')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "subnetIntegrationName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aksSubnetName.value]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[parameters('commonResourceGroup')]"
          },
          "runtime": {
            "value": "[parameters('webAppRuntime')]"
          },
          "redundancyMode": {
            "value": "[parameters('appRedundancyMode')]"
          },
          "byoASEv3": {
            "value": "[parameters('byoASEv3')]"
          },
          "byoAseFullResourceId": {
            "value": "[parameters('byoAseFullResourceId')]"
          },
          "byoAseAppServicePlanRID": {
            "value": "[parameters('byoAseAppServicePlanResourceId')]"
          },
          "runtimeVersion": {
            "value": "[parameters('webAppRuntimeVersion')]"
          },
          "ipRules": {
            "value": "[variables('ipWhitelist_array')]"
          },
          "appSettings": {
            "value": [
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[format('https://{0}.openai.azure.com/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aoaiName.value)]"
              },
              {
                "name": "AZURE_AISERVICES_ENDPOINT",
                "value": "[format('https://{0}.cognitiveservices.azure.com/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value)]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value)]"
              },
              {
                "name": "WEBSITE_VNET_ROUTE_ALL",
                "value": "1"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11451709101962211358"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "appServicePlanName": {
              "type": "string",
              "defaultValue": ""
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
              }
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": [
                "https://mlworkspace.azure.ai",
                "https://ml.azure.com",
                "https://*.ml.azure.com",
                "https://ai.azure.com",
                "https://*.ai.azure.com",
                "https://mlworkspacecanary.azure.ai",
                "https://mlworkspace.azureml-test.net",
                "https://42.swedencentral.instances.azureml.ms",
                "https://*.instances.azureml.ms",
                "https://*.azureml.ms"
              ]
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string"
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java"
              ]
            },
            "runtimeVersion": {
              "type": "string",
              "defaultValue": "3.11",
              "allowedValues": [
                "3.7",
                "3.8",
                "3.9",
                "3.10",
                "3.11",
                "3.12",
                "18-lts",
                "20-lts",
                "8",
                "11",
                "17",
                "21",
                "v4.8",
                "v6.0",
                "v7.0",
                "v8.0"
              ]
            },
            "subnetIntegrationName": {
              "type": "string"
            },
            "hostNameSslStatesIn": {
              "type": "array",
              "defaultValue": []
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "byoASEv3": {
              "type": "bool",
              "defaultValue": false
            },
            "byoAseFullResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "byoAseAppServicePlanRID": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedIpRules",
                "count": "[length(parameters('ipRules'))]",
                "input": {
                  "ipAddress": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'ipAddress'), parameters('ipRules')[copyIndex('formattedIpRules')].ipAddress, if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], '/'), parameters('ipRules')[copyIndex('formattedIpRules')], format('{0}/32', parameters('ipRules')[copyIndex('formattedIpRules')])))]",
                  "action": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'action'), parameters('ipRules')[copyIndex('formattedIpRules')].action, 'Allow')]",
                  "priority": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'priority'), parameters('ipRules')[copyIndex('formattedIpRules')].priority, add(100, copyIndex('formattedIpRules')))]",
                  "name": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'name'), parameters('ipRules')[copyIndex('formattedIpRules')].name, format('Rule-{0}', copyIndex('formattedIpRules')))]",
                  "description": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'description'), parameters('ipRules')[copyIndex('formattedIpRules')].description, 'Allow access from IP')]"
                }
              }
            ],
            "servicePlanName": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('{0}-plan', parameters('name')))]",
            "byoACE3Intenal": "[not(empty(parameters('byoAseFullResourceId')))]",
            "aseName": "[last(split(parameters('byoAseFullResourceId'), '/'))]",
            "hostNameSslStatesDefault": "[if(not(empty(parameters('hostNameSslStatesIn'))), parameters('hostNameSslStatesIn'), createArray(createObject('name', format('{0}.azurewebsites.net', parameters('name')), 'hostType', 'Standard', 'sslState', 'Disabled')))]",
            "hostNameSslStates": "[if(parameters('byoASEv3'), createArray(createObject('name', format('{0}.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Standard'), createObject('name', format('{0}.scm.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Repository')), variables('hostNameSslStatesDefault'))]",
            "denyAllRule": {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny-All",
              "description": "Deny all access by default"
            },
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "condition": "[empty(parameters('byoAseAppServicePlanRID'))]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-11-01",
              "name": "[variables('servicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'linux', 'windows')]",
              "properties": {
                "reserved": "[or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python'))]",
                "hostingEnvironmentProfile": "[if(and(parameters('byoASEv3'), not(empty(parameters('byoAseFullResourceId')))), createObject('id', parameters('byoAseFullResourceId')), null())]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'app,linux', 'app')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[if(and(not(empty(parameters('byoAseAppServicePlanRID'))), parameters('byoASEv3')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('byoAseAppServicePlanRID'), '/')[2], split(parameters('byoAseAppServicePlanRID'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('byoAseAppServicePlanRID'), '/'))), resourceId('Microsoft.Web/serverfarms', variables('servicePlanName')))]",
                "httpsOnly": true,
                "hostingEnvironmentProfile": "[if(and(not(empty(parameters('byoAseFullResourceId'))), parameters('byoASEv3')), createObject('id', parameters('byoAseFullResourceId')), null())]",
                "virtualNetworkSubnetId": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[1]))]",
                "publicNetworkAccess": "[if(parameters('byoASEv3'), 'Disabled', if(or(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), 'Enabled', 'Disabled'))]",
                "siteConfig": {
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "cors": {
                    "allowedOrigins": "[parameters('allowedOrigins')]"
                  },
                  "ipSecurityRestrictions": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), createArray(), concat(variables('formattedIpRules'), createArray(variables('denyAllRule'))))]",
                  "linuxFxVersion": "[if(equals(parameters('runtime'), 'python'), format('PYTHON|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'node'), format('NODE|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'java'), format('JAVA|{0}', parameters('runtimeVersion')), '')))]",
                  "netFrameworkVersion": "[if(equals(parameters('runtime'), 'dotnet'), parameters('runtimeVersion'), null())]",
                  "appSettings": "[concat(parameters('appSettings'), if(not(empty(parameters('applicationInsightsName'))), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', if(not(empty(parameters('applicationInsightsName'))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, '')), createObject('name', 'ApplicationInsightsAgent_EXTENSION_VERSION', 'value', '~2')), createArray()))]"
                },
                "hostNameSslStates": "[variables('hostNameSslStates')]",
                "redundancyMode": "[parameters('redundancyMode')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('p-{0}-webapp', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[1])]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('p-{0}-webapp', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                      "groupIds": [
                        "sites"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "webAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), format('p-{0}-webapp', parameters('name')), '')]",
                  "type": "azurewebapps",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), resourceId('Microsoft.Web/sites', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('subnetDelegationServerFarm1{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(and(not(parameters('webAppExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployWebApp')), not(parameters('enablePublicAccessWithPerimeter'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkWebApp{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.webAppName.value]",
                "type": "Microsoft.Web/sites",
                "groupIds": [
                  "sites"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Web/sites/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.webAppName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('WebApp4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('webAppExists')), parameters('serviceSettingDeployWebApp'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForWebApp{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "webAppPrincipalId": {
            "value": "[variables('var_webAppPrincipalId')]"
          },
          "openAIName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aoaiName.value]"
          },
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7685492578315064902"
            }
          },
          "parameters": {
            "webAppPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "openAIName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('webAppPrincipalId'), 'storageBlobDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), parameters('webAppPrincipalId'), 'storageBlobDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('openAIName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), parameters('webAppPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiServicesName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('webAppPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('webAppPrincipalId'), 'searchIndexDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('webAppPrincipalId'), 'searchServiceContributor')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('WebApp4{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('functionAppExists')), parameters('serviceSettingDeployFunction'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Function4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.functionAppName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "sku": "[if(parameters('byoASEv3'), createObject('value', parameters('webappSKUAce')), createObject('value', parameters('functionSKU')))]",
          "alwaysOn": {
            "value": "[parameters('functionAlwaysOn')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "subnetIntegrationName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aksSubnetName.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[parameters('commonResourceGroup')]"
          },
          "redundancyMode": {
            "value": "[parameters('appRedundancyMode')]"
          },
          "byoASEv3": {
            "value": "[parameters('byoASEv3')]"
          },
          "byoAseFullResourceId": {
            "value": "[parameters('byoAseFullResourceId')]"
          },
          "byoAseAppServicePlanRID": {
            "value": "[parameters('byoAseAppServicePlanResourceId')]"
          },
          "ipRules": {
            "value": "[variables('ipWhitelist_array')]"
          },
          "appSettings": {
            "value": [
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[format('https://{0}.openai.azure.com/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aoaiName.value)]"
              },
              {
                "name": "AZURE_AISERVICES_ENDPOINT",
                "value": "[format('https://{0}.cognitiveservices.azure.com/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value)]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value)]"
              }
            ]
          },
          "runtime": {
            "value": "[parameters('functionRuntime')]"
          },
          "runtimeVersion": {
            "value": "[parameters('functionVersion')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15097669480221924559"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "appServicePlanName": {
              "type": "string",
              "defaultValue": ""
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "EP1",
                "tier": "ElasticPremium",
                "family": "EP",
                "capacity": 1
              }
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": [
                "https://mlworkspace.azure.ai",
                "https://ml.azure.com",
                "https://*.ml.azure.com",
                "https://ai.azure.com",
                "https://*.ai.azure.com",
                "https://mlworkspacecanary.azure.ai",
                "https://mlworkspace.azureml-test.net",
                "https://42.swedencentral.instances.azureml.ms",
                "https://*.instances.azureml.ms",
                "https://*.azureml.ms"
              ]
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "defaultValue": ""
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string",
              "defaultValue": ""
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java"
              ]
            },
            "runtimeVersion": {
              "type": "string",
              "defaultValue": "3.11",
              "allowedValues": [
                "3.7",
                "3.8",
                "3.9",
                "3.10",
                "3.11",
                "3.12",
                "18-lts",
                "20-lts",
                "8",
                "11",
                "17",
                "21",
                "v4.8",
                "v6.0",
                "v7.0",
                "v8.0"
              ]
            },
            "subnetIntegrationName": {
              "type": "string"
            },
            "hostNameSslStatesIn": {
              "type": "array",
              "defaultValue": []
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "byoASEv3": {
              "type": "bool",
              "defaultValue": false
            },
            "byoAseFullResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "byoAseAppServicePlanRID": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedIpRules",
                "count": "[length(parameters('ipRules'))]",
                "input": {
                  "ipAddress": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'ipAddress'), parameters('ipRules')[copyIndex('formattedIpRules')].ipAddress, if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], '/'), parameters('ipRules')[copyIndex('formattedIpRules')], format('{0}/32', parameters('ipRules')[copyIndex('formattedIpRules')])))]",
                  "action": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'action'), parameters('ipRules')[copyIndex('formattedIpRules')].action, 'Allow')]",
                  "priority": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'priority'), parameters('ipRules')[copyIndex('formattedIpRules')].priority, add(100, copyIndex('formattedIpRules')))]",
                  "name": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'name'), parameters('ipRules')[copyIndex('formattedIpRules')].name, format('Rule-{0}', copyIndex('formattedIpRules')))]",
                  "description": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'description'), parameters('ipRules')[copyIndex('formattedIpRules')].description, 'Allow access from IP')]"
                }
              }
            ],
            "aseName": "[last(split(parameters('byoAseFullResourceId'), '/'))]",
            "hostNameSslStatesDefault": "[if(not(empty(parameters('hostNameSslStatesIn'))), parameters('hostNameSslStatesIn'), createArray(createObject('name', format('{0}.azurewebsites.net', parameters('name')), 'hostType', 'Standard', 'sslState', 'Disabled')))]",
            "hostNameSslStates": "[if(parameters('byoASEv3'), createArray(createObject('name', format('{0}.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Standard'), createObject('name', format('{0}.scm.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Repository')), variables('hostNameSslStatesDefault'))]",
            "servicePlanName": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('{0}-plan', parameters('name')))]",
            "denyAllRule": {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny-All",
              "description": "Deny all access by default"
            },
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "condition": "[empty(parameters('byoAseAppServicePlanRID'))]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-11-01",
              "name": "[variables('servicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'linux', 'windows')]",
              "properties": {
                "reserved": "[or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python'))]",
                "hostingEnvironmentProfile": "[if(and(parameters('byoASEv3'), not(empty(parameters('byoAseFullResourceId')))), createObject('id', parameters('byoAseFullResourceId')), null())]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'functionapp,linux', 'functionapp')]",
              "identity": "[variables('identity')]",
              "properties": {
                "enabled": true,
                "scmSiteAlsoStopped": false,
                "keyVaultReferenceIdentity": "[if(parameters('systemAssignedIdentity'), 'SystemAssigned', 'None')]",
                "storageAccountRequired": false,
                "serverFarmId": "[if(not(empty(parameters('byoAseAppServicePlanRID'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('byoAseAppServicePlanRID'), '/')[2], split(parameters('byoAseAppServicePlanRID'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('byoAseAppServicePlanRID'), '/'))), resourceId('Microsoft.Web/serverfarms', variables('servicePlanName')))]",
                "httpsOnly": true,
                "hostingEnvironmentProfile": "[if(not(empty(parameters('byoAseFullResourceId'))), createObject('id', parameters('byoAseFullResourceId')), null())]",
                "virtualNetworkSubnetId": "[if(parameters('byoASEv3'), null(), if(parameters('enablePublicAccessWithPerimeter'), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[1])))]",
                "publicNetworkAccess": "[if(parameters('byoASEv3'), 'Disabled', if(or(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), 'Enabled', 'Disabled'))]",
                "siteConfig": {
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "cors": {
                    "allowedOrigins": "[parameters('allowedOrigins')]"
                  },
                  "ipSecurityRestrictions": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), createArray(), concat(variables('formattedIpRules'), createArray(variables('denyAllRule'))))]",
                  "linuxFxVersion": "[if(equals(parameters('runtime'), 'python'), format('PYTHON|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'node'), format('NODE|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'java'), format('JAVA|{0}-java{1}', parameters('runtimeVersion'), parameters('runtimeVersion')), '')))]",
                  "netFrameworkVersion": "[if(equals(parameters('runtime'), 'dotnet'), parameters('runtimeVersion'), null())]",
                  "appSettings": "[concat(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTOVERVNET', 'value', '1'), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', parameters('runtime')), createObject('name', 'WEBSITE_VNET_ROUTE_ALL', 'value', '1')), if(not(equals(parameters('runtime'), 'python')), createArray(createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('name')))), createArray()), if(equals(parameters('runtime'), 'python'), createArray(createObject('name', 'ENABLE_ORYX_BUILD', 'value', 'true'), createObject('name', 'SCM_DO_BUILD_DURING_DEPLOYMENT', 'value', 'true')), createArray()), parameters('appSettings'), if(not(empty(parameters('applicationInsightsName'))), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString)), createArray()))]"
                },
                "hostNameSslStates": "[variables('hostNameSslStates')]",
                "redundancyMode": "[parameters('redundancyMode')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('p-{0}-function', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[1])]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('p-{0}-function', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                      "groupIds": [
                        "sites"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), format('p-{0}-function', parameters('name')), '')]",
                  "type": "azurewebapps",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), resourceId('Microsoft.Web/sites', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('subnetDelegationServerFarm1{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(and(not(parameters('functionAppExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployFunction')), not(parameters('enablePublicAccessWithPerimeter'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkFunction{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.functionAppName.value]",
                "type": "Microsoft.Web/sites",
                "groupIds": [
                  "sites"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Web/sites/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.functionAppName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('Function4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('functionAppExists')), parameters('serviceSettingDeployFunction'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForFunction{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "storageAccountName2": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "functionPrincipalId": {
            "value": "[variables('var_functionPrincipalId')]"
          },
          "openAIName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aoaiName.value]"
          },
          "aiServicesName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "200045614052441962"
            }
          },
          "parameters": {
            "functionPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "openAIName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('functionPrincipalId'), 'storageBlobDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('storageAccountName2')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), parameters('functionPrincipalId'), 'storageBlobDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('openAIName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), parameters('functionPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiServicesName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('functionPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('functionPrincipalId'), 'searchIndexDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('functionPrincipalId'), 'searchServiceContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('Function4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('containerAppsEnvExists')), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[parameters('commonResourceGroup')]"
          },
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "subnetAcaDedicatedName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acaSubnetName.value]"
          },
          "wlMinCountServerless": {
            "value": "[parameters('wlMinCountServerless')]"
          },
          "wlMinCountDedicated": {
            "value": "[parameters('wlMinCountDedicated')]"
          },
          "wlMaxCount": {
            "value": "[parameters('wlMaxCount')]"
          },
          "wlProfileDedicatedName": {
            "value": "[parameters('wlProfileDedicatedName')]"
          },
          "wlProfileGPUConsumptionName": {
            "value": "[parameters('wlProfileGPUConsumptionName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "182631986997618464"
            },
            "description": "Creates an Azure Container Registry and an Azure Container Apps environment."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "subnetAcaDedicatedName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string"
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "containerRegistryAdminUserEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "wlMinCountServerless": {
              "type": "int",
              "defaultValue": 0
            },
            "wlMinCountDedicated": {
              "type": "int",
              "defaultValue": 1
            },
            "wlMaxCount": {
              "type": "int",
              "defaultValue": 5
            },
            "wlProfileDedicatedName": {
              "type": "string",
              "defaultValue": "D4"
            },
            "wlProfileGPUConsumptionName": {
              "type": "string",
              "defaultValue": "Consumption-GPU-NC24-A100"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "logAnalyticsWorkspaceRG": {
                    "value": "[parameters('logAnalyticsWorkspaceRG')]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "enablePublicGenAIAccess": {
                    "value": "[parameters('enablePublicGenAIAccess')]"
                  },
                  "enablePublicAccessWithPerimeter": {
                    "value": "[parameters('enablePublicAccessWithPerimeter')]"
                  },
                  "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  "subnetNamePend": {
                    "value": "[parameters('subnetNamePend')]"
                  },
                  "subnetAcaDedicatedName": {
                    "value": "[parameters('subnetAcaDedicatedName')]"
                  },
                  "wlMinCountServerless": {
                    "value": "[parameters('wlMinCountServerless')]"
                  },
                  "wlMinCountDedicated": {
                    "value": "[parameters('wlMinCountDedicated')]"
                  },
                  "wlMaxCount": {
                    "value": "[parameters('wlMaxCount')]"
                  },
                  "wlProfileDedicatedName": {
                    "value": "[parameters('wlProfileDedicatedName')]"
                  },
                  "wlProfileGPUConsumptionName": {
                    "value": "[parameters('wlProfileGPUConsumptionName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11712255516451809268"
                    },
                    "description": "Creates an Azure Container Apps environment."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Application Insights resource"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if Dapr is enabled"
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Log Analytics workspace"
                      }
                    },
                    "logAnalyticsWorkspaceRG": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetResourceGroupName": {
                      "type": "string"
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string"
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "createPrivateEndpoint": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wlProfileDedicatedName": {
                      "type": "string",
                      "defaultValue": "D4"
                    },
                    "wlProfileGPUConsumptionName": {
                      "type": "string",
                      "defaultValue": "Consumption-GPU-NC24-A100"
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlProfileDedicatedGPUName": {
                      "type": "string",
                      "defaultValue": "Dedicated-GPU-NC24-A100"
                    },
                    "wlMinCountDedicatedGPU": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCountDedicatedGPU": {
                      "type": "int",
                      "defaultValue": 5
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
                            "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                          }
                        },
                        "daprAIInstrumentationKey": "[if(and(parameters('daprEnabled'), not(empty(parameters('applicationInsightsName')))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey, '')]",
                        "daprAIConnectionString": "[if(and(parameters('daprEnabled'), not(empty(parameters('applicationInsightsName')))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, '')]",
                        "workloadProfiles": [
                          {
                            "name": "Consumption",
                            "workloadProfileType": "Consumption"
                          },
                          {
                            "name": "[parameters('wlProfileDedicatedName')]",
                            "workloadProfileType": "[parameters('wlProfileDedicatedName')]",
                            "minimumCount": "[parameters('wlMinCountDedicated')]",
                            "maximumCount": "[parameters('wlMaxCount')]"
                          }
                        ],
                        "vnetConfiguration": {
                          "infrastructureSubnetId": "[if(parameters('enablePublicAccessWithPerimeter'), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetAcaDedicatedName')))]",
                          "internal": "[if(parameters('enablePublicAccessWithPerimeter'), false(), true())]"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('createPrivateEndpoint')]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-01-01",
                      "name": "[format('pend-acaenv-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pend-aca-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
                              "groupIds": [
                                "managedEnvironments"
                              ],
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2025-01-01').defaultDomain]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "dnsConfig": {
                      "type": "array",
                      "value": [
                        {
                          "name": "[if(parameters('createPrivateEndpoint'), format('pend-acaenv-{0}', parameters('name')), '')]",
                          "type": "azurecontainerapps",
                          "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.App/managedEnvironments', parameters('name')), '')]"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
            },
            "environmentName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.name.value]"
            },
            "environmentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.id.value]"
            },
            "dnsConfig": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.dnsConfig.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('commonResourceGroup')), 'Microsoft.Resources/deployments', format('miRbacCmn-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miRbacProj-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('subnetDelegationAcaEnv{0}', variables('deploymentProjSpecificUniqueSuffix')))]"
      ]
    },
    {
      "condition": "[and(and(and(not(parameters('containerAppsEnvExists')), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployContainerApps')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkACAEnv{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": [
              {
                "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value]",
                "type": "Microsoft.App/managedEnvironments",
                "groupIds": [
                  "managedEnvironments"
                ],
                "resourceId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.App/managedEnvironments/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value)]"
              }
            ]
          },
          "privateLinksDnsZones": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    },
    {
      "condition": "[and(not(parameters('containerAppAExists')), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-a-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppAName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "ipSecurityRestrictions": "[if(parameters('enablePublicGenAIAccess'), createObject('value', variables('ipSecurityRestrictions')), createObject('value', createArray()))]",
          "allowedOrigins": {
            "value": "[variables('allowedOrigins')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[parameters('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[parameters('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "subnetAcaDedicatedName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acaSubnetName.value]"
          },
          "customDomains": {
            "value": "[parameters('acaCustomDomainsArray')]"
          },
          "resourceGroupName": {
            "value": "[parameters('targetResourceGroup')]"
          },
          "identityId": "[if(parameters('miACAExists'), createObject('value', 'existing-mi-principal-id'), createObject('value', format('{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value)))]",
          "identityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value]"
          },
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrCommonName.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrProjectName.value))]",
          "containerAppsEnvironmentName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value]"
          },
          "containerAppsEnvironmentId": {
            "value": "[format('{0}/resourceGroups/{1}/providers/Microsoft.App/managedEnvironments/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value)]"
          },
          "openAiDeploymentName": {
            "value": "gpt"
          },
          "openAiEvalDeploymentName": {
            "value": "gpt-evals"
          },
          "openAiEmbeddingDeploymentName": {
            "value": "text-embedding-ada-002"
          },
          "openAiEndpoint": {
            "value": "[format('https://{0}.cognitiveservices.azure.com/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value)]"
          },
          "openAiName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiServicesName.value]"
          },
          "openAiType": {
            "value": "azure"
          },
          "openAiApiVersion": {
            "value": "[parameters('openAiApiVersion')]"
          },
          "aiSearchEndpoint": {
            "value": "[format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value)]"
          },
          "aiSearchIndexName": {
            "value": "[format('index-{0}-{1}', variables('projectName'), parameters('resourceSuffix'))]"
          },
          "appinsightsConnectionstring": {
            "value": "[format('InstrumentationKey={0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.applicationInsightName.value)]"
          },
          "bingName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.bingName.value]"
          },
          "bingApiEndpoint": {
            "value": "https://api.bing.microsoft.com/v7.0/search"
          },
          "bingApiKey": {
            "value": "placeholder-key"
          },
          "aiProjectName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.aiProjectName.value]"
          },
          "subscriptionId": {
            "value": "[parameters('subscriptionIdDevTestProd')]"
          },
          "appWorkloadProfileName": {
            "value": "[parameters('acaAppWorkloadProfileName')]"
          },
          "containerCpuCoreCount": {
            "value": "[parameters('containerCpuCoreCount')]"
          },
          "containerMemory": {
            "value": "[parameters('containerMemory')]"
          },
          "keyVaultUrl": {
            "value": "[format('https://{0}.{1}', parameters('keyvaultName'), environment().suffixes.keyvaultDns)]"
          },
          "imageName": "[if(not(empty(parameters('aca_a_registry_image'))), createObject('value', parameters('aca_a_registry_image')), createObject('value', parameters('aca_default_image')))]",
          "imageRegistryType": "[if(not(empty(parameters('aca_a_registry_image'))), createObject('value', parameters('imageRegistryTypeA')), createObject('value', 'ms'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11939160748184369493"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "identityName": {
              "type": "string"
            },
            "identityId": {
              "type": "string"
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "api"
            },
            "openAiDeploymentName": {
              "type": "string"
            },
            "openAiEvalDeploymentName": {
              "type": "string"
            },
            "openAiEndpoint": {
              "type": "string"
            },
            "openAiName": {
              "type": "string"
            },
            "bingName": {
              "type": "string"
            },
            "openAiApiVersion": {
              "type": "string"
            },
            "openAiEmbeddingDeploymentName": {
              "type": "string"
            },
            "openAiType": {
              "type": "string"
            },
            "aiSearchEndpoint": {
              "type": "string"
            },
            "aiSearchIndexName": {
              "type": "string"
            },
            "appinsightsConnectionstring": {
              "type": "string"
            },
            "aiProjectName": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            },
            "customDomains": {
              "type": "array",
              "defaultValue": []
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetNamePend": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetAcaDedicatedName": {
              "type": "string",
              "defaultValue": ""
            },
            "appWorkloadProfileName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultUrl": {
              "type": "string",
              "defaultValue": ""
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "imageRegistryType": {
              "type": "string",
              "defaultValue": "ms",
              "allowedValues": [
                "ms",
                "dockerhub",
                "private"
              ]
            },
            "bingApiKey": {
              "type": "securestring"
            },
            "bingApiEndpoint": {
              "type": "string"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "containerCpuCoreCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "2.0Gi",
              "metadata": {
                "description": "Memory allocated to a single container instance, e.g., 1Gi"
              }
            }
          },
          "variables": {
            "baseEnvVars": [
              {
                "name": "AZURE_LOCATION",
                "value": "[parameters('location')]"
              },
              {
                "name": "AZURE_RESOURCE_GROUP",
                "value": "[parameters('resourceGroupName')]"
              },
              {
                "name": "AZURE_SUBSCRIPTION_ID",
                "value": "[parameters('subscriptionId')]"
              },
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[parameters('identityId')]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[parameters('aiSearchEndpoint')]"
              },
              {
                "name": "AZUREAISEARCH__INDEX_NAME",
                "value": "[parameters('aiSearchIndexName')]"
              },
              {
                "name": "OPENAI_TYPE",
                "value": "[parameters('openAiType')]"
              },
              {
                "name": "AZURE_OPENAI_API_VERSION",
                "value": "[parameters('openAiApiVersion')]"
              },
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[parameters('openAiEndpoint')]"
              },
              {
                "name": "AZURE_OPENAI_NAME",
                "value": "[parameters('openAiName')]"
              },
              {
                "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
                "value": "[parameters('openAiDeploymentName')]"
              },
              {
                "name": "AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME",
                "value": "[parameters('openAiEvalDeploymentName')]"
              },
              {
                "name": "AZURE_AI_PROJECT_NAME",
                "value": "[parameters('aiProjectName')]"
              },
              {
                "name": "AZURE_EMBEDDING_NAME",
                "value": "[parameters('openAiEmbeddingDeploymentName')]"
              },
              {
                "name": "appinsightsConnectionstring",
                "value": "[parameters('appinsightsConnectionstring')]"
              },
              {
                "name": "BING_SEARCH_ENDPOINT",
                "value": "[parameters('bingApiEndpoint')]"
              },
              {
                "name": "BING_SEARCH_NAME",
                "value": "[parameters('bingName')]"
              }
            ],
            "bingSearchKeyEnvVar": "[if(not(empty(parameters('bingApiKey'))), createArray(createObject('name', 'BING_SEARCH_KEY', 'secretRef', 'bing-search-key')), createArray())]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}-1', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerAppsEnvironmentId": {
                    "value": "[parameters('containerAppsEnvironmentId')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "customDomains": {
                    "value": "[parameters('customDomains')]"
                  },
                  "ipSecurityRestrictions": {
                    "value": "[parameters('ipSecurityRestrictions')]"
                  },
                  "enablePublicGenAIAccess": {
                    "value": "[parameters('enablePublicGenAIAccess')]"
                  },
                  "enablePublicAccessWithPerimeter": {
                    "value": "[parameters('enablePublicAccessWithPerimeter')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  "subnetNamePend": {
                    "value": "[parameters('subnetNamePend')]"
                  },
                  "subnetAcaDedicatedName": {
                    "value": "[parameters('subnetAcaDedicatedName')]"
                  },
                  "allowedOrigins": {
                    "value": "[parameters('allowedOrigins')]"
                  },
                  "appWorkloadProfileName": {
                    "value": "[parameters('appWorkloadProfileName')]"
                  },
                  "containerCpuCoreCount": {
                    "value": "[parameters('containerCpuCoreCount')]"
                  },
                  "containerMemory": {
                    "value": "[parameters('containerMemory')]"
                  },
                  "keyVaultUrl": {
                    "value": "[parameters('keyVaultUrl')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "imageRegistryType": {
                    "value": "[parameters('imageRegistryType')]"
                  },
                  "secrets": "[if(not(empty(parameters('bingApiKey'))), createObject('value', createObject('bing-search-key', parameters('bingApiKey'))), createObject('value', createObject()))]",
                  "env": {
                    "value": "[concat(variables('baseEnvVars'), variables('bingSearchKeyEnvVar'))]"
                  },
                  "targetPort": {
                    "value": "[parameters('targetPort')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15179009151763167262"
                    },
                    "description": "Creates or updates an existing Azure Container App."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment name for the container apps"
                      }
                    },
                    "containerAppsEnvironmentId": {
                      "type": "string"
                    },
                    "containerCpuCoreCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "2.0Gi",
                      "metadata": {
                        "description": "Memory allocated to a single container instance, e.g., 1Gi"
                      }
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "metadata": {
                        "description": "The minimum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "The name of the container"
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry"
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable or disable Dapr for the container app"
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "The Dapr app ID"
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if Ingress is enabled for the container app"
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "The type of identity for the resource"
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The ID of the user-assigned identity"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The secrets required for the container"
                      }
                    },
                    "env": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The environment variables for the container"
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if the resource ingress is exposed externally"
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service binds associated with the container"
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "The target port for the container"
                      }
                    },
                    "allowedOrigins": {
                      "type": "array"
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
                    },
                    "imageRegistryType": {
                      "type": "string",
                      "defaultValue": "ms",
                      "allowedValues": [
                        "ms",
                        "dockerhub",
                        "private"
                      ]
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable public access with network perimeter security"
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the virtual network"
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource group name containing the virtual network"
                      }
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the private endpoints"
                      }
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the dedicated container apps subnet"
                      }
                    },
                    "appWorkloadProfileName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "keyVaultUrl": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('depl-{0}-2', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enablePublicGenAIAccess": {
                            "value": "[parameters('enablePublicGenAIAccess')]"
                          },
                          "ipSecurityRestrictions": {
                            "value": "[parameters('ipSecurityRestrictions')]"
                          },
                          "enablePublicAccessWithPerimeter": {
                            "value": "[parameters('enablePublicAccessWithPerimeter')]"
                          },
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetResourceGroupName": {
                            "value": "[parameters('vnetResourceGroupName')]"
                          },
                          "subnetNamePend": {
                            "value": "[parameters('subnetNamePend')]"
                          },
                          "subnetAcaDedicatedName": {
                            "value": "[parameters('subnetAcaDedicatedName')]"
                          },
                          "identityType": {
                            "value": "[parameters('identityType')]"
                          },
                          "identityName": {
                            "value": "[parameters('identityName')]"
                          },
                          "ingressEnabled": {
                            "value": "[parameters('ingressEnabled')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "containerAppsEnvironmentName": {
                            "value": "[parameters('containerAppsEnvironmentName')]"
                          },
                          "containerAppsEnvironmentId": {
                            "value": "[parameters('containerAppsEnvironmentId')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "containerRegistryHostSuffix": {
                            "value": "[parameters('containerRegistryHostSuffix')]"
                          },
                          "containerCpuCoreCount": {
                            "value": "[parameters('containerCpuCoreCount')]"
                          },
                          "containerMemory": {
                            "value": "[parameters('containerMemory')]"
                          },
                          "containerMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "containerMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "daprEnabled": {
                            "value": "[parameters('daprEnabled')]"
                          },
                          "daprAppId": {
                            "value": "[parameters('daprAppId')]"
                          },
                          "daprAppProtocol": {
                            "value": "[parameters('daprAppProtocol')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "allowedOrigins": {
                            "value": "[parameters('allowedOrigins')]"
                          },
                          "external": {
                            "value": "[parameters('external')]"
                          },
                          "env": {
                            "value": "[parameters('env')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "imageRegistryType": {
                            "value": "[parameters('imageRegistryType')]"
                          },
                          "targetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          },
                          "customDomains": {
                            "value": "[parameters('customDomains')]"
                          },
                          "appWorkloadProfileName": {
                            "value": "[parameters('appWorkloadProfileName')]"
                          },
                          "keyVaultUrl": {
                            "value": "[parameters('keyVaultUrl')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2534383004813400886"
                            },
                            "description": "Creates a container app in an Azure Container App environment."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "allowedOrigins": {
                              "type": "array",
                              "metadata": {
                                "description": "Allowed origins"
                              }
                            },
                            "containerAppsEnvironmentName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the environment for container apps"
                              }
                            },
                            "containerAppsEnvironmentId": {
                              "type": "string",
                              "metadata": {
                                "description": "ID of the environment for container apps"
                              }
                            },
                            "containerCpuCoreCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                              }
                            },
                            "containerMemory": {
                              "type": "string",
                              "defaultValue": "2.0Gi",
                              "metadata": {
                                "description": "Memory allocated to a single container instance, e.g., 1Gi"
                              }
                            },
                            "containerMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "minValue": 1,
                              "metadata": {
                                "description": "The maximum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerMinReplicas": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "The minimum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the container"
                              }
                            },
                            "containerRegistryName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the container registry"
                              }
                            },
                            "containerRegistryHostSuffix": {
                              "type": "string",
                              "defaultValue": "azurecr.io",
                              "metadata": {
                                "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                              }
                            },
                            "daprAppProtocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "allowedValues": [
                                "http",
                                "grpc"
                              ],
                              "metadata": {
                                "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
                              }
                            },
                            "daprAppId": {
                              "type": "string",
                              "defaultValue": "[parameters('containerName')]",
                              "metadata": {
                                "description": "The Dapr app ID"
                              }
                            },
                            "daprEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable Dapr"
                              }
                            },
                            "env": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The environment variables for the container"
                              }
                            },
                            "external": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if the resource ingress is exposed externally"
                              }
                            },
                            "identityName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The ID of the user-assigned identity"
                              }
                            },
                            "identityType": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned"
                              ],
                              "metadata": {
                                "description": "The type of identity for the resource"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container image"
                              }
                            },
                            "imageRegistryType": {
                              "type": "string",
                              "defaultValue": "ms",
                              "allowedValues": [
                                "ms",
                                "dockerhub",
                                "private"
                              ]
                            },
                            "ingressEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if Ingress is enabled for the container app"
                              }
                            },
                            "revisionMode": {
                              "type": "string",
                              "defaultValue": "Single"
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "The secrets required for the container"
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The service binds associated with the container"
                              }
                            },
                            "serviceType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container apps add-on to use. e.g. redis"
                              }
                            },
                            "targetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "The target port for the container"
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "vnetCidr": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "enablePublicGenAIAccess": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enablePublicAccessWithPerimeter": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "vnetResourceGroupName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetNamePend": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetAcaDedicatedName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "appWorkloadProfileName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "keyVaultUrl": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]",
                            "rId": "[resourceId('Microsoft.App/managedEnvironments@2023-05-01', parameters('containerAppsEnvironmentName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2025-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "[variables('normalizedIdentityType')]",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]": {}
                                }
                              },
                              "properties": {
                                "workloadProfileName": "[if(empty(parameters('appWorkloadProfileName')), null(), parameters('appWorkloadProfileName'))]",
                                "environmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                                "configuration": {
                                  "copy": [
                                    {
                                      "name": "secrets",
                                      "count": "[length(items(parameters('secrets')))]",
                                      "input": {
                                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                                        "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                                      }
                                    }
                                  ],
                                  "activeRevisionsMode": "[parameters('revisionMode')]",
                                  "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'allowInsecure', true(), 'transport', 'auto', 'ipSecurityRestrictions', if(and(not(empty(parameters('ipSecurityRestrictions'))), not(parameters('enablePublicGenAIAccess'))), parameters('ipSecurityRestrictions'), null()), 'corsPolicy', createObject('maxAge', 3600, 'allowCredentials', true(), 'allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')), 'allowedMethods', createArray('GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'), 'allowedHeaders', createArray('*'), 'exposeHeaders', createArray('*')), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null())), null())]",
                                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
                                  "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
                                  "registries": "[if(and(variables('usePrivateRegistry'), equals(parameters('imageRegistryType'), 'private')), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
                                },
                                "template": {
                                  "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
                                  "containers": [
                                    {
                                      "image": "[if(not(empty(parameters('imageName'))), if(equals(parameters('imageRegistryType'), 'private'), format('{0}.{1}/{2}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix'), parameters('imageName')), parameters('imageName')), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                      "name": "[parameters('containerName')]",
                                      "env": "[parameters('env')]",
                                      "resources": {
                                        "cpu": "[parameters('containerCpuCoreCount')]",
                                        "memory": "[parameters('containerMemory')]"
                                      }
                                    }
                                  ],
                                  "scale": {
                                    "minReplicas": "[parameters('containerMinReplicas')]",
                                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "defaultDomain": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2025-01-01').defaultDomain]"
                            },
                            "identityPrincipalId": {
                              "type": "string",
                              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
                            },
                            "imageName": {
                              "type": "string",
                              "value": "[parameters('imageName')]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "serviceBind": {
                              "type": "object",
                              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01').configuration.ingress.fqdn), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
                    },
                    "imageName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.imageName.value]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.name.value]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.uri.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "SERVICE_ACA_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_ACA_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.uri.value]"
            },
            "SERVICE_ACA_IMAGE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.imageName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('containerAppWExists')), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-w-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppWName.value]"
          },
          "apiEndpoint": {
            "value": "[format('https://{0}.{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppAName.value, variables('var_containerAppApiDomain'))]"
          },
          "allowedOrigins": {
            "value": "[variables('allowedOrigins')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value]"
          },
          "containerAppsEnvironmentId": {
            "value": "[format('{0}/resourceGroups/{1}/providers/Microsoft.App/managedEnvironments/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.containerAppsEnvName.value)]"
          },
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrCommonName.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.acrProjectName.value))]",
          "identityId": "[if(parameters('miACAExists'), createObject('value', 'existing-mi-principal-id'), createObject('value', format('{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value)))]",
          "identityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value]"
          },
          "appWorkloadProfileName": {
            "value": "[parameters('acaAppWorkloadProfileName')]"
          },
          "containerCpuCoreCount": {
            "value": "[parameters('containerCpuCoreCount')]"
          },
          "containerMemory": {
            "value": "[parameters('containerMemory')]"
          },
          "keyVaultUrl": {
            "value": "[format('https://{0}.{1}', parameters('keyvaultName'), environment().suffixes.keyvaultDns)]"
          },
          "imageName": "[if(not(empty(parameters('aca_w_registry_image'))), createObject('value', parameters('aca_w_registry_image')), createObject('value', parameters('aca_default_image')))]",
          "imageRegistryType": "[if(not(empty(parameters('aca_w_registry_image'))), createObject('value', parameters('imageRegistryTypeW')), createObject('value', 'ms'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16918582377667319699"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "identityName": {
              "type": "string"
            },
            "identityId": {
              "type": "string"
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "web"
            },
            "apiEndpoint": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            },
            "appWorkloadProfileName": {
              "type": "string",
              "defaultValue": ""
            },
            "containerCpuCoreCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "2.0Gi",
              "metadata": {
                "description": "Memory allocated to a single container instance, e.g., 1Gi"
              }
            },
            "keyVaultUrl": {
              "type": "string",
              "defaultValue": ""
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "imageRegistryType": {
              "type": "string",
              "defaultValue": "ms",
              "allowedValues": [
                "ms",
                "dockerhub",
                "private"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}-{1}', parameters('name'), deployment().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "allowedOrigins": {
                    "value": "[parameters('allowedOrigins')]"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerAppsEnvironmentId": {
                    "value": "[parameters('containerAppsEnvironmentId')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "appWorkloadProfileName": {
                    "value": "[parameters('appWorkloadProfileName')]"
                  },
                  "containerCpuCoreCount": {
                    "value": "[parameters('containerCpuCoreCount')]"
                  },
                  "containerMemory": {
                    "value": "[parameters('containerMemory')]"
                  },
                  "keyVaultUrl": {
                    "value": "[parameters('keyVaultUrl')]"
                  },
                  "env": {
                    "value": [
                      {
                        "name": "AZURE_CLIENT_ID",
                        "value": "[parameters('identityId')]"
                      },
                      {
                        "name": "API_ENDPOINT",
                        "value": "[parameters('apiEndpoint')]"
                      }
                    ]
                  },
                  "targetPort": {
                    "value": "[parameters('targetPort')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "imageRegistryType": {
                    "value": "[parameters('imageRegistryType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15179009151763167262"
                    },
                    "description": "Creates or updates an existing Azure Container App."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment name for the container apps"
                      }
                    },
                    "containerAppsEnvironmentId": {
                      "type": "string"
                    },
                    "containerCpuCoreCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "2.0Gi",
                      "metadata": {
                        "description": "Memory allocated to a single container instance, e.g., 1Gi"
                      }
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "metadata": {
                        "description": "The minimum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "The name of the container"
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry"
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable or disable Dapr for the container app"
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "The Dapr app ID"
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if Ingress is enabled for the container app"
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "The type of identity for the resource"
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The ID of the user-assigned identity"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The secrets required for the container"
                      }
                    },
                    "env": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The environment variables for the container"
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if the resource ingress is exposed externally"
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service binds associated with the container"
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "The target port for the container"
                      }
                    },
                    "allowedOrigins": {
                      "type": "array"
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
                    },
                    "imageRegistryType": {
                      "type": "string",
                      "defaultValue": "ms",
                      "allowedValues": [
                        "ms",
                        "dockerhub",
                        "private"
                      ]
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable public access with network perimeter security"
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the virtual network"
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource group name containing the virtual network"
                      }
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the private endpoints"
                      }
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the dedicated container apps subnet"
                      }
                    },
                    "appWorkloadProfileName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "keyVaultUrl": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('depl-{0}-2', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enablePublicGenAIAccess": {
                            "value": "[parameters('enablePublicGenAIAccess')]"
                          },
                          "ipSecurityRestrictions": {
                            "value": "[parameters('ipSecurityRestrictions')]"
                          },
                          "enablePublicAccessWithPerimeter": {
                            "value": "[parameters('enablePublicAccessWithPerimeter')]"
                          },
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetResourceGroupName": {
                            "value": "[parameters('vnetResourceGroupName')]"
                          },
                          "subnetNamePend": {
                            "value": "[parameters('subnetNamePend')]"
                          },
                          "subnetAcaDedicatedName": {
                            "value": "[parameters('subnetAcaDedicatedName')]"
                          },
                          "identityType": {
                            "value": "[parameters('identityType')]"
                          },
                          "identityName": {
                            "value": "[parameters('identityName')]"
                          },
                          "ingressEnabled": {
                            "value": "[parameters('ingressEnabled')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "containerAppsEnvironmentName": {
                            "value": "[parameters('containerAppsEnvironmentName')]"
                          },
                          "containerAppsEnvironmentId": {
                            "value": "[parameters('containerAppsEnvironmentId')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "containerRegistryHostSuffix": {
                            "value": "[parameters('containerRegistryHostSuffix')]"
                          },
                          "containerCpuCoreCount": {
                            "value": "[parameters('containerCpuCoreCount')]"
                          },
                          "containerMemory": {
                            "value": "[parameters('containerMemory')]"
                          },
                          "containerMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "containerMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "daprEnabled": {
                            "value": "[parameters('daprEnabled')]"
                          },
                          "daprAppId": {
                            "value": "[parameters('daprAppId')]"
                          },
                          "daprAppProtocol": {
                            "value": "[parameters('daprAppProtocol')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "allowedOrigins": {
                            "value": "[parameters('allowedOrigins')]"
                          },
                          "external": {
                            "value": "[parameters('external')]"
                          },
                          "env": {
                            "value": "[parameters('env')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "imageRegistryType": {
                            "value": "[parameters('imageRegistryType')]"
                          },
                          "targetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          },
                          "customDomains": {
                            "value": "[parameters('customDomains')]"
                          },
                          "appWorkloadProfileName": {
                            "value": "[parameters('appWorkloadProfileName')]"
                          },
                          "keyVaultUrl": {
                            "value": "[parameters('keyVaultUrl')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2534383004813400886"
                            },
                            "description": "Creates a container app in an Azure Container App environment."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "allowedOrigins": {
                              "type": "array",
                              "metadata": {
                                "description": "Allowed origins"
                              }
                            },
                            "containerAppsEnvironmentName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the environment for container apps"
                              }
                            },
                            "containerAppsEnvironmentId": {
                              "type": "string",
                              "metadata": {
                                "description": "ID of the environment for container apps"
                              }
                            },
                            "containerCpuCoreCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                              }
                            },
                            "containerMemory": {
                              "type": "string",
                              "defaultValue": "2.0Gi",
                              "metadata": {
                                "description": "Memory allocated to a single container instance, e.g., 1Gi"
                              }
                            },
                            "containerMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "minValue": 1,
                              "metadata": {
                                "description": "The maximum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerMinReplicas": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "The minimum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the container"
                              }
                            },
                            "containerRegistryName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the container registry"
                              }
                            },
                            "containerRegistryHostSuffix": {
                              "type": "string",
                              "defaultValue": "azurecr.io",
                              "metadata": {
                                "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                              }
                            },
                            "daprAppProtocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "allowedValues": [
                                "http",
                                "grpc"
                              ],
                              "metadata": {
                                "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
                              }
                            },
                            "daprAppId": {
                              "type": "string",
                              "defaultValue": "[parameters('containerName')]",
                              "metadata": {
                                "description": "The Dapr app ID"
                              }
                            },
                            "daprEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable Dapr"
                              }
                            },
                            "env": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The environment variables for the container"
                              }
                            },
                            "external": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if the resource ingress is exposed externally"
                              }
                            },
                            "identityName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The ID of the user-assigned identity"
                              }
                            },
                            "identityType": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned"
                              ],
                              "metadata": {
                                "description": "The type of identity for the resource"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container image"
                              }
                            },
                            "imageRegistryType": {
                              "type": "string",
                              "defaultValue": "ms",
                              "allowedValues": [
                                "ms",
                                "dockerhub",
                                "private"
                              ]
                            },
                            "ingressEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if Ingress is enabled for the container app"
                              }
                            },
                            "revisionMode": {
                              "type": "string",
                              "defaultValue": "Single"
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "The secrets required for the container"
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The service binds associated with the container"
                              }
                            },
                            "serviceType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container apps add-on to use. e.g. redis"
                              }
                            },
                            "targetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "The target port for the container"
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "vnetCidr": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "enablePublicGenAIAccess": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enablePublicAccessWithPerimeter": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "vnetResourceGroupName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetNamePend": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetAcaDedicatedName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "appWorkloadProfileName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "keyVaultUrl": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]",
                            "rId": "[resourceId('Microsoft.App/managedEnvironments@2023-05-01', parameters('containerAppsEnvironmentName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2025-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "[variables('normalizedIdentityType')]",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]": {}
                                }
                              },
                              "properties": {
                                "workloadProfileName": "[if(empty(parameters('appWorkloadProfileName')), null(), parameters('appWorkloadProfileName'))]",
                                "environmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                                "configuration": {
                                  "copy": [
                                    {
                                      "name": "secrets",
                                      "count": "[length(items(parameters('secrets')))]",
                                      "input": {
                                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                                        "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                                      }
                                    }
                                  ],
                                  "activeRevisionsMode": "[parameters('revisionMode')]",
                                  "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'allowInsecure', true(), 'transport', 'auto', 'ipSecurityRestrictions', if(and(not(empty(parameters('ipSecurityRestrictions'))), not(parameters('enablePublicGenAIAccess'))), parameters('ipSecurityRestrictions'), null()), 'corsPolicy', createObject('maxAge', 3600, 'allowCredentials', true(), 'allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')), 'allowedMethods', createArray('GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'), 'allowedHeaders', createArray('*'), 'exposeHeaders', createArray('*')), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null())), null())]",
                                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
                                  "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
                                  "registries": "[if(and(variables('usePrivateRegistry'), equals(parameters('imageRegistryType'), 'private')), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
                                },
                                "template": {
                                  "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
                                  "containers": [
                                    {
                                      "image": "[if(not(empty(parameters('imageName'))), if(equals(parameters('imageRegistryType'), 'private'), format('{0}.{1}/{2}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix'), parameters('imageName')), parameters('imageName')), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                      "name": "[parameters('containerName')]",
                                      "env": "[parameters('env')]",
                                      "resources": {
                                        "cpu": "[parameters('containerCpuCoreCount')]",
                                        "memory": "[parameters('containerMemory')]"
                                      }
                                    }
                                  ],
                                  "scale": {
                                    "minReplicas": "[parameters('containerMinReplicas')]",
                                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "defaultDomain": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2025-01-01').defaultDomain]"
                            },
                            "identityPrincipalId": {
                              "type": "string",
                              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
                            },
                            "imageName": {
                              "type": "string",
                              "value": "[parameters('imageName')]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "serviceBind": {
                              "type": "object",
                              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01').configuration.ingress.fqdn), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
                    },
                    "imageName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.imageName.value]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.name.value]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.uri.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "SERVICE_ACA_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_ACA_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.uri.value]"
            },
            "SERVICE_ACA_IMAGE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.imageName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-a-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]"
      ]
    },
    {
      "condition": "[and(not(parameters('miACAExists')), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForContainerAppsMI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
      "resourceGroup": "[parameters('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.safeNameAISearch.value]"
          },
          "appInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "principalIdMI": "[if(parameters('miACAExists'), createObject('value', 'existing-mi-principal-id'), createObject('value', format('{0}/resourceGroups/{1}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{2}', subscription().subscriptionId, parameters('targetResourceGroup'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env'))), '2022-09-01').outputs.miACAName.value)))]",
          "resourceGroupId": {
            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14845812446885816195"
            }
          },
          "parameters": {
            "principalIdMI": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            },
            "resourceGroupId": {
              "type": "string"
            }
          },
          "variables": {
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "aiHubProjectDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "monitoringMetricsPublisherRoleId": "3913510d-42f4-4e42-8a64-420c390055eb",
            "monitoringReaderRoleId": "43d0d8ad-25c7-4714-9337-8ba259a9fe05"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchIndexDataContributorRoleId to project service principal OID: {0} to {1}', parameters('principalIdMI'), parameters('aiSearchName'))]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchServiceContributorRoleId to project service principal OID: {0} to {1}', parameters('principalIdMI'), parameters('aiSearchName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('appInsightsName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('monitoringMetricsPublisherRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringMetricsPublisherRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('monitoringMetricsPublisherRoleId to project service principal OID:{0} to {1}', parameters('principalIdMI'), parameters('appInsightsName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('appInsightsName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('monitoringReaderRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringReaderRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('monitoringReaderRoleId to project service principal OID:{0} to {1}', parameters('principalIdMI'), parameters('appInsightsName'))]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiHubProjectDataScientistRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiHubProjectDataScientistRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMLDataScientistRoleId to project service principal OID:{0} to {1} on RG level', parameters('principalIdMI'), parameters('resourceGroupId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-a-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionIdDevTestProd'), parameters('targetResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', variables('projectName'), parameters('env')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('targetResourceGroup'))]"
      ]
    }
  ],
  "outputs": {
    "webAppDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Web App deployment status"
      },
      "value": "[and(not(parameters('webAppExists')), parameters('serviceSettingDeployWebApp'))]"
    },
    "functionAppDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Function App deployment status"
      },
      "value": "[and(not(parameters('functionAppExists')), parameters('serviceSettingDeployFunction'))]"
    },
    "containerAppsEnvDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Container Apps Environment deployment status"
      },
      "value": "[and(not(parameters('containerAppsEnvExists')), parameters('serviceSettingDeployContainerApps'))]"
    },
    "containerAppADeployed": {
      "type": "bool",
      "metadata": {
        "description": "Container App API deployment status"
      },
      "value": "[and(not(parameters('containerAppAExists')), parameters('serviceSettingDeployContainerApps'))]"
    },
    "containerAppWDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Container App Web deployment status"
      },
      "value": "[and(not(parameters('containerAppWExists')), parameters('serviceSettingDeployContainerApps'))]"
    },
    "miACADeployed": {
      "type": "bool",
      "metadata": {
        "description": "Managed Identity for Container Apps deployment status"
      },
      "value": "[not(parameters('miACAExists'))]"
    }
  }
}