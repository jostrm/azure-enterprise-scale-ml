{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "2287375987386642541"
    }
  },
  "parameters": {
    "storageAccountSkuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGZRS"
      ]
    },
    "containerRegistrySkuName": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard",
        "Basic"
      ]
    },
    "bingSearchSKU": {
      "type": "string",
      "defaultValue": "S1"
    },
    "diagnosticSettingLevel": {
      "type": "string",
      "defaultValue": "silver",
      "allowedValues": [
        "gold",
        "silver",
        "bronze"
      ],
      "metadata": {
        "description": "Diagnostic setting level for monitoring and logging"
      }
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment: dev, test, prod"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Project number (e.g., \"005\")"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Location suffix (e.g., \"weu\", \"swc\")"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Common resource suffix (e.g., \"-001\")"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Project-specific resource suffix"
      }
    },
    "keyvaultExists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount1001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount2001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "acrProjectExists": {
      "type": "bool",
      "defaultValue": false
    },
    "applicationInsightExists": {
      "type": "bool",
      "defaultValue": false
    },
    "vmExists": {
      "type": "bool",
      "defaultValue": false
    },
    "bingExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miACAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miPrjExists": {
      "type": "bool",
      "defaultValue": false
    },
    "enableBingSearch": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Bing Search deployment"
      }
    },
    "enableProjectVM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable private VM deployment"
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "allowPublicAccessWhenBehindVnet": {
      "type": "bool",
      "defaultValue": false
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false
    },
    "genaiSubnetId": {
      "type": "string",
      "metadata": {
        "description": "Required subnet IDs from subnet calculator"
      }
    },
    "aksSubnetId": {
      "type": "string"
    },
    "acaSubnetId": {
      "type": "string"
    },
    "aca2SubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional subnets from subnet calculator"
      }
    },
    "aks2SubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "dbxPubSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "if projectype is not genai-1, but instead all"
      }
    },
    "dbxPrivSubnetName": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetCommon": {
      "type": "string",
      "defaultValue": ""
    },
    "common_subnet_name": {
      "type": "string"
    },
    "technicalAdminsObjectID": {
      "type": "string",
      "defaultValue": ""
    },
    "technicalAdminsEmail": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameBase": {
      "type": "string"
    },
    "vnetResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameFull_param": {
      "type": "string",
      "defaultValue": ""
    },
    "network_env": {
      "type": "string",
      "defaultValue": ""
    },
    "privDnsSubscription_param": {
      "type": "string",
      "defaultValue": ""
    },
    "privDnsResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "commonResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "keyvaultSoftDeleteDays": {
      "type": "int",
      "defaultValue": 90
    },
    "keyvaultEnablePurgeProtection": {
      "type": "bool",
      "defaultValue": true
    },
    "vmSKUSelectedArrayIndex": {
      "type": "int",
      "defaultValue": 2
    },
    "vmSKU": {
      "type": "array",
      "defaultValue": [
        "Standard_E2s_v3",
        "Standard_D4s_v3",
        "standard_D2as_v5"
      ]
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "aifactoryadmin"
    },
    "adminPassword": {
      "type": "string"
    },
    "hybridBenefit": {
      "type": "bool",
      "defaultValue": false
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true
    },
    "acr_adminUserEnabled": {
      "type": "bool",
      "defaultValue": false
    },
    "acr_dedicated": {
      "type": "bool",
      "defaultValue": true
    },
    "tagsProject": {
      "type": "object",
      "defaultValue": {}
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySuffixRG": {
      "type": "string"
    },
    "commonRGNamePrefix": {
      "type": "string"
    },
    "restore": {
      "type": "bool",
      "defaultValue": true
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": ""
    },
    "useAdGroups": {
      "type": "bool",
      "defaultValue": true
    },
    "inputKeyvault": {
      "type": "string"
    },
    "inputKeyvaultResourcegroup": {
      "type": "string"
    },
    "inputKeyvaultSubscription": {
      "type": "string"
    },
    "projectServicePrincipleOID_SeedingKeyvaultName": {
      "type": "string"
    },
    "projectServicePrincipleAppID_SeedingKeyvaultName": {
      "type": "string"
    },
    "projectServicePrincipleSecret_SeedingKeyvaultName": {
      "type": "string"
    },
    "aifactorySalt10char": {
      "type": "string",
      "defaultValue": ""
    },
    "randomValue": {
      "type": "string",
      "metadata": {
        "description": "Random value for deployment uniqueness"
      }
    },
    "projectPrefix": {
      "type": "string",
      "defaultValue": "esml-"
    },
    "projectSuffix": {
      "type": "string",
      "defaultValue": "-rg"
    },
    "deploySampleApp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable deployment of sample applications"
      }
    },
    "authClientSecretName": {
      "type": "string",
      "defaultValue": "aifactory-sample-app-1",
      "metadata": {
        "description": "Name of the authentication client secret in Key Vault"
      }
    },
    "authClientSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Authentication client secret value for sample applications"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "processedIpRulesKv",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesKv')])]"
        }
      },
      {
        "name": "processedIpRulesSa",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[trim(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')])]"
        }
      },
      {
        "name": "processedIpRules",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRules')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRules')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRules')]))]"
        }
      }
    ],
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "commonResourceGroup": "[if(not(empty(parameters('commonResourceGroup_param'))), parameters('commonResourceGroup_param'), format('{0}esml-common-{1}-{2}{3}', parameters('commonRGNamePrefix'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG')))]",
    "targetResourceGroup": "[format('{0}{1}{2}-{3}-{4}{5}{6}', parameters('commonRGNamePrefix'), parameters('projectPrefix'), replace(variables('projectName'), 'prj', 'project'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG'), parameters('projectSuffix'))]",
    "vnetNameFull": "[if(not(empty(parameters('vnetNameFull_param'))), replace(parameters('vnetNameFull_param'), '<network_env>', parameters('network_env')), format('{0}-{1}-{2}{3}', parameters('vnetNameBase'), parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix')))]",
    "vnetResourceGroupName": "[if(not(empty(parameters('vnetResourceGroup_param'))), replace(parameters('vnetResourceGroup_param'), '<network_env>', parameters('network_env')), variables('commonResourceGroup'))]",
    "privDnsResourceGroupName": "[if(and(not(empty(parameters('privDnsResourceGroup_param'))), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsResourceGroup_param'), variables('vnetResourceGroupName'))]",
    "privDnsSubscription": "[if(and(not(empty(parameters('privDnsSubscription_param'))), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsSubscription_param'), variables('subscriptionIdDevTestProd'))]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}{2}', parameters('projectNumber'), parameters('env'), variables('targetResourceGroup'))]",
    "commonSubnetName": "[if(not(empty(parameters('subnetCommon'))), replace(parameters('subnetCommon'), '<network_env>', parameters('network_env')), parameters('common_subnet_name'))]",
    "bingName_Static": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv_Static'), parameters('resourceSuffix'))]",
    "uniqueInAIFenv_Static": "[substring(uniqueString(subscriptionResourceId(variables('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', variables('commonResourceGroup'))), 0, 5)]",
    "acrCommonName_Static": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv_Static'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
    "cmnName_Static": "cmn",
    "kvCommonName_Static": "[format('kv-{0}{1}-{2}{3}', variables('cmnName_Static'), parameters('env'), variables('uniqueInAIFenv_Static'), parameters('commonResourceSuffix'))]",
    "ipWhitelist_array": "[if(not(empty(parameters('IPwhiteList'))), split(parameters('IPwhiteList'), ','), createArray())]",
    "databricksPublicSubnetResourceId": "[if(not(empty(parameters('dbxPubSubnetName'))), resourceId(variables('subscriptionIdDevTestProd'), variables('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), parameters('dbxPubSubnetName')), '')]",
    "keyVaultSecretsOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
    "keyVaultSecretsUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
    "keyVaultContributorRoleId": "f25e0fa2-a7c8-4377-a976-54943a77a395"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-naming-{0}', variables('targetResourceGroup')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceSuffix": {
            "value": "[parameters('commonResourceSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt10char": {
            "value": "[parameters('aifactorySalt10char')]"
          },
          "randomValue": {
            "value": "[parameters('randomValue')]"
          },
          "aifactorySuffixRG": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "commonRGNamePrefix": {
            "value": "[parameters('commonRGNamePrefix')]"
          },
          "technicalAdminsObjectID": {
            "value": "[parameters('technicalAdminsObjectID')]"
          },
          "technicalAdminsEmail": {
            "value": "[parameters('technicalAdminsEmail')]"
          },
          "commonResourceGroupName": {
            "value": "[variables('commonResourceGroup')]"
          },
          "subscriptionIdDevTestProd": {
            "value": "[variables('subscriptionIdDevTestProd')]"
          },
          "genaiSubnetId": {
            "value": "[parameters('genaiSubnetId')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "acaSubnetId": {
            "value": "[parameters('acaSubnetId')]"
          },
          "aca2SubnetId": {
            "value": "[parameters('aca2SubnetId')]"
          },
          "aks2SubnetId": {
            "value": "[parameters('aks2SubnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12584890335791498911"
            }
          },
          "definitions": {
            "aifactoryNamingType": {
              "type": "object",
              "properties": {
                "genaiSubnetName": {
                  "type": "string"
                },
                "aksSubnetName": {
                  "type": "string"
                },
                "aks2SubnetName": {
                  "type": "string"
                },
                "acaSubnetName": {
                  "type": "string"
                },
                "aca2SubnetName": {
                  "type": "string"
                },
                "defaultSubnet": {
                  "type": "string"
                },
                "aifV1HubName": {
                  "type": "string"
                },
                "aifV1ProjectName": {
                  "type": "string"
                },
                "aifV2Name": {
                  "type": "string"
                },
                "aifV2PrjName": {
                  "type": "string"
                },
                "aoaiName": {
                  "type": "string"
                },
                "amlName": {
                  "type": "string"
                },
                "safeNameAISearch": {
                  "type": "string"
                },
                "aiServicesName": {
                  "type": "string"
                },
                "dashboardInsightsName": {
                  "type": "string"
                },
                "applicationInsightName": {
                  "type": "string"
                },
                "applicationInsightName2": {
                  "type": "string"
                },
                "bingName": {
                  "type": "string"
                },
                "containerAppsEnvName": {
                  "type": "string"
                },
                "containerAppAName": {
                  "type": "string"
                },
                "containerAppWName": {
                  "type": "string"
                },
                "cosmosDBName": {
                  "type": "string"
                },
                "redisName": {
                  "type": "string"
                },
                "postgreSQLName": {
                  "type": "string"
                },
                "sqlServerName": {
                  "type": "string"
                },
                "sqlDBName": {
                  "type": "string"
                },
                "functionAppName": {
                  "type": "string"
                },
                "webAppName": {
                  "type": "string"
                },
                "funcAppServicePlanName": {
                  "type": "string"
                },
                "webbAppServicePlanName": {
                  "type": "string"
                },
                "vmName": {
                  "type": "string"
                },
                "keyvaultName": {
                  "type": "string"
                },
                "storageAccount1001Name": {
                  "type": "string"
                },
                "storageAccount2001Name": {
                  "type": "string"
                },
                "acrProjectName": {
                  "type": "string"
                },
                "acrCommonName": {
                  "type": "string"
                },
                "miACAName": {
                  "type": "string"
                },
                "miPrjName": {
                  "type": "string"
                },
                "laWorkspaceName": {
                  "type": "string"
                },
                "projectName": {
                  "type": "string"
                },
                "cmnName": {
                  "type": "string"
                },
                "kvNameCommon": {
                  "type": "string"
                },
                "genaiName": {
                  "type": "string"
                },
                "prjResourceSuffixNoDash": {
                  "type": "string"
                },
                "twoNumbers": {
                  "type": "string"
                },
                "p011_genai_team_lead_array": {
                  "type": "array"
                },
                "p011_genai_team_lead_email_array": {
                  "type": "array"
                },
                "uniqueInAIFenv": {
                  "type": "string"
                },
                "randomSalt": {
                  "type": "string"
                },
                "projectTypeESMLName": {
                  "type": "string"
                },
                "projectTypeGenAIName": {
                  "type": "string"
                },
                "aksClusterName": {
                  "type": "string"
                },
                "dataFactoryName": {
                  "type": "string"
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../types/aifactoryNaming.bicep"
                }
              }
            }
          },
          "parameters": {
            "env": {
              "type": "string",
              "allowedValues": [
                "dev",
                "test",
                "prod"
              ],
              "metadata": {
                "description": "Environment: dev, test, prod"
              }
            },
            "projectNumber": {
              "type": "string",
              "metadata": {
                "description": "Project number (e.g., \"005\")"
              }
            },
            "locationSuffix": {
              "type": "string",
              "metadata": {
                "description": "Location suffix (e.g., \"weu\", \"swc\")"
              }
            },
            "commonResourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Common resource suffix (e.g., \"-001\")"
              }
            },
            "resourceSuffix": {
              "type": "string",
              "metadata": {
                "description": "Project-specific resource suffix"
              }
            },
            "aifactorySalt10char": {
              "type": "string",
              "metadata": {
                "description": "Random salt for unique naming"
              }
            },
            "randomValue": {
              "type": "string"
            },
            "aifactorySuffixRG": {
              "type": "string",
              "metadata": {
                "description": "AI Factory suffix for resource groups"
              }
            },
            "commonRGNamePrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Common resource group name prefix"
              }
            },
            "technicalAdminsObjectID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins OID list"
              }
            },
            "technicalAdminsEmail": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "User Admins EMAIL list"
              }
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "subscriptionIdDevTestProd": {
              "type": "string"
            },
            "genaiSubnetId": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "aks2SubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "acaSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "aca2SubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "postGresAdminEmails": {
              "type": "string",
              "defaultValue": ""
            },
            "addAIFoundryHub": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Add AI Foundry Hub with random naming for debugging/testing"
              }
            }
          },
          "variables": {
            "projectName": "[format('prj{0}', parameters('projectNumber'))]",
            "cmnName": "cmn",
            "genaiName": "genai",
            "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
            "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
            "resourceSuffixPlusOne": "[format('-{0}', padLeft(string(add(int(substring(parameters('resourceSuffix'), 1, 3)), 1)), 3, '0'))]",
            "technicalAdminsObjectID_array": "[array(split(replace(parameters('technicalAdminsObjectID'), '\\s+', ''), ','))]",
            "p011_genai_team_lead_array": "[if(empty(parameters('technicalAdminsObjectID')), createArray(), union(variables('technicalAdminsObjectID_array'), createArray()))]",
            "postGresAdminEmailsLocal_array": "[array(split(replace(parameters('postGresAdminEmails'), '\\s+', ''), ','))]",
            "postGresAdminEmailsLocal": "[if(empty(parameters('postGresAdminEmails')), createArray(), union(variables('postGresAdminEmailsLocal_array'), createArray()))]",
            "technicalAdminsEmail_array": "[array(split(parameters('technicalAdminsEmail'), ','))]",
            "p011_genai_team_lead_email_array": "[if(empty(parameters('technicalAdminsEmail')), createArray(), variables('technicalAdminsEmail_array'))]",
            "randomSalt": "[if(or(empty(parameters('aifactorySalt10char')), lessOrEquals(length(parameters('aifactorySalt10char')), 5)), substring(parameters('randomValue'), 0, 10), parameters('aifactorySalt10char'))]",
            "uniqueInAIFenv": "[substring(uniqueString(subscriptionResourceId(parameters('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', parameters('commonResourceGroupName'))), 0, 5)]",
            "cleanRandomValue": "[toLower(replace(replace(variables('randomSalt'), '-', ''), '_', ''))]",
            "aifRandom": "[take(variables('cleanRandomValue'), 2)]",
            "aifWithRandom": "[take(format('aif-hub-{0}-{1}-{2}-{3}{4}{5}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('aifRandom'), parameters('resourceSuffix')), 64)]",
            "aifV1HubName": "[if(parameters('addAIFoundryHub'), variables('aifWithRandom'), format('aif-hub-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix')))]",
            "aifV1ProjectName": "[format('aif-p-{0}-1-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "aifV2Name": "[take(replace(toLower(format('aif2{0}{1}', variables('uniqueInAIFenv'), variables('randomSalt'))), '-', ''), 12)]",
            "aifV2PrjName": "[take(replace(toLower(format('aif2p{0}{1}', variables('uniqueInAIFenv'), variables('randomSalt'))), '-', ''), 12)]",
            "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "safeNameAISearch": "[take(replace(toLower(format('aisearch{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', ''), 64)]",
            "aiServicesName": "[take(replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', ''), 64)]",
            "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "applicationInsightName2": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('resourceSuffixPlusOne'))]",
            "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
            "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('twoNumbers'))]",
            "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
            "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
            "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
            "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
            "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
            "segments": "[split(parameters('genaiSubnetId'), '/')]",
            "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
            "defaultSubnet": "[variables('genaiSubnetName')]",
            "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
            "segmentsAKS2": "[split(parameters('aks2SubnetId'), '/')]",
            "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
            "aks2SubnetName": "[variables('segmentsAKS2')[sub(length(variables('segmentsAKS2')), 1)]]",
            "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
            "segmentsACA2": "[split(parameters('aca2SubnetId'), '/')]",
            "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]",
            "aca2SubnetName": "[variables('segmentsACA2')[sub(length(variables('segmentsACA2')), 1)]]",
            "adfName": "[format('adf-{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]"
          },
          "resources": {
            "commonResourceGroupRef": {
              "existing": true,
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2024-07-01",
              "subscriptionId": "[parameters('subscriptionIdDevTestProd')]",
              "name": "[parameters('commonResourceGroupName')]"
            }
          },
          "outputs": {
            "genaiSubnetName": {
              "type": "string",
              "value": "[variables('genaiSubnetName')]"
            },
            "aksSubnetName": {
              "type": "string",
              "value": "[variables('aksSubnetName')]"
            },
            "aks2SubnetName": {
              "type": "string",
              "value": "[variables('aks2SubnetName')]"
            },
            "acaSubnetName": {
              "type": "string",
              "value": "[variables('acaSubnetName')]"
            },
            "aca2SubnetName": {
              "type": "string",
              "value": "[variables('aca2SubnetName')]"
            },
            "defaultSubnet": {
              "type": "string",
              "value": "[variables('defaultSubnet')]"
            },
            "aoaiName": {
              "type": "string",
              "value": "[variables('aoaiName')]"
            },
            "amlName": {
              "type": "string",
              "value": "[variables('amlName')]"
            },
            "safeNameAISearch": {
              "type": "string",
              "value": "[variables('safeNameAISearch')]"
            },
            "aiServicesName": {
              "type": "string",
              "value": "[variables('aiServicesName')]"
            },
            "dashboardInsightsName": {
              "type": "string",
              "value": "[variables('dashboardInsightsName')]"
            },
            "applicationInsightName": {
              "type": "string",
              "value": "[variables('applicationInsightName')]"
            },
            "applicationInsightName2": {
              "type": "string",
              "value": "[variables('applicationInsightName2')]"
            },
            "bingName": {
              "type": "string",
              "value": "[variables('bingName')]"
            },
            "containerAppsEnvName": {
              "type": "string",
              "value": "[variables('containerAppsEnvName')]"
            },
            "containerAppAName": {
              "type": "string",
              "value": "[variables('containerAppAName')]"
            },
            "containerAppWName": {
              "type": "string",
              "value": "[variables('containerAppWName')]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[variables('cosmosDBName')]"
            },
            "redisName": {
              "type": "string",
              "value": "[variables('redisName')]"
            },
            "postgreSQLName": {
              "type": "string",
              "value": "[variables('postgreSQLName')]"
            },
            "sqlServerName": {
              "type": "string",
              "value": "[variables('sqlServerName')]"
            },
            "sqlDBName": {
              "type": "string",
              "value": "[variables('sqlDBName')]"
            },
            "functionAppName": {
              "type": "string",
              "value": "[variables('functionAppName')]"
            },
            "webAppName": {
              "type": "string",
              "value": "[variables('webAppName')]"
            },
            "funcAppServicePlanName": {
              "type": "string",
              "value": "[variables('funcAppServicePlanName')]"
            },
            "webbAppServicePlanName": {
              "type": "string",
              "value": "[variables('webbAppServicePlanName')]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('vmName')]"
            },
            "aifV1HubName": {
              "type": "string",
              "value": "[variables('aifV1HubName')]"
            },
            "aifV1ProjectName": {
              "type": "string",
              "value": "[variables('aifV1ProjectName')]"
            },
            "aifV2Name": {
              "type": "string",
              "value": "[variables('aifV2Name')]"
            },
            "aifV2PrjName": {
              "type": "string",
              "value": "[variables('aifV2PrjName')]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[variables('keyvaultName')]"
            },
            "storageAccount1001Name": {
              "type": "string",
              "value": "[variables('storageAccount1001Name')]"
            },
            "storageAccount2001Name": {
              "type": "string",
              "value": "[variables('storageAccount2001Name')]"
            },
            "acrProjectName": {
              "type": "string",
              "value": "[variables('acrProjectName')]"
            },
            "acrCommonName": {
              "type": "string",
              "value": "[variables('acrCommonName')]"
            },
            "miACAName": {
              "type": "string",
              "value": "[variables('miACAName')]"
            },
            "miPrjName": {
              "type": "string",
              "value": "[variables('miPrjName')]"
            },
            "laWorkspaceName": {
              "type": "string",
              "value": "[variables('laWorkspaceName')]"
            },
            "projectName": {
              "type": "string",
              "value": "[variables('projectName')]"
            },
            "cmnName": {
              "type": "string",
              "value": "[variables('cmnName')]"
            },
            "kvNameCommon": {
              "type": "string",
              "value": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
            },
            "genaiName": {
              "type": "string",
              "value": "[variables('genaiName')]"
            },
            "prjResourceSuffixNoDash": {
              "type": "string",
              "value": "[variables('prjResourceSuffixNoDash')]"
            },
            "twoNumbers": {
              "type": "string",
              "value": "[variables('twoNumbers')]"
            },
            "p011_genai_team_lead_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_array')]"
            },
            "postGresAdminEmails": {
              "type": "array",
              "value": "[variables('postGresAdminEmailsLocal')]"
            },
            "p011_genai_team_lead_email_array": {
              "type": "array",
              "value": "[variables('p011_genai_team_lead_email_array')]"
            },
            "uniqueInAIFenv": {
              "type": "string",
              "value": "[variables('uniqueInAIFenv')]"
            },
            "randomSalt": {
              "type": "string",
              "value": "[variables('randomSalt')]"
            },
            "projectTypeESMLName": {
              "type": "string",
              "value": "esml"
            },
            "projectTypeGenAIName": {
              "type": "string",
              "value": "genai"
            },
            "aksClusterName": {
              "type": "string",
              "value": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]"
            },
            "dataFactoryName": {
              "type": "string",
              "value": "[variables('adfName')]"
            },
            "namingConvention": {
              "$ref": "#/definitions/aifactoryNamingType",
              "value": {
                "genaiSubnetName": "[variables('genaiSubnetName')]",
                "aksSubnetName": "[variables('aksSubnetName')]",
                "aks2SubnetName": "[variables('aks2SubnetName')]",
                "acaSubnetName": "[variables('acaSubnetName')]",
                "aca2SubnetName": "[variables('aca2SubnetName')]",
                "defaultSubnet": "[variables('defaultSubnet')]",
                "aifV1HubName": "[variables('aifV1HubName')]",
                "aifV1ProjectName": "[variables('aifV1ProjectName')]",
                "aifV2Name": "[variables('aifV2Name')]",
                "aifV2PrjName": "[variables('aifV2PrjName')]",
                "aoaiName": "[variables('aoaiName')]",
                "amlName": "[variables('amlName')]",
                "safeNameAISearch": "[variables('safeNameAISearch')]",
                "aiServicesName": "[variables('aiServicesName')]",
                "dashboardInsightsName": "[variables('dashboardInsightsName')]",
                "applicationInsightName": "[variables('applicationInsightName')]",
                "applicationInsightName2": "[variables('applicationInsightName2')]",
                "bingName": "[variables('bingName')]",
                "containerAppsEnvName": "[variables('containerAppsEnvName')]",
                "containerAppAName": "[variables('containerAppAName')]",
                "containerAppWName": "[variables('containerAppWName')]",
                "cosmosDBName": "[variables('cosmosDBName')]",
                "redisName": "[variables('redisName')]",
                "postgreSQLName": "[variables('postgreSQLName')]",
                "sqlServerName": "[variables('sqlServerName')]",
                "sqlDBName": "[variables('sqlDBName')]",
                "functionAppName": "[variables('functionAppName')]",
                "webAppName": "[variables('webAppName')]",
                "funcAppServicePlanName": "[variables('funcAppServicePlanName')]",
                "webbAppServicePlanName": "[variables('webbAppServicePlanName')]",
                "vmName": "[variables('vmName')]",
                "keyvaultName": "[variables('keyvaultName')]",
                "storageAccount1001Name": "[variables('storageAccount1001Name')]",
                "storageAccount2001Name": "[variables('storageAccount2001Name')]",
                "acrProjectName": "[variables('acrProjectName')]",
                "acrCommonName": "[variables('acrCommonName')]",
                "miACAName": "[variables('miACAName')]",
                "miPrjName": "[variables('miPrjName')]",
                "laWorkspaceName": "[variables('laWorkspaceName')]",
                "projectName": "[variables('projectName')]",
                "cmnName": "[variables('cmnName')]",
                "kvNameCommon": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
                "genaiName": "[variables('genaiName')]",
                "prjResourceSuffixNoDash": "[variables('prjResourceSuffixNoDash')]",
                "twoNumbers": "[variables('twoNumbers')]",
                "p011_genai_team_lead_array": "[variables('p011_genai_team_lead_array')]",
                "p011_genai_team_lead_email_array": "[variables('p011_genai_team_lead_email_array')]",
                "uniqueInAIFenv": "[variables('uniqueInAIFenv')]",
                "randomSalt": "[variables('randomSalt')]",
                "projectTypeESMLName": "esml",
                "projectTypeGenAIName": "genai",
                "aksClusterName": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "dataFactoryName": "[variables('adfName')]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privDnsResourceGroupName": {
            "value": "[variables('privDnsResourceGroupName')]"
          },
          "privDnsSubscription": {
            "value": "[variables('privDnsSubscription')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13811377964307861425"
            }
          },
          "parameters": {
            "privDnsSubscription": {
              "type": "string"
            },
            "privDnsResourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "variables": {
            "privateDnsZoneName": {
              "azureusgovernment": "privatelink.api.ml.azure.us",
              "azurechinacloud": "privatelink.api.ml.azure.cn",
              "azurecloud": "privatelink.api.azureml.ms"
            },
            "privateAznbDnsZoneName": {
              "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
              "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
              "azurecloud": "privatelink.notebooks.azure.net"
            },
            "privateLinksDnsZones": {
              "blob": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
              },
              "file": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.file.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
              },
              "dfs": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]"
              },
              "queue": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.queue.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.queue.{0}', environment().suffixes.storage)]"
              },
              "table": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.table.{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), environment().suffixes.storage)]",
                "name": "[format('privatelink.table.{0}', environment().suffixes.storage)]"
              },
              "registry": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azurecr.io"
              },
              "registryregion": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}.data.privatelink.azurecr.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), parameters('location'))]",
                "name": "[format('{0}.data.privatelink.azurecr.io', parameters('location'))]"
              },
              "vault": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.vaultcore.azure.net"
              },
              "amlworkspace": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), variables('privateDnsZoneName')[toLower(environment().name)])]",
                "name": "[variables('privateDnsZoneName')[toLower(environment().name)]]"
              },
              "notebooks": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), variables('privateAznbDnsZoneName')[toLower(environment().name)])]",
                "name": "[variables('privateAznbDnsZoneName')[toLower(environment().name)]]"
              },
              "dataFactory": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.datafactory.azure.net"
              },
              "portal": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.adf.azure.com"
              },
              "openai": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.openai.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.openai.azure.com"
              },
              "searchService": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.search.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.search.windows.net"
              },
              "azurewebapps": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurewebsites.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azurewebsites.net"
              },
              "cosmosdbnosql": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.documents.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.documents.azure.com"
              },
              "cognitiveservices": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.cognitiveservices.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.cognitiveservices.azure.com"
              },
              "azuredatabricks": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.azuredatabricks.net"
              },
              "namespace": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.servicebus.windows.net"
              },
              "azureeventgrid": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.eventgrid.azure.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.eventgrid.azure.net"
              },
              "azuremonitor": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.monitor.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.monitor.azure.com"
              },
              "azuremonitoroms": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.oms.opinsights.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.oms.opinsights.azure.com"
              },
              "azuremonitorods": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.ods.opinsights.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.ods.opinsights.azure.com"
              },
              "azuremonitoragentsvc": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.agentsvc.azure-automation.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.agentsvc.azure-automation.net"
              },
              "servicesai": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.services.ai.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.services.ai.azure.com"
              },
              "azurecontainerapps": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.{2}.azurecontainerapps.io', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'), parameters('location'))]",
                "name": "[format('privatelink.{0}.azurecontainerapps.io', parameters('location'))]"
              },
              "redis": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.redis.cache.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.redis.cache.windows.net"
              },
              "postgres": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.postgres.database.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.postgres.database.azure.com"
              },
              "sql": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.database.windows.net"
              },
              "cosmosdbmongo": {
                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.mongo.cosmos.azure.com', parameters('privDnsSubscription'), parameters('privDnsResourceGroupName'))]",
                "name": "privatelink.mongo.cosmos.azure.com"
              }
            }
          },
          "resources": [],
          "outputs": {
            "privateLinksDnsZones": {
              "type": "object",
              "value": "[variables('privateLinksDnsZones')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miPrjName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1018302119329499090"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity name"
              }
            }
          },
          "resources": [],
          "outputs": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "Client ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').clientId]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the managed identity"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Managed identity name"
              },
              "value": "[parameters('managedIdentityName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.miACAName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1018302119329499090"
            }
          },
          "parameters": {
            "managedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "Managed Identity name"
              }
            }
          },
          "resources": [],
          "outputs": {
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "Client ID of the managed identity"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2024-11-30').clientId]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the managed identity"
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Managed identity name"
              },
              "value": "[parameters('managedIdentityName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-AppInsightsSWC4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "logWorkspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value]"
          },
          "logWorkspaceNameRG": {
            "value": "[variables('commonResourceGroup')]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8353361888659384685"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the application insight resources"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the application insights resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location where application insights should be deployed"
              }
            },
            "logWorkspaceName": {
              "type": "string"
            },
            "logWorkspaceNameRG": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceNameRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]"
              }
            }
          ],
          "outputs": {
            "ainsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('storageAccount1001Exists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-AMLGenAISto1{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "skuName": {
            "value": "[parameters('storageAccountSkuName')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "blobPrivateEndpointName": {
            "value": "[format('{0}-blob-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value)]"
          },
          "filePrivateEndpointName": {
            "value": "[format('{0}-file-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value)]"
          },
          "queuePrivateEndpointName": {
            "value": "[format('{0}-queue-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value)]"
          },
          "tablePrivateEndpointName": {
            "value": "[format('{0}-table-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value)]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "containers": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "files": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "vnetRules": {
            "value": [
              "[parameters('genaiSubnetId')]",
              "[parameters('aksSubnetId')]"
            ]
          },
          "ipRules": "[if(empty(variables('processedIpRulesSa')), createObject('value', createArray()), createObject('value', variables('processedIpRulesSa')))]",
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "*"
                ],
                "allowedMethods": [
                  "GET",
                  "OPTIONS",
                  "POST",
                  "PUT"
                ],
                "maxAgeInSeconds": 200,
                "exposedHeaders": [
                  "*"
                ],
                "allowedHeaders": [
                  "*"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12405802681587269080"
            }
          },
          "definitions": {
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new storage account"
              }
            },
            "blobPrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies name of the blob private endpoint"
              }
            },
            "filePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the file service private endpoint"
              }
            },
            "queuePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the queue service private endpoint"
              }
            },
            "tablePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the table service private endpoint"
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "files": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Specifies the name of the storage account SKU"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the id of the subnet used for the private endpoints"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the storage acocunt resources"
              }
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "action": "Allow",
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]"
                }
              }
            ],
            "groupIds": [
              {
                "name": "[parameters('blobPrivateEndpointName')]",
                "gid": "blob"
              },
              {
                "name": "[parameters('filePrivateEndpointName')]",
                "gid": "file"
              },
              {
                "name": "[parameters('queuePrivateEndpointName')]",
                "gid": "queue"
              },
              {
                "name": "[parameters('tablePrivateEndpointName')]",
                "gid": "table"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), createObject('type', 'SystemAssigned'))]"
          },
          "resources": {
            "sacc2::blobServices::container": {
              "copy": {
                "name": "sacc2::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "sacc2::blobServices"
              ]
            },
            "sacc2::blobServices": {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc2"
              ]
            },
            "sacc2::fileServices": {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc2"
              ]
            },
            "sacc::blobServices::container": {
              "copy": {
                "name": "sacc::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "sacc::blobServices"
              ]
            },
            "sacc::blobServices": {
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc"
              ]
            },
            "sacc::fileServices": {
              "condition": "[and(not(parameters('enablePublicGenAIAccess')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2025-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "sacc"
              ]
            },
            "vnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[parameters('vnetName')]"
            },
            "subnet": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]"
            },
            "sacc2": {
              "condition": "[or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": true,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(and(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), createObject('bypass', 'AzureServices', 'defaultAction', 'Allow', 'virtualNetworkRules', variables('rules'), 'ipRules', createArray()), if(and(not(parameters('enablePublicAccessWithPerimeter')), parameters('enablePublicGenAIAccess')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), if(or(or(parameters('enablePublicGenAIAccess'), not(empty(parameters('ipRules')))), not(empty(parameters('vnetRules')))), createObject('bypass', 'AzureServices', 'defaultAction', if(and(and(parameters('enablePublicGenAIAccess'), empty(parameters('ipRules'))), empty(parameters('vnetRules'))), 'Allow', 'Deny'), 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), null())))]"
              }
            },
            "sacc": {
              "condition": "[not(parameters('enablePublicGenAIAccess'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "identity": "[variables('identity')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": false,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": "[variables('rules')]",
                  "ipRules": "[if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))]"
                }
              }
            },
            "pendSaccBlob": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('blobPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('blobPrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('blobPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccFile": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('filePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('filePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('filePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "file"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccQ": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('queuePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('queuePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('queuePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "queue"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            },
            "pendSaccTable": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('tablePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('tablePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('tablePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "table"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "sacc",
                "sacc2"
              ]
            }
          },
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), parameters('storageAccountName'), parameters('storageAccountName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('blobPrivateEndpointName')]",
                  "type": "blob",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('filePrivateEndpointName')]",
                  "type": "file",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('queuePrivateEndpointName')]",
                  "type": "queue",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('tablePrivateEndpointName')]",
                  "type": "table",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('keyvaultExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "enablePurgeProtection": {
            "value": "[parameters('keyvaultEnablePurgeProtection')]"
          },
          "soft_delete_days": {
            "value": "[parameters('keyvaultSoftDeleteDays')]"
          },
          "tenantIdentity": {
            "value": "[tenant().tenantId]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "privateEndpointName": {
            "value": "[format('{0}-pend', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value)]"
          },
          "keyvaultNetworkPolicySubnets": {
            "value": "[flatten(createArray(createArray(parameters('genaiSubnetId'), parameters('aksSubnetId')), if(not(empty(parameters('dbxPubSubnetName'))), createArray(variables('databricksPublicSubnetResourceId')), createArray())))]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesKv')), createObject('value', createArray()), createObject('value', variables('processedIpRulesKv')))]",
          "secrets": "[if(parameters('deploySampleApp'), createObject('value', createArray(createObject('name', parameters('authClientSecretName'), 'value', coalesce(parameters('authClientSecret'), '')))), createObject('value', createArray()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9012073299363724641"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the keyvault that is created"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with keyvault resources"
              }
            },
            "tenantIdentity": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the tenant which the keyvault belongs to"
              }
            },
            "keyvaultNetworkPolicySubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an object containing network policies"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of objects containing ip rules"
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of secrets to be created in the Key Vault"
              }
            },
            "soft_delete_days": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location"
              }
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('keyvaultNetworkPolicySubnets'))]",
                "input": {
                  "id": "[parameters('keyvaultNetworkPolicySubnets')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2024-11-01",
              "name": "[parameters('keyvaultName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": true,
                "enabledForDiskEncryption": false,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": "[if(parameters('enablePurgeProtection'), parameters('soft_delete_days'), null())]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "publicNetworkAccess": "[if(or(and(parameters('enablePublicGenAIAccess'), not(empty(parameters('ipRules')))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "tenantId": "[parameters('tenantIdentity')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccessWithPerimeter'), 'Allow', 'Deny'), 'ipRules', parameters('ipRules'), 'virtualNetworkRules', variables('rules')), null())]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "copy": {
                "name": "keyVaultSecrets",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('secrets')[copyIndex()].name)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].value]",
                "contentType": "[if(contains(parameters('secrets')[copyIndex()], 'contentType'), parameters('secrets')[copyIndex()].contentType, 'text/plain')]",
                "attributes": "[if(contains(parameters('secrets')[copyIndex()], 'attributes'), parameters('secrets')[copyIndex()].attributes, createObject('enabled', true()))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                      "groupIds": [
                        "vault"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2024-11-01').vaultUri]"
            },
            "secretsCreated": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('secrets'))]",
                "input": {
                  "name": "[parameters('secrets')[copyIndex()].name]",
                  "resourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyvaultName'), parameters('secrets')[copyIndex()].name)]"
                }
              }
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "vault",
                  "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('acrProjectExists')), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.acrProjectName.value]"
          },
          "skuName": {
            "value": "[parameters('containerRegistrySkuName')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}{1}-containerreg-to-vnt-mlcmn', variables('projectName'), parameters('locationSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "allowPublicAccessWhenBehindVnet": {
            "value": "[parameters('allowPublicAccessWhenBehindVnet')]"
          },
          "ipRules": {
            "value": "[variables('processedIpRules')]"
          },
          "existingIpRules": {
            "value": []
          },
          "adminUserEnabled": {
            "value": "[parameters('acr_adminUserEnabled')]"
          },
          "dedicatedDataPoint": {
            "value": "[parameters('acr_dedicated')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14760487380957919015"
            }
          },
          "parameters": {
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Premium",
                "Standard",
                "Basic"
              ],
              "metadata": {
                "description": "(Optional) Specifies the Azure container registry service tier name, defaults to premium because of the private endpoints association"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the Azure container registry that will be deployed"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with azure container registry resources"
              }
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "dedicatedDataPoint": {
              "type": "bool",
              "defaultValue": true
            },
            "zoneRedundancy": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "existingIpRules": {
              "type": "array",
              "defaultValue": []
            },
            "exportEnabled": {
              "type": "string",
              "defaultValue": "disabled"
            },
            "retentionDays": {
              "type": "int",
              "defaultValue": 7
            }
          },
          "variables": {
            "policyOn": "disabled",
            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]",
            "allIpRules": "[union(parameters('existingIpRules'), parameters('ipRules'))]",
            "normalizedIpRules": "[map(variables('allIpRules'), lambda('rule', createObject('value', if(contains(lambdaVariables('rule').value, '/'), lambdaVariables('rule').value, format('{0}/32', lambdaVariables('rule').value)), 'action', lambdaVariables('rule').action)))]",
            "uniqueIpRulesMap": "[reduce(variables('normalizedIpRules'), createObject(), lambda('acc', 'rule', union(lambdaVariables('acc'), createObject(format('{0}', lambdaVariables('rule').value), lambdaVariables('rule')))))]",
            "uniqueIpRules": "[map(items(variables('uniqueIpRulesMap')), lambda('item', lambdaVariables('item').value))]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2025-04-01",
              "name": "[variables('containerRegistryNameCleaned')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'ipRules', variables('uniqueIpRules')), null())]",
                "dataEndpointEnabled": "[parameters('dedicatedDataPoint')]",
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[variables('policyOn')]"
                  },
                  "retentionPolicy": {
                    "status": "[variables('policyOn')]",
                    "days": "[parameters('retentionDays')]"
                  },
                  "trustPolicy": {
                    "status": "[variables('policyOn')]",
                    "type": "Notary"
                  },
                  "exportPolicy": {
                    "status": "[parameters('exportEnabled')]"
                  }
                },
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('allowPublicAccessWhenBehindVnet')), 'Enabled', 'Disabled')]",
                "zoneRedundancy": "[parameters('zoneRedundancy')]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                      "groupIds": [
                        "registry"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryNameCleaned')]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned')), '2025-04-01').loginServer]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "registry",
                  "id": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[parameters('useCommonACR')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-getACRIpRules-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('acrCommonName_Static')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11352461785035577776"
            }
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Gets the existing IP rules from a container registry"
              }
            }
          },
          "resources": [],
          "outputs": {
            "ipRules": {
              "type": "array",
              "value": "[coalesce(tryGet(tryGet(reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2024-11-01-preview'), 'networkRuleSet'), 'ipRules'), createArray())]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('useCommonACR'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('acrCommonName_Static')]"
          },
          "skuName": {
            "value": "[parameters('containerRegistrySkuName')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('commonSubnetName')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-acr-cmn{0}-containerreg-to-vnt-mlcmn', parameters('locationSuffix'))]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "allowPublicAccessWhenBehindVnet": {
            "value": "[parameters('allowPublicAccessWhenBehindVnet')]"
          },
          "ipRules": {
            "value": "[variables('processedIpRules')]"
          },
          "existingIpRules": "[if(parameters('useCommonACR'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACRIpRules-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.ipRules.value), createObject('value', createArray()))]",
          "adminUserEnabled": {
            "value": "[parameters('acr_adminUserEnabled')]"
          },
          "dedicatedDataPoint": {
            "value": "[parameters('acr_dedicated')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14760487380957919015"
            }
          },
          "parameters": {
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Premium",
                "Standard",
                "Basic"
              ],
              "metadata": {
                "description": "(Optional) Specifies the Azure container registry service tier name, defaults to premium because of the private endpoints association"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the Azure container registry that will be deployed"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with azure container registry resources"
              }
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "dedicatedDataPoint": {
              "type": "bool",
              "defaultValue": true
            },
            "zoneRedundancy": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "existingIpRules": {
              "type": "array",
              "defaultValue": []
            },
            "exportEnabled": {
              "type": "string",
              "defaultValue": "disabled"
            },
            "retentionDays": {
              "type": "int",
              "defaultValue": 7
            }
          },
          "variables": {
            "policyOn": "disabled",
            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]",
            "allIpRules": "[union(parameters('existingIpRules'), parameters('ipRules'))]",
            "normalizedIpRules": "[map(variables('allIpRules'), lambda('rule', createObject('value', if(contains(lambdaVariables('rule').value, '/'), lambdaVariables('rule').value, format('{0}/32', lambdaVariables('rule').value)), 'action', lambdaVariables('rule').action)))]",
            "uniqueIpRulesMap": "[reduce(variables('normalizedIpRules'), createObject(), lambda('acc', 'rule', union(lambdaVariables('acc'), createObject(format('{0}', lambdaVariables('rule').value), lambdaVariables('rule')))))]",
            "uniqueIpRules": "[map(items(variables('uniqueIpRulesMap')), lambda('item', lambdaVariables('item').value))]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2025-04-01",
              "name": "[variables('containerRegistryNameCleaned')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'ipRules', variables('uniqueIpRules')), null())]",
                "dataEndpointEnabled": "[parameters('dedicatedDataPoint')]",
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[variables('policyOn')]"
                  },
                  "retentionPolicy": {
                    "status": "[variables('policyOn')]",
                    "days": "[parameters('retentionDays')]"
                  },
                  "trustPolicy": {
                    "status": "[variables('policyOn')]",
                    "type": "Notary"
                  },
                  "exportPolicy": {
                    "status": "[parameters('exportEnabled')]"
                  }
                },
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('allowPublicAccessWhenBehindVnet')), 'Enabled', 'Disabled')]",
                "zoneRedundancy": "[parameters('zoneRedundancy')]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                      "groupIds": [
                        "registry"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryNameCleaned')]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned')), '2025-04-01').loginServer]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "registry",
                  "id": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACRIpRules-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(parameters('useCommonACR'), not(parameters('miACAExists')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-miRbacCmnACR-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', variables('acrCommonName_Static')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.acrProjectName.value))]",
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9695838888413653767"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(deployment().name, parameters('containerRegistryName'), parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(parameters('useCommonACR'), not(parameters('miPrjExists')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-miPrjRbacCmnACR-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', variables('acrCommonName_Static')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.acrProjectName.value))]",
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9695838888413653767"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(deployment().name, parameters('containerRegistryName'), parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('vmExists')), equals(parameters('enableProjectVM'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-privVM4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "hybridBenefit": {
            "value": "[parameters('hybridBenefit')]"
          },
          "vmSize": {
            "value": "[parameters('vmSKU')[parameters('vmSKUSelectedArrayIndex')]]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.vmName.value]"
          },
          "subnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.defaultSubnet.value]"
          },
          "vnetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('vnetNameFull'))]"
          },
          "tags": {
            "value": "[parameters('tagsProject')]"
          },
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "149838002065094260"
            }
          },
          "parameters": {
            "kvSecretNameSuffix": {
              "type": "string",
              "defaultValue": "-001",
              "metadata": {
                "description": "default is -001 such as esml-dsvm-username-001 as secret name in keyvault Ex: creating multipe VM -001, -002,-003"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Specifies a secure string used as password new local admin user"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the local admin user"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2_v3",
              "metadata": {
                "description": "Size of the virtual machine."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "location for all resources"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual machine"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet that the virtual machine should be connected to"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "Specift the virtual network id used for network interface"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The tags that should be applied on virtual machine resources"
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) speficies the keyvault used to save local admin credentials"
              }
            },
            "hybridBenefit": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Required) true if Hybrid benefits for Windows server VMs, else FALSE for Pay-as-you-go"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1736467877,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended for production purpose is to upgrade to Premium_LRS "
              }
            },
            "extraDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended is to upgrade to Premium_LRS for productional purpose "
              }
            },
            "extraDiskSizeGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "default is 128GB, change to bigger, 1024, GB if much local data"
              }
            }
          },
          "variables": {
            "nicName": "[format('{0}-nic-{1}', parameters('vmName'), substring(uniqueString(parameters('vmName')), 0, 5))]",
            "subnetRef": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]",
            "esmlProjectKVNameUser": "[format('esml-dsvm-username{0}', parameters('kvSecretNameSuffix'))]",
            "esmlProjectKVNamePwd": "[format('esml-dsvm-password{0}', parameters('kvSecretNameSuffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[variables('subnetRef')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2020-12-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "licenseType": "[if(equals(parameters('hybridBenefit'), true()), 'Windows_Server', 'None')]",
                "osProfile": {
                  "computerName": "[substring(parameters('vmName'), 0, 14)]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVMAgent": true,
                    "patchSettings": {
                      "enableHotpatching": false,
                      "patchMode": "AutomaticByOS"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "microsoft-dsvm",
                    "offer": "dsvm-win-2022",
                    "sku": "winserver-2022",
                    "version": "latest"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "diskSizeGB": 256,
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]"
                    }
                  },
                  "dataDisks": [
                    {
                      "diskSizeGB": "[parameters('extraDiskSizeGB')]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('extraDiskType')]"
                      },
                      "lun": 0,
                      "createOption": "Empty"
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "typeHandlerVersion": "1.0",
                "type": "AADLoginForWindows",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.DevTestLab/schedules",
              "apiVersion": "2018-09-15",
              "name": "[format('shutdown-computevm-{0}', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "dailyRecurrence": {
                  "time": "0330"
                },
                "status": "Enabled",
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "taskType": "ComputeVmShutdownTask",
                "timeZoneId": "W. Europe Standard Time"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNameUser'))]",
              "properties": {
                "value": "[parameters('adminUsername')]",
                "contentType": "ESML generated local admin",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNamePwd'))]",
              "properties": {
                "contentType": "[format('ESML generated local admin password for username {0} on VM', parameters('adminUsername'))]",
                "value": "[parameters('adminPassword')]",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('keyvaultExists')), not(empty(parameters('inputKeyvault'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-kvSecretsS2P{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spAppIDValue": "[if(and(and(not(empty(parameters('inputKeyvault'))), not(empty(parameters('inputKeyvaultResourcegroup')))), not(empty(parameters('inputKeyvaultSubscription')))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))), 'secretName', parameters('projectServicePrincipleAppID_SeedingKeyvaultName'))), createObject('value', ''))]",
          "spOIDValue": "[if(and(and(not(empty(parameters('inputKeyvault'))), not(empty(parameters('inputKeyvaultResourcegroup')))), not(empty(parameters('inputKeyvaultSubscription')))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))), 'secretName', parameters('projectServicePrincipleOID_SeedingKeyvaultName'))), createObject('value', ''))]",
          "spSecretValue": "[if(and(and(not(empty(parameters('inputKeyvault'))), not(empty(parameters('inputKeyvaultResourcegroup')))), not(empty(parameters('inputKeyvaultSubscription')))), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))), 'secretName', parameters('projectServicePrincipleSecret_SeedingKeyvaultName'))), createObject('value', ''))]",
          "keyvaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "keyvaultNameRG": {
            "value": "[variables('targetResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14583456087252879127"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": " KEYVAULT for ESML coreteam or PROJECT team"
              }
            },
            "keyvaultNameRG": {
              "type": "string"
            },
            "spIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-id",
              "metadata": {
                "description": "secret name of App ID for service principle"
              }
            },
            "spAppIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ID"
              }
            },
            "spSecret": {
              "type": "string",
              "defaultValue": "esml-project-sp-secret",
              "metadata": {
                "description": "secret name of for service principle App ID"
              }
            },
            "spSecretValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle secret"
              }
            },
            "esmlTenantID": {
              "type": "string",
              "defaultValue": "esml-tenant-id",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlTenantIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlSubscriptionID": {
              "type": "string",
              "defaultValue": "esml-subscription-id",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "esmlSubscriptionIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1799626400,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "spOIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-oid",
              "metadata": {
                "description": "secret name of Object ID for service principle"
              }
            },
            "spOIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ObjectID"
              }
            }
          },
          "variables": {
            "esml_project_dbx_token_key": "esml-project-dbx-token"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esml_project_dbx_token_key'))]",
              "properties": {
                "value": "TODO Databricks token",
                "contentType": "ESML generated. TODO:Databricks token - needed for Azure ML pipelines with DatabricksSteps",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spIDKey'))]",
              "properties": {
                "value": "[parameters('spAppIDValue')]",
                "contentType": "Application ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spSecret'))]",
              "properties": {
                "value": "[parameters('spSecretValue')]",
                "contentType": "ESML generated. From seeding keyvalt (esml-project-sp-secret). Project specific service principle secret",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spOIDKey'))]",
              "properties": {
                "value": "[parameters('spOIDValue')]",
                "contentType": "OBJECT ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlTenantID'))]",
              "properties": {
                "value": "[parameters('esmlTenantIDSecret')]",
                "contentType": "ESML generated - tenant ID",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlSubscriptionID'))]",
              "properties": {
                "value": "[parameters('esmlSubscriptionIDSecret')]",
                "contentType": "ESML generated - Subscription ID for current ESML environment",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('keyvaultExists')), not(empty(parameters('technicalContactId'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-kvRbacPrj{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "userObjectIds": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.p011_genai_team_lead_array.value]"
          },
          "servicePrincipalIds": {
            "value": []
          },
          "managedIdentityIds": {
            "value": "[union(array(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.principalId.value), array(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.principalId.value))]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "keyVaultSecretsOfficerRoleId": {
            "value": "[variables('keyVaultSecretsOfficerRoleId')]"
          },
          "keyVaultSecretsUserRoleId": {
            "value": "[variables('keyVaultSecretsUserRoleId')]"
          },
          "keyVaultContributorRoleId": {
            "value": "[variables('keyVaultContributorRoleId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11318105128575366960"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "userObjectIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of user object IDs"
              }
            },
            "servicePrincipalIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of service principal object IDs"
              }
            },
            "managedIdentityIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of managed identity object IDs"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether user principals are Azure AD Groups"
              }
            },
            "keyVaultAdministratorRoleId": {
              "type": "string",
              "defaultValue": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
              "metadata": {
                "description": "Key Vault Administrator role ID - Full access"
              }
            },
            "keyVaultSecretsOfficerRoleId": {
              "type": "string",
              "defaultValue": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
              "metadata": {
                "description": "Key Vault Secrets Officer role ID - Manage secrets"
              }
            },
            "keyVaultSecretsUserRoleId": {
              "type": "string",
              "defaultValue": "4633458b-17de-408a-b874-0445c86b69e6",
              "metadata": {
                "description": "Key Vault Secrets User role ID - Read secrets"
              }
            },
            "keyVaultContributorRoleId": {
              "type": "string",
              "defaultValue": "f25e0fa2-a7c8-4377-a976-54943a77a395",
              "metadata": {
                "description": "Key Vault Contributor role ID - Management operations"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "keyVaultSecretsUserAssignments",
                "count": "[length(parameters('userObjectIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('userObjectIds')[copyIndex()], parameters('keyVaultSecretsUserRoleId'), string(copyIndex()))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultSecretsUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]"
              }
            },
            {
              "copy": {
                "name": "keyVaultSecretsOfficerSpAssignments",
                "count": "[length(parameters('servicePrincipalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('servicePrincipalIds')[copyIndex()], parameters('keyVaultSecretsOfficerRoleId'), string(copyIndex()))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultSecretsOfficerRoleId'))]",
                "principalId": "[parameters('servicePrincipalIds')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "copy": {
                "name": "keyVaultSecretsOfficerMiAssignments",
                "count": "[length(parameters('managedIdentityIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('managedIdentityIds')[copyIndex()], parameters('keyVaultSecretsOfficerRoleId'), string(copyIndex()))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultSecretsOfficerRoleId'))]",
                "principalId": "[parameters('managedIdentityIds')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "rbacAssignmentsCompleted": {
              "type": "bool",
              "metadata": {
                "description": "Key Vault RBAC assignments completed successfully"
              },
              "value": true
            },
            "roleAssignmentsCount": {
              "type": "int",
              "metadata": {
                "description": "Number of role assignments created"
              },
              "value": "[add(add(length(parameters('userObjectIds')), length(parameters('servicePrincipalIds'))), length(parameters('managedIdentityIds')))]"
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "Key Vault resource ID"
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-kvSecretsS2P{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getACAMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrMI-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('technicalContactId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-kvSecretsGL{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          "keyVaultResourceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.kvNameCommon.value]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalPrincipalIds": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.p011_genai_team_lead_array.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9759440112803558548"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(and(not(empty(parameters('inputKeyvault'))), not(empty(parameters('inputKeyvaultResourcegroup')))), not(empty(parameters('inputKeyvaultSubscription'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-spGetList{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": {
              "secrets": [
                "get"
              ]
            }
          },
          "keyVaultResourceName": {
            "value": "[variables('kvCommonName_Static')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          },
          "additionalPrincipalIds": {
            "value": []
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9759440112803558548"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2024-11-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[and(not(parameters('storageAccount1001Exists')), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-corePrivDnsSA{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": "[if(not(parameters('storageAccount1001Exists')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenAISto1{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value), createObject('value', createArray()))]",
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenAISto1{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('keyvaultExists')), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-corePrivDnsKV{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": "[if(not(parameters('keyvaultExists')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value), createObject('value', createArray()))]",
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[and(and(not(parameters('acrProjectExists')), not(parameters('centralDnsZoneByPolicyInHub'))), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-corePrivDnsACR{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": "[if(not(parameters('acrProjectExists')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)), '2022-09-01').outputs.dnsConfig.value), createObject('value', createArray()))]",
          "privateLinksDnsZones": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.privateLinksDnsZones.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-getPrivDnsZ-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('storageAccount1001Exists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-diagStorage1001-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.storageAccount1001Name.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12555103905323571485"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Storage Account resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('storageAccountName'))]",
              "metadata": {
                "description": "Optional. Storage Account name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "StorageRead",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "StorageDelete",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "StorageDelete",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "StorageWrite",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-blob', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-table', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-queue', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[format('{0}-file', parameters('diagnosticSettingName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            },
            "blobDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-blob', parameters('diagnosticSettingName')))]"
            },
            "tableDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-table', parameters('diagnosticSettingName')))]"
            },
            "queueDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-queue', parameters('diagnosticSettingName')))]"
            },
            "fileDiagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default'), 'Microsoft.Insights/diagnosticSettings', format('{0}-file', parameters('diagnosticSettingName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenAISto1{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('keyvaultExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-diagKeyVault-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.keyvaultName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8056364860687791730"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('keyVaultName'))]",
              "metadata": {
                "description": "Optional. Key Vault name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "categoryGroup": "allLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "categoryGroup": "audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "categoryGroup": "audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[and(not(parameters('acrProjectExists')), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-diagACR-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.acrProjectName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6428103501099709709"
            }
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Registry resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('containerRegistryName'))]",
              "metadata": {
                "description": "Optional. Container Registry name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "category": "ContainerRegistryRepositoryEvents",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              },
              {
                "category": "ContainerRegistryLoginEvents",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "category": "ContainerRegistryRepositoryEvents",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "ContainerRegistryLoginEvents",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "category": "ContainerRegistryLoginEvents",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    },
    {
      "condition": "[not(parameters('applicationInsightExists'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('02-diagAppInsights-{0}', variables('deploymentProjSpecificUniqueSuffix')), 64)]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.applicationInsightName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64)), '2022-09-01').outputs.laWorkspaceName.value)]"
          },
          "diagnosticSettingLevel": {
            "value": "[parameters('diagnosticSettingLevel')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11995383729431489189"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights resource"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics workspace for diagnostics"
              }
            },
            "diagnosticSettingLevel": {
              "type": "string",
              "defaultValue": "silver",
              "allowedValues": [
                "gold",
                "silver",
                "bronze"
              ],
              "metadata": {
                "description": "Diagnostic setting level - determines metrics and logs collected"
              }
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "[format('diag-{0}', parameters('applicationInsightsName'))]",
              "metadata": {
                "description": "Optional. Application Insights name prefix for diagnostic setting"
              }
            }
          },
          "variables": {
            "goldMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeMetrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "goldLogs": [
              {
                "categoryGroup": "allLogs",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 90
                }
              }
            ],
            "silverLogs": [
              {
                "categoryGroup": "audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "bronzeLogs": [
              {
                "categoryGroup": "audit",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              }
            ],
            "selectedMetrics": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldMetrics'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverMetrics'), variables('bronzeMetrics')))]",
            "selectedLogs": "[if(equals(parameters('diagnosticSettingLevel'), 'gold'), variables('goldLogs'), if(equals(parameters('diagnosticSettingLevel'), 'silver'), variables('silverLogs'), variables('bronzeLogs')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('applicationInsightsName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": "[variables('selectedMetrics')]",
                "logs": "[variables('selectedLogs')]"
              }
            }
          ],
          "outputs": {
            "diagnosticSettingId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), 'Microsoft.Insights/diagnosticSettings', parameters('diagnosticSettingName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-AppInsightsSWC4{0}', variables('deploymentProjSpecificUniqueSuffix')), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.Resources/deployments', take(format('02-naming-{0}', variables('targetResourceGroup')), 64))]"
      ]
    }
  ],
  "outputs": {
    "keyVaultDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Key Vault deployment status"
      },
      "value": "[not(parameters('keyvaultExists'))]"
    },
    "storageAccount1001Deployed": {
      "type": "bool",
      "metadata": {
        "description": "Storage Account 1001 deployment status"
      },
      "value": "[not(parameters('storageAccount1001Exists'))]"
    },
    "containerRegistryDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Container Registry deployment status"
      },
      "value": "[and(not(parameters('acrProjectExists')), equals(parameters('useCommonACR'), false()))]"
    },
    "applicationInsightsDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Application Insights deployment status"
      },
      "value": "[not(parameters('applicationInsightExists'))]"
    },
    "virtualMachineDeployed": {
      "type": "bool",
      "metadata": {
        "description": "Virtual Machine deployment status"
      },
      "value": "[and(not(parameters('vmExists')), parameters('enableProjectVM'))]"
    }
  }
}