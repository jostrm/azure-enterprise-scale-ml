{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.37.4.10188",
      "templateHash": "17954487340721700867"
    }
  },
  "parameters": {
    "aifactoryVersionMajor": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "UPDATE AIFactory (Long Term Support branches): If you want to upgrade the AIFactory Long Term Support branches. E.g. if you go from submodule RELEASE_BRANCH_120_LTS to RELEASE_BRANCH_121_LTS your AIFactory will be upgraded to 1.21 (add new private dns zones, etc)"
      }
    },
    "aifactoryVersionMinor": {
      "type": "int",
      "defaultValue": 20
    },
    "useAdGroups": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_text_embedding_3_large": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_text_embedding_3_small": {
      "type": "bool",
      "defaultValue": false
    },
    "deployModel_text_embedding_ada_002": {
      "type": "bool",
      "defaultValue": false
    },
    "default_embedding_capacity": {
      "type": "int",
      "defaultValue": 25
    },
    "deployModel_gpt_4o_mini": {
      "type": "bool",
      "defaultValue": false
    },
    "default_gpt_capacity": {
      "type": "int",
      "defaultValue": 40
    },
    "default_model_sku": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "deployModel_gpt_4": {
      "type": "bool",
      "defaultValue": false
    },
    "modelGPT4Name": {
      "type": "string",
      "defaultValue": ""
    },
    "enableAIServices": {
      "type": "bool",
      "defaultValue": true
    },
    "enableAIFoundryHub": {
      "type": "bool",
      "defaultValue": true
    },
    "enableAISearch": {
      "type": "bool",
      "defaultValue": true
    },
    "enableAzureMachineLearning": {
      "type": "bool",
      "defaultValue": false
    },
    "aiHubExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aifProjectExists": {
      "type": "bool",
      "defaultValue": false
    },
    "openaiExists": {
      "type": "bool",
      "defaultValue": false
    },
    "amlExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiSearchExists": {
      "type": "bool",
      "defaultValue": false
    },
    "dashboardInsightsExists": {
      "type": "bool",
      "defaultValue": false
    },
    "applicationInsightExists": {
      "type": "bool",
      "defaultValue": false
    },
    "aiServicesExists": {
      "type": "bool",
      "defaultValue": false
    },
    "bingExists": {
      "type": "bool",
      "defaultValue": false
    },
    "containerAppsEnvExists": {
      "type": "bool",
      "defaultValue": false
    },
    "containerAppAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "containerAppWExists": {
      "type": "bool",
      "defaultValue": false
    },
    "cosmosDBExists": {
      "type": "bool",
      "defaultValue": false
    },
    "functionAppExists": {
      "type": "bool",
      "defaultValue": false
    },
    "webAppExists": {
      "type": "bool",
      "defaultValue": false
    },
    "funcAppServicePlanExists": {
      "type": "bool",
      "defaultValue": false
    },
    "webAppServicePlanExists": {
      "type": "bool",
      "defaultValue": false
    },
    "keyvaultExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miACAExists": {
      "type": "bool",
      "defaultValue": false
    },
    "miPrjExists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount1001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "storageAccount2001Exists": {
      "type": "bool",
      "defaultValue": false
    },
    "aifExists": {
      "type": "bool",
      "defaultValue": false
    },
    "redisExists": {
      "type": "bool",
      "defaultValue": false
    },
    "postgreSQLExists": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlServerExists": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlDBExists": {
      "type": "bool",
      "defaultValue": false
    },
    "acrProjectExists": {
      "type": "bool",
      "defaultValue": false
    },
    "vmExists": {
      "type": "bool",
      "defaultValue": false
    },
    "zoneAzurecontainerappsExists": {
      "type": "bool",
      "defaultValue": false
    },
    "zoneRedisExists": {
      "type": "bool",
      "defaultValue": false
    },
    "zonePostgresExists": {
      "type": "bool",
      "defaultValue": false
    },
    "zoneSqlExists": {
      "type": "bool",
      "defaultValue": false
    },
    "zoneMongoExists": {
      "type": "bool",
      "defaultValue": false
    },
    "bastionName": {
      "type": "string",
      "defaultValue": ""
    },
    "bastionResourceGroup": {
      "type": "string",
      "defaultValue": ""
    },
    "bastionSubscription": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameFullBastion": {
      "type": "string",
      "defaultValue": ""
    },
    "privateDnsAndVnetLinkAllGlobalLocation": {
      "type": "bool",
      "defaultValue": false
    },
    "azureMachineLearningObjectId": {
      "type": "string",
      "defaultValue": ""
    },
    "useCommonACR": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If you want to use a common Azure Container Registry, in the AI Factory COMMON resourcegroup, set this to true"
      }
    },
    "vmSKUSelectedArrayIndex": {
      "type": "int",
      "defaultValue": 2
    },
    "vmSKU": {
      "type": "array",
      "defaultValue": [
        "Standard_E2s_v3",
        "Standard_D4s_v3",
        "standard_D2as_v5"
      ]
    },
    "openAiApiVersion": {
      "type": "string",
      "defaultValue": "2024-08-01-preview",
      "metadata": {
        "description": "The API version of the OpenAI resource"
      }
    },
    "kindAOpenAI": {
      "type": "string",
      "defaultValue": "OpenAI",
      "allowedValues": [
        "AIServices",
        "OpenAI",
        "ContentSafety"
      ]
    },
    "kindContentSafety": {
      "type": "string",
      "defaultValue": "ContentSafety"
    },
    "kindAIServices": {
      "type": "string",
      "defaultValue": "AIServices"
    },
    "apiVersionOpenAI": {
      "type": "string",
      "defaultValue": "2024-08-01-preview"
    },
    "modelVersionGPT4": {
      "type": "string",
      "defaultValue": "turbo-2024-04-09"
    },
    "modelVersionEmbedding": {
      "type": "string",
      "defaultValue": "text-embedding-3-large"
    },
    "modelVersionEmbeddingVersion": {
      "type": "string",
      "defaultValue": "1"
    },
    "restore": {
      "type": "bool",
      "defaultValue": false
    },
    "keyvaultEnablePurgeProtection": {
      "type": "bool",
      "defaultValue": true
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": true
    },
    "enablePublicAccessWithPerimeter": {
      "type": "bool",
      "defaultValue": false
    },
    "aiSearchSKUSharedPrivate": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "S0",
        "S1",
        "standard",
        "standard2"
      ]
    },
    "csContentSafetySKU": {
      "type": "string",
      "defaultValue": "S0",
      "allowedValues": [
        "Free",
        "S0",
        "S1",
        "S2",
        "S3"
      ]
    },
    "csSpeechSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csVisionSKU": {
      "type": "string",
      "defaultValue": "F0"
    },
    "csDocIntelligenceSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csAIservicesSKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "csOpenAISKU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "keyvaultSoftDeleteDays": {
      "type": "int",
      "defaultValue": 90
    },
    "modelGPT4Version": {
      "type": "string",
      "defaultValue": "1106-Preview"
    },
    "serviceSettingDeployAppInsightsDashboard": {
      "type": "bool",
      "defaultValue": true
    },
    "serviceSettingDeployBingSearch": {
      "type": "bool",
      "defaultValue": false
    },
    "bingSearchSKU": {
      "type": "string",
      "defaultValue": "G1"
    },
    "serviceSettingDeployAIDocIntelligence": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting: Deploy Azure AI Document Intelligence for project"
      }
    },
    "serviceSettingDeployAzureSpeech": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting: Deploy Azure Speech for project"
      }
    },
    "serviceSettingDeployProjectVM": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting: Deploy VM for project"
      }
    },
    "serviceSettingDeployPostgreSQL": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting:Deploy Azure Machine Learning - classic, not in hub mode"
      }
    },
    "postgreSQLHighAvailability": {
      "type": "object",
      "defaultValue": {
        "mode": "Disabled"
      }
    },
    "postgresEnableCustomerManagedKey": {
      "type": "bool",
      "defaultValue": false
    },
    "postgresAvailabilityZone": {
      "type": "string",
      "defaultValue": "1"
    },
    "postgreSQLSKU_Name": {
      "type": "string",
      "defaultValue": "Standard_B2s"
    },
    "postgreSQLSKU_Tier": {
      "type": "string",
      "defaultValue": "Burstable"
    },
    "postgreSQLStorage_Size": {
      "type": "int",
      "defaultValue": 32
    },
    "postgreSQLStorage_Iops": {
      "type": "int",
      "defaultValue": 120
    },
    "postgreSQLStorage_Tier": {
      "type": "string",
      "defaultValue": "P4"
    },
    "postgreSQLStorage_AutoGrow": {
      "type": "string",
      "defaultValue": "Disabled"
    },
    "postgreSQLVersion": {
      "type": "string",
      "defaultValue": "16"
    },
    "serviceSettingDeployRedisCache": {
      "type": "bool",
      "defaultValue": false
    },
    "redisSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Premium",
        "Standard"
      ]
    },
    "serviceSettingDeploySQLDatabase": {
      "type": "bool",
      "defaultValue": false
    },
    "sqlServerSKU_DTU": {
      "type": "string",
      "defaultValue": "S0"
    },
    "sqlServerTier_DTU": {
      "type": "string",
      "defaultValue": "Standard"
    },
    "sqlServerCapacity_DTU": {
      "type": "int",
      "defaultValue": 10
    },
    "sqlServerSKUName_vCore_Prefix": {
      "type": "string",
      "defaultValue": "GP"
    },
    "sqlServerFamily_vCore": {
      "type": "string",
      "defaultValue": "Gen5"
    },
    "sqlServerTier_vCore": {
      "type": "string",
      "defaultValue": "GeneralPurpose"
    },
    "sqlServerCapacity_vCore": {
      "type": "int",
      "defaultValue": 4
    },
    "serviceSettingDeployCosmosDB": {
      "type": "bool",
      "defaultValue": false
    },
    "cosmosTotalThroughputLimit": {
      "type": "int",
      "defaultValue": 1000
    },
    "cosmosKind": {
      "type": "string",
      "defaultValue": "GlobalDocumentDB"
    },
    "cosmosMinimalTlsVersion": {
      "type": "string",
      "defaultValue": "Tls12"
    },
    "serviceSettingDeployContainerApps": {
      "type": "bool",
      "defaultValue": false
    },
    "aca_default_image": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
    },
    "aca_a_registry_image": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
    },
    "aca_w_registry_image": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
    },
    "acaCustomDomainsArray": {
      "type": "array",
      "defaultValue": []
    },
    "acaAppWorkloadProfileName": {
      "type": "string",
      "defaultValue": ""
    },
    "containerCpuCoreCount": {
      "type": "int",
      "defaultValue": 1
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "2.0Gi"
    },
    "wlProfileDedicatedName": {
      "type": "string",
      "defaultValue": "D4"
    },
    "wlProfileGPUConsumptionName": {
      "type": "string",
      "defaultValue": "Consumption-GPU-NC24-A100"
    },
    "wlMinCountServerless": {
      "type": "int",
      "defaultValue": 0
    },
    "wlMinCountDedicated": {
      "type": "int",
      "defaultValue": 1
    },
    "wlMaxCount": {
      "type": "int",
      "defaultValue": 5
    },
    "serviceSettingDeployFunction": {
      "type": "bool",
      "defaultValue": false
    },
    "functionRuntime": {
      "type": "string",
      "defaultValue": "python",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java"
      ]
    },
    "functionVersion": {
      "type": "string",
      "defaultValue": "3.11",
      "allowedValues": [
        "3.7",
        "3.8",
        "3.9",
        "3.10",
        "3.11",
        "3.12",
        "18-lts",
        "20-lts",
        "8",
        "11",
        "17",
        "21",
        "v4.8",
        "v6.0",
        "v7.0",
        "v8.0"
      ]
    },
    "functionSKU": {
      "type": "object",
      "defaultValue": {
        "name": "EP1",
        "tier": "ElasticPremium",
        "family": "EP",
        "capacity": 1
      }
    },
    "serviceSettingDeployWebApp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting:Deploy Azure WebApp"
      }
    },
    "webAppRuntime": {
      "type": "string",
      "defaultValue": "python",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java"
      ]
    },
    "webAppRuntimeVersion": {
      "type": "string",
      "defaultValue": "3.11",
      "allowedValues": [
        "3.7",
        "3.8",
        "3.9",
        "3.10",
        "3.11",
        "3.12",
        "18-lts",
        "20-lts",
        "8",
        "11",
        "17",
        "21",
        "v4.8",
        "v6.0",
        "v7.0",
        "v8.0"
      ]
    },
    "appRedundancyMode": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "ActiveActive",
        "Failover",
        "GeoRedundant",
        "Manual",
        "None"
      ],
      "metadata": {
        "description": "Optional. Site redundancy mode."
      }
    },
    "byoASEv3": {
      "type": "bool",
      "defaultValue": false
    },
    "byoAseFullResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "byoAseAppServicePlanResourceId": {
      "type": "string",
      "defaultValue": ""
    },
    "aseSkuWorkers": {
      "type": "int",
      "defaultValue": 1
    },
    "aseSku": {
      "type": "string",
      "defaultValue": "IsolatedV2"
    },
    "aseSkuCode": {
      "type": "string",
      "defaultValue": "I1v2",
      "allowedValues": [
        "I1v2",
        "I2v2",
        "I3v2",
        "I4v2",
        "I5v2",
        "I6v2"
      ]
    },
    "webappSKUAce": {
      "type": "object",
      "defaultValue": {
        "name": "[parameters('aseSkuCode')]",
        "tier": "[parameters('aseSku')]",
        "size": "[parameters('aseSkuCode')]",
        "family": "Iv2",
        "capacity": "[parameters('aseSkuWorkers')]"
      }
    },
    "webappSKU": {
      "type": "object",
      "defaultValue": {
        "name": "S1",
        "tier": "Standard",
        "capacity": 1
      }
    },
    "webappAlwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "functionAlwaysOn": {
      "type": "bool",
      "defaultValue": true
    },
    "serviceSettingDeployContentSafety": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting: Deploy Content Safety for project"
      }
    },
    "serviceSettingDeployAzureOpenAI": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting: Deploy Azure OpenAI for project"
      }
    },
    "serviceSettingDeployAzureAIVision": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Service setting: Deploy Azure AI Vision for project"
      }
    },
    "serviceSettingOverrideRegionAzureAIVision": {
      "type": "string",
      "defaultValue": ""
    },
    "serviceSettingOverrideRegionAzureAIVisionShort": {
      "type": "string",
      "defaultValue": ""
    },
    "serviceSettingOverrideRegionAzureAISearch": {
      "type": "string",
      "defaultValue": ""
    },
    "serviceSettingOverrideRegionAzureAISearchShort": {
      "type": "string",
      "defaultValue": ""
    },
    "serviceSettingEnableAIFoundryPreview": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Service setting:Deploy AIHub, e.g. Azure Machine Learning in AI hub mode, with AIServices and 1 project"
      }
    },
    "disableContributorAccessForUsers": {
      "type": "bool",
      "defaultValue": false
    },
    "semanticSearchTier": {
      "type": "string",
      "defaultValue": "free",
      "allowedValues": [
        "disabled",
        "free",
        "standard"
      ]
    },
    "aiSearchSKUName": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "S0",
        "S1",
        "standard",
        "standard2"
      ]
    },
    "aiSearchEnableSharedPrivateLink": {
      "type": "bool",
      "defaultValue": false
    },
    "aiSearchEnableSharedPrivateLink_DOCS": {
      "type": "string",
      "defaultValue": "https://learn.microsoft.com/en-us/azure/search/search-limits-quotas-capacity#shared-private-link-resource-limits"
    },
    "enablePublicNetworkAccessForCognitive": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Default is false. May be needed if Azure OpenAI should be public, which is neeed for some features, such as Azure AI Studio on your data feature."
      }
    },
    "enablePublicNetworkAccessForAISearch": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Default is true. May be needed if Azure AI Search, if it should be public, which is neeed for some features, such as Azure AI Foudnry on your data feature."
      }
    },
    "enablePublicNetworkAccessFoAIStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Default is false. May be needed if Azure Storage used by AI Search, if it should be public, which is neeed for some features, such as Azure AI Studio on your data feature."
      }
    },
    "enablePublicGenAIAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Default is false. If true, it will flip all flags for GenAI RAG, such as Azure OpenAI, Azure AI Search, CosmosDB, WebApp, Azure Machine Learning"
      }
    },
    "allowPublicAccessWhenBehindVnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Default is false."
      }
    },
    "aks_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_version_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_dev_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aks_test_prod_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aml_ci_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_ci_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_dev_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_test_prod_sku_override": {
      "type": "string",
      "defaultValue": ""
    },
    "aml_cluster_dev_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aml_cluster_test_prod_nodes_override": {
      "type": "int",
      "defaultValue": -1
    },
    "aksOutboundType": {
      "type": "string",
      "defaultValue": "loadBalancer",
      "allowedValues": [
        "loadBalancer",
        "userDefinedRouting",
        "none"
      ]
    },
    "aksSubnetId": {
      "type": "string",
      "metadata": {
        "description": "Paramenter file dynamicNetworkParams.json contains this. Specifies the id of the AKS subnet that should be used by new AKS instance"
      }
    },
    "aksServiceCidr": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "aksDnsServiceIP": {
      "type": "string",
      "defaultValue": "10.0.0.10"
    },
    "aksDockerBridgeCidr": {
      "type": "string",
      "defaultValue": "172.17.0.1/16"
    },
    "genaiSubnetId": {
      "type": "string",
      "metadata": {
        "description": "Paramenter file dynamicNetworkParams.json contains this. Written after dynamic IP calculation is done"
      }
    },
    "acaSubnetId": {
      "type": "string",
      "defaultValue": ""
    },
    "inputKeyvault": {
      "type": "string",
      "metadata": {
        "description": "Input Keyvault, where ADMIN for AD adds service principals to be copied to 3 common env, and SP per project"
      }
    },
    "inputKeyvaultResourcegroup": {
      "type": "string",
      "metadata": {
        "description": "Input Keyvault, where ADMIN for AD adds service principals to be copied to 3 common env, and SP per project"
      }
    },
    "inputKeyvaultSubscription": {
      "type": "string",
      "metadata": {
        "description": "Input Keyvault, where ADMIN for AD adds service principals to be copied to 3 common env, and SP per project"
      }
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "Private VM Bastion: saved to keyvault and used by local admin user on VM"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Private VM Bastion:The username of the local admin that is created on VM"
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "description": "tags for common resources"
      }
    },
    "location": {
      "type": "string"
    },
    "locationSuffix": {
      "type": "string",
      "metadata": {
        "description": "Such as \"weu\" or \"swc\" (swedencentral datacenter).Reflected in resource group and sub-resources"
      }
    },
    "projectNumber": {
      "type": "string",
      "metadata": {
        "description": "Specifies the project number, such as a string \"005\". This is used to generate the projectName to embed in resources such as \"prj005\""
      }
    },
    "vnetResourceGroupBase": {
      "type": "string",
      "metadata": {
        "description": "Meta. Needed to calculate subnet: subnetCalc and genDynamicNetworkParamFile"
      }
    },
    "addBastionHost": {
      "type": "bool",
      "defaultValue": false
    },
    "env": {
      "type": "string",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Specifies the name of the environment [dev,test,prod]. This name is reflected in resource group and sub-resources"
      }
    },
    "skuNameStorage": {
      "type": "string",
      "defaultValue": "Standard_ZRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GZRS",
        "Standard_RAGRS",
        "Standard_RAGZRS"
      ],
      "metadata": {
        "description": "Specifies the SKU of the storage account"
      }
    },
    "technicalContactId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "RBAC purposes:ObjectID to set Contributor on project resource group. ESML CoreTeam assigned to help project. Will be used for RBAC"
      }
    },
    "technicalContactEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "ESML CoreTeam assigned to help project. Specifies technical contact email and will be used for tagging"
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "RBAC: Specifies the tenant id"
      }
    },
    "technicalAdminsObjectID": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Semicolon separated string of AD users ObjectID to get RBAC on Resourcegroup \"adsf,asdf\". AzureDevops Variable Overrides"
      }
    },
    "technicalAdminsEmail": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Semicolon separated string of AD users ObjectID to get RBAC on Resourcegroup \"adsf,asdf\". AzureDevops Variable Overrides."
      }
    },
    "IPwhiteList": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Whitelist IP addresses from project members to see keyvault, and to connect via Bastion. AzureDevops Variable Overrides"
      }
    },
    "projectServicePrincipleOID_SeedingKeyvaultName": {
      "type": "string",
      "metadata": {
        "description": "Name in keyvault for ObjectID of a user, service principal or security group in Microsoft EntraID. "
      }
    },
    "projectServicePrincipleSecret_SeedingKeyvaultName": {
      "type": "string",
      "metadata": {
        "description": "Project specific service principle KEYVAULT secret NAME to be added in kv for - Secret value "
      }
    },
    "projectServicePrincipleAppID_SeedingKeyvaultName": {
      "type": "string",
      "metadata": {
        "description": "Project specific service principle KEYVAULT secret NAME for - App ID"
      }
    },
    "vnetNameBase": {
      "type": "string",
      "metadata": {
        "description": "Specifies the virtual network name"
      }
    },
    "aifactorySuffixRG": {
      "type": "string",
      "metadata": {
        "description": "AI Factory suffix. If you have multiple instances example: -001"
      }
    },
    "commonResourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Resources in common RG, the suffix on resources, example: -001"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "metadata": {
        "description": "Resources in project RG, the suffix on resources, example: -001"
      }
    },
    "hybridBenefit": {
      "type": "bool",
      "metadata": {
        "description": "(Required) true if Hybrid benefits for Windows server VMs, else FALSE for Pay-as-you-go"
      }
    },
    "commonLakeNamePrefixMax8chars": {
      "type": "string",
      "metadata": {
        "description": "Datalake GEN 2 storage account prefix. Max 8 chars.Example: If prefix is \"marvel\", then \"marvelesml001[random5]dev\",marvelesml001[random5]test,marvelesml001[random5]prod"
      }
    },
    "lakeContainerName": {
      "type": "string",
      "metadata": {
        "description": "Datalake GEN 2 storage account"
      }
    },
    "projecttags": {
      "type": "object",
      "metadata": {
        "description": "Specifies project specific tags that should be applied to newly created resources"
      }
    },
    "projectOwnerEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies project owner email and will be used for tagging and RBAC"
      }
    },
    "projectOwnerId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies project owner objectId and will be used for tagging and RBAC"
      }
    },
    "databricksOID": {
      "type": "string",
      "defaultValue": "not set in genai-1",
      "metadata": {
        "description": "not set in genai-1"
      }
    },
    "databricksPrivate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "not set in genai-1"
      }
    },
    "AMLStudioUIPrivate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "not set in genai-1"
      }
    },
    "commonRGNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "ESML COMMON Resource Group prefix. If \"rg-msft-word\" then \"rg-msft-word-esml-common-weu-dev-001\""
      }
    },
    "common_subnet_name": {
      "type": "string",
      "metadata": {
        "description": "Common default subnet"
      }
    },
    "centralDnsZoneByPolicyInHub": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "True for centralized Private DNS Zones in HUB. False is default: that ESML run standalone/demo mode, which creates private DnsZones, DnsZoneGroups, and vNetLinks in own resource group. You can change this, to use your HUB DnzZones instead."
      }
    },
    "commonResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "vnetNameFull_param": {
      "type": "string",
      "defaultValue": ""
    },
    "datalakeName_param": {
      "type": "string",
      "defaultValue": ""
    },
    "kvNameFromCOMMON_param": {
      "type": "string",
      "defaultValue": ""
    },
    "privDnsSubscription_param": {
      "type": "string",
      "defaultValue": ""
    },
    "privDnsResourceGroup_param": {
      "type": "string",
      "defaultValue": ""
    },
    "DOCS_byovnet_example": {
      "type": "string",
      "defaultValue": ""
    },
    "DOCS_byosnet_common_example": {
      "type": "string",
      "defaultValue": ""
    },
    "DOCS_byosnet_project_example": {
      "type": "string",
      "defaultValue": ""
    },
    "BYO_subnets": {
      "type": "bool",
      "defaultValue": false
    },
    "network_env": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetCommon": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetCommonScoring": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetCommonPowerbiGw": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetProjGenAI": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetProjAKS": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetProjACA": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetProjDatabricksPublic": {
      "type": "string",
      "defaultValue": ""
    },
    "subnetProjDatabricksPrivate": {
      "type": "string",
      "defaultValue": ""
    },
    "enableDebugging": {
      "type": "bool",
      "defaultValue": false
    },
    "randomValue": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySalt5char": {
      "type": "string",
      "defaultValue": ""
    },
    "aifactorySalt10char": {
      "type": "string",
      "defaultValue": ""
    },
    "aks_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_B4ms",
        "Standard_A4m_v2",
        "Standard_D3_v2"
      ]
    },
    "aks_testProd_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS13-2_v2",
        "Standard_A8m_v2"
      ]
    },
    "aml_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS3_v2",
        "Standard_F8s_v2",
        "Standard_DS12_v2"
      ]
    },
    "aml_testProd_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_D13_v2",
        "Standard_D4_v2",
        "Standard_F16s_v2"
      ]
    },
    "ci_dev_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_DS11_v2"
      ]
    },
    "ci_devTest_defaults": {
      "type": "array",
      "defaultValue": [
        "Standard_D11_v2"
      ]
    }
  },
  "variables": {
    "copy": [
      {
        "name": "processedIpRulesSa",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(endsWith(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')], '/32'), substring(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')], 0, sub(length(variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')]), 3)), variables('ipWhitelist_array')[copyIndex('processedIpRulesSa')])]"
        }
      },
      {
        "name": "processedIpRulesAIServices",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(endsWith(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIServices')], '/32'), substring(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIServices')], 0, sub(length(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIServices')]), 3)), variables('ipWhitelist_array')[copyIndex('processedIpRulesAIServices')])]"
        }
      },
      {
        "name": "processedIpRulesKv",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRulesKv')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRulesKv')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRulesKv')]))]"
        }
      },
      {
        "name": "processedIpRulesAIHub",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRulesAIHub')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRulesAIHub')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRulesAIHub')]))]"
        }
      },
      {
        "name": "processedIpRulesAISearch",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRulesAISearch')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRulesAISearch')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRulesAISearch')]))]"
        }
      },
      {
        "name": "ipWhitelist_remove_ending_32",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": "[if(endsWith(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_32')], '/32'), substring(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_32')], 0, sub(length(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_32')]), 3)), variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_32')])]"
      },
      {
        "name": "ipWhitelist_remove_ending_slash_something",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": "[if(contains(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_slash_something')], '/'), substring(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_slash_something')], 0, indexOf(variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_slash_something')], '/')), variables('ipWhitelist_array')[copyIndex('ipWhitelist_remove_ending_slash_something')])]"
      },
      {
        "name": "ipSecurityRestrictions",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "name": "[replace(replace(variables('ipWhitelist_array')[copyIndex('ipSecurityRestrictions')], ',', ''), '/', '_')]",
          "ipAddressRange": "[variables('ipWhitelist_array')[copyIndex('ipSecurityRestrictions')]]",
          "action": "Allow"
        }
      },
      {
        "name": "processedIpRulesAzureML",
        "count": "[length(variables('ipWhitelist_array'))]",
        "input": {
          "action": "Allow",
          "value": "[if(contains(variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')], '/'), variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')], format('{0}/32', variables('ipWhitelist_array')[copyIndex('processedIpRulesAzureML')]))]"
        }
      }
    ],
    "activeVersion": 121,
    "resourceExists": {
      "aiHub": "[parameters('aiHubExists')]",
      "aiHubProject": "[parameters('aifProjectExists')]",
      "aml": "[parameters('amlExists')]",
      "openai": "[parameters('openaiExists')]",
      "aiSearch": "[parameters('aiSearchExists')]",
      "dashboardInsights": "[parameters('dashboardInsightsExists')]",
      "applicationInsight": "[parameters('applicationInsightExists')]",
      "aiServices": "[parameters('aiServicesExists')]",
      "bing": "[parameters('bingExists')]",
      "containerAppsEnv": "[parameters('containerAppsEnvExists')]",
      "containerAppA": "[parameters('containerAppAExists')]",
      "containerAppW": "[parameters('containerAppWExists')]",
      "cosmosDB": "[parameters('cosmosDBExists')]",
      "functionApp": "[parameters('functionAppExists')]",
      "webApp": "[parameters('webAppExists')]",
      "funcAppServicePlan": "[parameters('funcAppServicePlanExists')]",
      "webAppServicePlan": "[parameters('webAppServicePlanExists')]",
      "keyvault": "[parameters('keyvaultExists')]",
      "miACA": "[parameters('miACAExists')]",
      "miPrj": "[parameters('miPrjExists')]",
      "storageAccount1001": "[parameters('storageAccount1001Exists')]",
      "storageAccount2001": "[parameters('storageAccount2001Exists')]",
      "aif": "[parameters('aifExists')]",
      "redis": "[parameters('redisExists')]",
      "postgreSQL": "[parameters('postgreSQLExists')]",
      "sqlServer": "[parameters('sqlServerExists')]",
      "sqlDB": "[parameters('sqlDBExists')]",
      "acrProject": "[parameters('acrProjectExists')]",
      "vm": "[parameters('vmExists')]"
    },
    "postgreSQLSKU": {
      "name": "[parameters('postgreSQLSKU_Name')]",
      "tier": "[parameters('postgreSQLSKU_Tier')]"
    },
    "postgreSQLStorage": {
      "iops": "[parameters('postgreSQLStorage_Iops')]",
      "tier": "[parameters('postgreSQLStorage_Tier')]",
      "storageSizeGB": "[parameters('postgreSQLStorage_Size')]",
      "autoGrow": "[parameters('postgreSQLStorage_AutoGrow')]"
    },
    "sqlServerSKUObject_DTU": {
      "name": "[parameters('sqlServerSKU_DTU')]",
      "tier": "[parameters('sqlServerTier_DTU')]",
      "capacity": "[parameters('sqlServerCapacity_DTU')]"
    },
    "sqlServerSKUObject_vCore": {
      "name": "[format('{0}_{1}_{2}', parameters('sqlServerSKUName_vCore_Prefix'), parameters('sqlServerFamily_vCore'), parameters('sqlServerCapacity_vCore'))]",
      "tier": "[parameters('sqlServerTier_vCore')]",
      "family": "[parameters('sqlServerFamily_vCore')]",
      "capacity": "[parameters('sqlServerCapacity_vCore')]"
    },
    "imageRegistryTypeA": "[if(and(not(empty(parameters('aca_a_registry_image'))), contains(parameters('aca_a_registry_image'), 'mcr.microsoft.com')), 'ms', if(and(not(empty(parameters('aca_a_registry_image'))), contains(parameters('aca_a_registry_image'), 'docker.io')), 'dockerhub', 'private'))]",
    "imageRegistryTypeW": "[if(and(not(empty(parameters('aca_w_registry_image'))), contains(parameters('aca_w_registry_image'), 'mcr.microsoft.com')), 'ms', if(and(not(empty(parameters('aca_w_registry_image'))), contains(parameters('aca_w_registry_image'), 'docker.io')), 'dockerhub', 'private'))]",
    "subscriptionIdDevTestProd": "[subscription().subscriptionId]",
    "vnetNameFull": "[if(not(equals(parameters('vnetNameFull_param'), '')), replace(parameters('vnetNameFull_param'), '<network_env>', parameters('network_env')), format('{0}-{1}-{2}{3}', parameters('vnetNameBase'), parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix')))]",
    "projectName": "[format('prj{0}', parameters('projectNumber'))]",
    "cmnName": "cmn",
    "genaiName": "genai",
    "commonResourceGroup": "[if(not(equals(parameters('commonResourceGroup_param'), '')), parameters('commonResourceGroup_param'), format('{0}esml-common-{1}-{2}{3}', parameters('commonRGNamePrefix'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG')))]",
    "targetResourceGroup": "[format('{0}esml-{1}-{2}-{3}{4}-rg', parameters('commonRGNamePrefix'), replace(variables('projectName'), 'prj', 'project'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySuffixRG'))]",
    "vnetResourceGroupName": "[if(not(equals(parameters('vnetResourceGroup_param'), '')), replace(parameters('vnetResourceGroup_param'), '<network_env>', parameters('network_env')), variables('commonResourceGroup'))]",
    "subscriptions_subscriptionId": "[subscription().id]",
    "vnetId": "[format('{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}', variables('subscriptions_subscriptionId'), variables('vnetResourceGroupName'), variables('vnetNameFull'))]",
    "common_subnet_name_local": "[if(not(equals(parameters('subnetCommon'), '')), replace(parameters('subnetCommon'), '<network_env>', parameters('network_env')), parameters('common_subnet_name'))]",
    "segments": "[split(parameters('genaiSubnetId'), '/')]",
    "genaiSubnetName": "[variables('segments')[sub(length(variables('segments')), 1)]]",
    "defaultSubnet": "[variables('genaiSubnetName')]",
    "segmentsAKS": "[split(parameters('aksSubnetId'), '/')]",
    "aksSubnetName": "[variables('segmentsAKS')[sub(length(variables('segmentsAKS')), 1)]]",
    "segmentsACA": "[split(parameters('acaSubnetId'), '/')]",
    "acaSubnetName": "[variables('segmentsACA')[sub(length(variables('segmentsACA')), 1)]]",
    "ipWhitelist_array_1": "[array(split(replace(parameters('IPwhiteList'), '\\s+', ''), ','))]",
    "ipWhitelist_array": "[if(or(or(empty(parameters('IPwhiteList')), equals(parameters('IPwhiteList'), 'null')), less(length(parameters('IPwhiteList')), 5)), createArray(), union(variables('ipWhitelist_array_1'), createArray()))]",
    "technicalAdminsObjectID_array": "[array(split(replace(parameters('technicalAdminsObjectID'), '\\s+', ''), ','))]",
    "p011_genai_team_lead_array": "[if(or(empty(parameters('technicalAdminsObjectID')), equals(parameters('technicalAdminsObjectID'), 'null')), createArray(), union(variables('technicalAdminsObjectID_array'), createArray()))]",
    "technicalAdminsEmail_array": "[array(split(parameters('technicalAdminsEmail'), ','))]",
    "p011_genai_team_lead_email_array": "[if(or(empty(parameters('technicalAdminsEmail')), equals(parameters('technicalAdminsEmail'), 'null')), createArray(), variables('technicalAdminsEmail_array'))]",
    "projectSalt": "[substring(uniqueString(subscriptionResourceId(variables('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', variables('targetResourceGroup'))), 0, 5)]",
    "randomGuid": "[newGuid()]",
    "randomValueUsed": "[if(empty(parameters('randomValue')), variables('randomGuid'), parameters('randomValue'))]",
    "randomSalt": "[if(or(empty(parameters('aifactorySalt10char')), lessOrEquals(length(parameters('aifactorySalt10char')), 5)), substring(variables('randomValueUsed'), 6, 10), parameters('aifactorySalt10char'))]",
    "deploymentProjSpecificUniqueSuffix": "[format('{0}{1}', variables('projectName'), variables('projectSalt'))]",
    "uniqueInAIFenv": "[substring(uniqueString(subscriptionResourceId(variables('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', variables('commonResourceGroup'))), 0, 5)]",
    "privDnsResourceGroupName": "[if(and(not(equals(parameters('privDnsResourceGroup_param'), '')), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsResourceGroup_param'), variables('vnetResourceGroupName'))]",
    "privDnsSubscription": "[if(and(not(equals(parameters('privDnsSubscription_param'), '')), parameters('centralDnsZoneByPolicyInHub')), parameters('privDnsSubscription_param'), variables('subscriptionIdDevTestProd'))]",
    "prjResourceSuffixNoDash": "[replace(parameters('resourceSuffix'), '-', '')]",
    "privateDnsZoneName": {
      "azureusgovernment": "privatelink.api.ml.azure.us",
      "azurechinacloud": "privatelink.api.ml.azure.cn",
      "azurecloud": "privatelink.api.azureml.ms"
    },
    "privateAznbDnsZoneName": {
      "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
      "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
      "azurecloud": "privatelink.notebooks.azure.net"
    },
    "privateLinksDnsZones": {
      "blob": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), environment().suffixes.storage)]",
        "name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
      },
      "file": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.file.{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), environment().suffixes.storage)]",
        "name": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
      },
      "dfs": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), environment().suffixes.storage)]",
        "name": "[format('privatelink.dfs.{0}', environment().suffixes.storage)]"
      },
      "queue": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.queue.{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), environment().suffixes.storage)]",
        "name": "[format('privatelink.queue.{0}', environment().suffixes.storage)]"
      },
      "table": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.table.{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), environment().suffixes.storage)]",
        "name": "[format('privatelink.table.{0}', environment().suffixes.storage)]"
      },
      "registry": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.azurecr.io"
      },
      "registryregion": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}.data.privatelink.azurecr.io', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), parameters('location'))]",
        "name": "[format('{0}.data.privatelink.azurecr.io', parameters('location'))]"
      },
      "vault": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.vaultcore.azure.net"
      },
      "amlworkspace": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), variables('privateDnsZoneName')[toLower(environment().name)])]",
        "name": "[variables('privateDnsZoneName')[toLower(environment().name)]]"
      },
      "notebooks": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/{2}', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), variables('privateAznbDnsZoneName')[toLower(environment().name)])]",
        "name": "[variables('privateAznbDnsZoneName')[toLower(environment().name)]]"
      },
      "dataFactory": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.datafactory.azure.net"
      },
      "portal": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.adf.azure.com"
      },
      "openai": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.openai.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.openai.azure.com"
      },
      "searchService": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.search.windows.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.search.windows.net"
      },
      "azurewebapps": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azurewebsites.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.azurewebsites.net"
      },
      "cosmosdbnosql": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.documents.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.documents.azure.com"
      },
      "cognitiveservices": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.cognitiveservices.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.cognitiveservices.azure.com"
      },
      "azuredatabricks": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.azuredatabricks.net"
      },
      "namespace": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.servicebus.windows.net"
      },
      "azureeventgrid": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.eventgrid.azure.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.eventgrid.azure.net"
      },
      "azuremonitor": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.monitor.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.monitor.azure.com"
      },
      "azuremonitoroms": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.oms.opinsights.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.oms.opinsights.azure.com"
      },
      "azuremonitorods": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.ods.opinsights.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.ods.opinsights.azure.com"
      },
      "azuremonitoragentsvc": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.agentsvc.azure-automation.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.agentsvc.azure-automation.net"
      },
      "azurecontainerapps": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.{2}.azurecontainerapps.io', variables('privDnsSubscription'), variables('privDnsResourceGroupName'), parameters('location'))]",
        "name": "[format('privatelink.{0}.azurecontainerapps.io', parameters('location'))]"
      },
      "redis": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.redis.cache.windows.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.redis.cache.windows.net"
      },
      "postgres": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.postgres.database.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.postgres.database.azure.com"
      },
      "sql": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.database.windows.net"
      },
      "cosmosdbmongo": {
        "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/privatelink.mongo.cosmos.azure.com', variables('privDnsSubscription'), variables('privDnsResourceGroupName'))]",
        "name": "privatelink.mongo.cosmos.azure.com"
      }
    },
    "privateLinksDnsZonesArray": [
      {
        "name": "[variables('privateLinksDnsZones').blob.name]",
        "id": "[variables('privateLinksDnsZones').blob.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').file.name]",
        "id": "[variables('privateLinksDnsZones').file.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').dfs.name]",
        "id": "[variables('privateLinksDnsZones').dfs.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').queue.name]",
        "id": "[variables('privateLinksDnsZones').queue.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').table.name]",
        "id": "[variables('privateLinksDnsZones').table.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').registry.name]",
        "id": "[variables('privateLinksDnsZones').registry.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').registryregion.name]",
        "id": "[variables('privateLinksDnsZones').registryregion.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').vault.name]",
        "id": "[variables('privateLinksDnsZones').vault.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').amlworkspace.name]",
        "id": "[variables('privateLinksDnsZones').amlworkspace.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').notebooks.name]",
        "id": "[variables('privateLinksDnsZones').notebooks.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').dataFactory.name]",
        "id": "[variables('privateLinksDnsZones').dataFactory.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').portal.name]",
        "id": "[variables('privateLinksDnsZones').portal.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').openai.name]",
        "id": "[variables('privateLinksDnsZones').openai.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').searchService.name]",
        "id": "[variables('privateLinksDnsZones').searchService.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azurewebapps.name]",
        "id": "[variables('privateLinksDnsZones').azurewebapps.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').cosmosdbnosql.name]",
        "id": "[variables('privateLinksDnsZones').cosmosdbnosql.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').cognitiveservices.name]",
        "id": "[variables('privateLinksDnsZones').cognitiveservices.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azuredatabricks.name]",
        "id": "[variables('privateLinksDnsZones').azuredatabricks.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').namespace.name]",
        "id": "[variables('privateLinksDnsZones').namespace.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azureeventgrid.name]",
        "id": "[variables('privateLinksDnsZones').azureeventgrid.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azuremonitor.name]",
        "id": "[variables('privateLinksDnsZones').azuremonitor.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azuremonitoroms.name]",
        "id": "[variables('privateLinksDnsZones').azuremonitoroms.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azuremonitorods.name]",
        "id": "[variables('privateLinksDnsZones').azuremonitorods.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azuremonitoragentsvc.name]",
        "id": "[variables('privateLinksDnsZones').azuremonitoragentsvc.id]",
        "exists": true
      },
      {
        "name": "[variables('privateLinksDnsZones').azurecontainerapps.name]",
        "id": "[variables('privateLinksDnsZones').azurecontainerapps.id]",
        "exists": "[parameters('zoneAzurecontainerappsExists')]"
      },
      {
        "name": "[variables('privateLinksDnsZones').redis.name]",
        "id": "[variables('privateLinksDnsZones').redis.id]",
        "exists": "[parameters('zoneRedisExists')]"
      },
      {
        "name": "[variables('privateLinksDnsZones').postgres.name]",
        "id": "[variables('privateLinksDnsZones').postgres.id]",
        "exists": "[parameters('zonePostgresExists')]"
      },
      {
        "name": "[variables('privateLinksDnsZones').sql.name]",
        "id": "[variables('privateLinksDnsZones').sql.id]",
        "exists": "[parameters('zoneSqlExists')]"
      },
      {
        "name": "[variables('privateLinksDnsZones').cosmosdbmongo.name]",
        "id": "[variables('privateLinksDnsZones').cosmosdbmongo.id]",
        "exists": "[parameters('zoneMongoExists')]"
      }
    ],
    "aifactoryVersionString": "[format('{0}{1}', parameters('aifactoryVersionMajor'), parameters('aifactoryVersionMinor'))]",
    "aifactoryVersion": "[if(or(empty(variables('aifactoryVersionString')), not(contains(variables('aifactoryVersionString'), '^[0-9]+$'))), 999, int(variables('aifactoryVersionString')))]",
    "twoNumbers": "[substring(parameters('resourceSuffix'), 2, 2)]",
    "aiHubName": "[format('ai-hub-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "aifProjectName": "[format('ai-prj{0}-01-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "aoaiName": "[format('aoai-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "amlName": "[format('aml-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "safeNameAISearch": "[replace(toLower(format('aisearch{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))), '-', '')]",
    "dashboardInsightsName": "[format('AIFactory{0}-{1}-insights-{2}-{3}{4}', parameters('aifactorySuffixRG'), variables('projectName'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "applicationInsightName": "[format('ain-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "bingName": "[format('bing-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "containerAppsEnvName": "[format('aca-env-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "containerAppAName": "[format('aca-a-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "containerAppWName": "[format('aca-w-{0}{1}{2}{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "cosmosDBName": "[format('cosmos-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "functionAppName": "[format('func-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "webAppName": "[format('webapp-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "funcAppServicePlanName": "[format('func-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "webbAppServicePlanName": "[format('webapp-{0}-{1}-{2}-{3}{4}-plan', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "keyvaultName": "[format('kv-p{0}-{1}-{2}-{3}{4}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('twoNumbers'))]",
    "storageAccount1001Name": "[replace(format('sa{0}{1}{2}1{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "storageAccount2001Name": "[replace(format('sa{0}{1}{2}2{3}{4}', variables('projectName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), variables('prjResourceSuffixNoDash'), parameters('env')), '-', '')]",
    "acrProjectName": "[format('acr{0}{1}{2}{3}{4}{5}', variables('projectName'), variables('genaiName'), parameters('locationSuffix'), variables('uniqueInAIFenv'), parameters('env'), variables('prjResourceSuffixNoDash'))]",
    "redisName": "[format('redis-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "postgreSQLName": "[format('pg-flex-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "sqlServerName": "[format('sql-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "sqlDBName": "[format('sqldb-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "vmName": "[format('dsvm-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "aifName": "[format('aifoundry-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "aifPrjName": "[format('aifoundry-{0}-01-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]",
    "miACAName": "[format('mi-aca-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
    "miPrjName": "[format('mi-{0}-{1}-{2}-{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), parameters('resourceSuffix'))]",
    "aiServicesName": "[replace(toLower(format('aiservices{0}{1}{2}{3}{4}{5}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), variables('randomSalt'), variables('prjResourceSuffixNoDash'))), '-', '')]",
    "acrCommonName": "[replace(format('acrcommon{0}{1}{2}{3}', variables('uniqueInAIFenv'), parameters('locationSuffix'), parameters('commonResourceSuffix'), parameters('env')), '-', '')]",
    "laWorkspaceName": "[format('la-{0}-{1}-{2}-{3}{4}', variables('cmnName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]",
    "hostname": "[format('https://{0}.search.windows.net', variables('safeNameAISearch'))]",
    "var_bing_endpoint": "[if(parameters('serviceSettingDeployBingSearch'), 'https://api.bing.microsoft.com/', '')]",
    "sharedPrivateLinkResources": [],
    "secretGetListSet": {
      "secrets": [
        "get",
        "list",
        "set"
      ]
    },
    "secretGetList": {
      "secrets": [
        "get",
        "list"
      ]
    },
    "secretGet": {
      "secrets": [
        "get"
      ]
    },
    "kvNameCommon": "[if(not(equals(parameters('kvNameFromCOMMON_param'), '')), parameters('kvNameFromCOMMON_param'), format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix')))]",
    "allowedOrigins": [
      "https://portal.azure.com",
      "https://ms.portal.azure.com",
      "https://mlworkspace.azure.ai",
      "https://ml.azure.com",
      "https://ai.azure.com",
      "https://mlworkspacecanary.azure.ai",
      "https://mlworkspace.azureml-test.net",
      "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
      "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]"
    ],
    "aks_dev_sku_param": "[if(not(equals(parameters('aks_dev_sku_override'), '')), parameters('aks_dev_sku_override'), parameters('aks_dev_defaults')[0])]",
    "aks_test_prod_sku_param": "[if(not(equals(parameters('aks_test_prod_sku_override'), '')), parameters('aks_test_prod_sku_override'), parameters('aks_testProd_defaults')[0])]",
    "aks_version_param": "[if(not(equals(parameters('aks_version_override'), '')), parameters('aks_version_override'), '1.30.3')]",
    "aks_dev_nodes_param": "[if(not(equals(parameters('aks_dev_nodes_override'), -1)), parameters('aks_dev_nodes_override'), 1)]",
    "aks_test_prod_nodes_param": "[if(not(equals(parameters('aks_test_prod_nodes_override'), -1)), parameters('aks_test_prod_nodes_override'), 3)]",
    "aml_ci_dev_sku_param": "[if(not(equals(parameters('aml_ci_dev_sku_override'), '')), parameters('aml_ci_dev_sku_override'), parameters('ci_dev_defaults')[0])]",
    "aml_ci_test_prod_sku_param": "[if(not(equals(parameters('aml_ci_test_prod_sku_override'), '')), parameters('aml_ci_test_prod_sku_override'), parameters('ci_devTest_defaults')[0])]",
    "aml_cluster_dev_sku_param": "[if(not(equals(parameters('aml_cluster_dev_sku_override'), '')), parameters('aml_cluster_dev_sku_override'), parameters('aml_dev_defaults')[0])]",
    "aml_cluster_test_prod_sku_param": "[if(not(equals(parameters('aml_cluster_test_prod_sku_override'), '')), parameters('aml_cluster_test_prod_sku_override'), parameters('aml_testProd_defaults')[1])]",
    "aml_cluster_dev_nodes_param": "[if(not(equals(parameters('aml_cluster_dev_nodes_override'), -1)), parameters('aml_cluster_dev_nodes_override'), 3)]",
    "aml_cluster_test_prod_nodes_param": "[if(not(equals(parameters('aml_cluster_test_prod_nodes_override'), -1)), parameters('aml_cluster_test_prod_nodes_override'), 3)]",
    "aiHubNameShort": "[format('ai-hub-{0}-{1}-{2}{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), parameters('resourceSuffix'))]",
    "datalakeName": "[if(not(equals(parameters('datalakeName_param'), '')), parameters('datalakeName_param'), format('{0}{1}esml{2}{3}', parameters('commonLakeNamePrefixMax8chars'), variables('uniqueInAIFenv'), replace(parameters('commonResourceSuffix'), '-', ''), parameters('env')))]"
  },
  "resources": {
    "openaiREF": {
      "condition": "[variables('resourceExists').openai]",
      "existing": true,
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-10-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('aoaiName')]"
    },
    "aiHubREF": {
      "condition": "[variables('resourceExists').aiHub]",
      "existing": true,
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2024-10-01-preview",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('aiHubName')]"
    },
    "aiSearchREF": {
      "condition": "[variables('resourceExists').aiSearch]",
      "existing": true,
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2024-03-01-preview",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('safeNameAISearch')]"
    },
    "amlREF": {
      "condition": "[variables('resourceExists').aml]",
      "existing": true,
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2024-10-01-preview",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('amlName')]"
    },
    "webappREF": {
      "condition": "[variables('resourceExists').webApp]",
      "existing": true,
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('webAppName')]"
    },
    "functionREF": {
      "condition": "[variables('resourceExists').functionApp]",
      "existing": true,
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('functionAppName')]"
    },
    "containerAppsEnvREF": {
      "condition": "[variables('resourceExists').containerAppsEnv]",
      "existing": true,
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2025-01-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('containerAppsEnvName')]"
    },
    "bingREF": {
      "condition": "[variables('resourceExists').bing]",
      "existing": true,
      "type": "Microsoft.Bing/accounts",
      "apiVersion": "2020-06-10",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('bingName')]"
    },
    "kvREF": {
      "condition": "[variables('resourceExists').keyvault]",
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('keyvaultName')]"
    },
    "miACAREF": {
      "condition": "[variables('resourceExists').miACA]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2024-11-30",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('miACAName')]"
    },
    "miPrjREF": {
      "condition": "[variables('resourceExists').miPrj]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2024-11-30",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('miPrjName')]"
    },
    "aiServicesREF": {
      "condition": "[variables('resourceExists').aiServices]",
      "existing": true,
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-10-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('aiServicesName')]"
    },
    "appInsightsREF": {
      "condition": "[variables('resourceExists').applicationInsight]",
      "existing": true,
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "name": "[variables('applicationInsightName')]"
    },
    "targetResourceGroupRefSalt": {
      "existing": true,
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-10-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "name": "[variables('targetResourceGroup')]"
    },
    "commonResourceGroupRef": {
      "existing": true,
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2024-07-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "name": "[variables('commonResourceGroup')]"
    },
    "vnet": {
      "existing": true,
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2024-05-01",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "name": "[variables('vnetNameFull')]"
    },
    "createPrivateDnsZones": {
      "condition": "[equals(parameters('centralDnsZoneByPolicyInHub'), false())]",
      "existing": true,
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2024-06-01",
      "subscriptionId": "[variables('privDnsSubscription')]",
      "resourceGroup": "[variables('privDnsResourceGroupName')]",
      "name": "privatelink.cognitiveservices.azure.com"
    },
    "subnet_genai_ref": {
      "existing": true,
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2024-05-01",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "name": "[format('{0}/{1}', variables('vnetNameFull'), variables('defaultSubnet'))]"
    },
    "subnet_aks_ref": {
      "existing": true,
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2024-05-01",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "name": "[format('{0}/{1}', variables('vnetNameFull'), variables('aksSubnetName'))]"
    },
    "logAnalyticsWorkspaceOpInsight": {
      "existing": true,
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "name": "[variables('laWorkspaceName')]"
    },
    "acrCommon": {
      "condition": "[equals(parameters('useCommonACR'), true())]",
      "existing": true,
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-09-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "name": "[variables('acrCommonName')]"
    },
    "externalKv": {
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "subscriptionId": "[parameters('inputKeyvaultSubscription')]",
      "resourceGroup": "[parameters('inputKeyvaultResourcegroup')]",
      "name": "[parameters('inputKeyvault')]"
    },
    "commonKv": {
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "name": "[variables('kvNameCommon')]"
    },
    "esmlCommonLake": {
      "existing": true,
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2024-01-01",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "name": "[variables('datalakeName')]"
    },
    "createNewPrivateDnsZonesIfNotExists": {
      "condition": "[equals(parameters('centralDnsZoneByPolicyInHub'), false())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('createNewPrivateDnsZones{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('privDnsSubscription')]",
      "resourceGroup": "[variables('privDnsResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZonesArray')]"
          },
          "privDnsSubscription": {
            "value": "[variables('privDnsSubscription')]"
          },
          "privDnsResourceGroup": {
            "value": "[variables('privDnsResourceGroupName')]"
          },
          "vNetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vNetResourceGroup": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "allGlobal": {
            "value": "[parameters('privateDnsAndVnetLinkAllGlobalLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5798691335649249385"
            }
          },
          "parameters": {
            "privDnsSubscription": {
              "type": "string"
            },
            "privDnsResourceGroup": {
              "type": "string"
            },
            "vNetName": {
              "type": "string"
            },
            "vNetResourceGroup": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "allGlobal": {
              "type": "bool",
              "defaultValue": true
            },
            "privateLinksDnsZones": {
              "type": "array"
            }
          },
          "variables": {
            "locationGlobal": "global"
          },
          "resources": [
            {
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(parameters('privateLinksDnsZones'))]"
              },
              "condition": "[equals(parameters('privateLinksDnsZones')[copyIndex()].exists, false())]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2024-06-01",
              "name": "[parameters('privateLinksDnsZones')[copyIndex()].name]",
              "location": "[if(and(equals(parameters('privateLinksDnsZones')[copyIndex()].name, format('{0}.data.privatelink.azurecr.io', parameters('location'))), equals(parameters('allGlobal'), false())), parameters('location'), variables('locationGlobal'))]",
              "properties": {}
            },
            {
              "copy": {
                "name": "privateDnsZoneVnetLink",
                "count": "[length(parameters('privateLinksDnsZones'))]"
              },
              "condition": "[equals(parameters('privateLinksDnsZones')[copyIndex()].exists, false())]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', parameters('privateLinksDnsZones')[copyIndex()].name, uniqueString(parameters('privateLinksDnsZones')[copyIndex()].name))]",
              "location": "[if(and(equals(parameters('privateLinksDnsZones')[copyIndex()].name, format('{0}.data.privatelink.azurecr.io', parameters('location'))), equals(parameters('allGlobal'), false())), parameters('location'), variables('locationGlobal'))]",
              "properties": {
                "registrationEnabled": false,
                "resolutionPolicy": "NxDomainRedirect",
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vNetResourceGroup')), 'Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateLinksDnsZones')[copyIndex()].name)]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "commonResourceGroupRef"
      ],
      "metadata": {
        "description": "AIFACTORY-UPDATE-121"
      }
    },
    "projectResourceGroup": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('prjRG{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "rgName": {
            "value": "[variables('targetResourceGroup')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2257646037398526068"
            }
          },
          "parameters": {
            "rgName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('rgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "rgId": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('rgName'))]"
            }
          }
        }
      }
    },
    "miForPrj": {
      "condition": "[not(variables('resourceExists').miPrj)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miForPrj{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('miPrjName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10728264960472795345"
            },
            "description": "Creates a user assigned MI, needed to be created before ACA, and needs to be assigned ACR Pull permissions to access an Azure Container Registry, before ACA"
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "cognitiveServicesUserRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), variables('cognitiveServicesUserRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('cognitiveServicesUserRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').clientId]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "spAndMI2Array": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('spAndMI2Array-{0}', uniqueString('spAndMI2Array', deployment().name))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managedIdentityOID": "[if(variables('resourceExists').miPrj, createObject('value', reference('miPrjREF').principalId), createObject('value', reference('miForPrj').outputs.managedIdentityPrincipalId.value))]",
          "servicePrincipleOIDFromSecret": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4489054275663592001"
            }
          },
          "parameters": {
            "servicePrincipleOIDFromSecret": {
              "type": "securestring"
            },
            "managedIdentityOID": {
              "type": "string"
            }
          },
          "variables": {
            "toArray": [
              "[parameters('servicePrincipleOIDFromSecret')]",
              "[parameters('managedIdentityOID')]"
            ]
          },
          "resources": [],
          "outputs": {
            "spAndMiArray": {
              "type": "array",
              "value": "[variables('toArray')]"
            }
          }
        }
      },
      "dependsOn": [
        "miForPrj",
        "miPrjREF"
      ]
    },
    "debug": {
      "condition": "[parameters('enableDebugging')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('debug{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "commonResourceGroup": {
            "value": "[variables('commonResourceGroup')]"
          },
          "targetResourceGroup": {
            "value": "[variables('targetResourceGroup')]"
          },
          "vnetNameFull": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "common_subnet_name_local": {
            "value": "[variables('common_subnet_name_local')]"
          },
          "genaiSubnetId": {
            "value": "[parameters('genaiSubnetId')]"
          },
          "genaiSubnetName": {
            "value": "[variables('genaiSubnetName')]"
          },
          "defaultSubnet": {
            "value": "[variables('defaultSubnet')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "aksSubnetName": {
            "value": "[variables('aksSubnetName')]"
          },
          "debug_vnetId": {
            "value": "[variables('vnetId')]"
          },
          "subscriptions_subscriptionId": {
            "value": "[variables('subscriptions_subscriptionId')]"
          },
          "vnetRule1": {
            "value": "[format('{0}/subnets/{1}', variables('vnetId'), variables('defaultSubnet'))]"
          },
          "vnetRule2": {
            "value": "[format('{0}/subnets/{1}', variables('vnetId'), variables('aksSubnetName'))]"
          },
          "keyvaultExists": {
            "value": "[parameters('keyvaultExists')]"
          },
          "aiSearchExists": {
            "value": "[parameters('aiSearchExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16773660349463869396"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": ""
            },
            "debug_vnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "projectName": {
              "type": "string",
              "defaultValue": ""
            },
            "projectNumber": {
              "type": "string",
              "defaultValue": ""
            },
            "env": {
              "type": "string",
              "defaultValue": ""
            },
            "locationSuffix": {
              "type": "string",
              "defaultValue": ""
            },
            "commonResourceGroup": {
              "type": "string",
              "defaultValue": ""
            },
            "targetResourceGroup": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetNameFull": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "common_subnet_name_local": {
              "type": "string",
              "defaultValue": ""
            },
            "genaiSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "genaiSubnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "defaultSubnet": {
              "type": "string",
              "defaultValue": ""
            },
            "aksSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "aksSubnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "subscriptions_subscriptionId": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetRule1": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetRule2": {
              "type": "string",
              "defaultValue": ""
            },
            "postGreSQLExists": {
              "type": "bool",
              "defaultValue": false
            },
            "keyvaultExists": {
              "type": "bool",
              "defaultValue": false
            },
            "aiSearchExists": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "debugScript",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "11.0",
                "environmentVariables": [
                  {
                    "name": "DEBUG_VNET_ID",
                    "value": "[parameters('debug_vnetId')]"
                  },
                  {
                    "name": "PROJECT_NAME",
                    "value": "[parameters('projectName')]"
                  },
                  {
                    "name": "PROJECT_NUMBER",
                    "value": "[parameters('projectNumber')]"
                  },
                  {
                    "name": "ENV_NAME",
                    "value": "[parameters('env')]"
                  },
                  {
                    "name": "LOCATION_SUFFIX",
                    "value": "[parameters('locationSuffix')]"
                  },
                  {
                    "name": "COMMON_RG",
                    "value": "[parameters('commonResourceGroup')]"
                  },
                  {
                    "name": "TARGET_RG",
                    "value": "[parameters('targetResourceGroup')]"
                  },
                  {
                    "name": "VNET_NAME_FULL",
                    "value": "[parameters('vnetNameFull')]"
                  },
                  {
                    "name": "VNET_RG_NAME",
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  {
                    "name": "COMMON_SUBNET_NAME",
                    "value": "[parameters('common_subnet_name_local')]"
                  },
                  {
                    "name": "GENAI_SUBNET_ID",
                    "value": "[parameters('genaiSubnetId')]"
                  },
                  {
                    "name": "GENAI_SUBNET_NAME",
                    "value": "[parameters('genaiSubnetName')]"
                  },
                  {
                    "name": "DEFAULT_SUBNET",
                    "value": "[parameters('defaultSubnet')]"
                  },
                  {
                    "name": "AKS_SUBNET_ID",
                    "value": "[parameters('aksSubnetId')]"
                  },
                  {
                    "name": "AKS_SUBNET_NAME",
                    "value": "[parameters('aksSubnetName')]"
                  },
                  {
                    "name": "SUBSCRIPTION_ID",
                    "value": "[parameters('subscriptions_subscriptionId')]"
                  },
                  {
                    "name": "VNET_RULE_1",
                    "value": "[parameters('vnetRule1')]"
                  },
                  {
                    "name": "VNET_RULE_2",
                    "value": "[parameters('vnetRule2')]"
                  },
                  {
                    "name": "postGreSQLExists",
                    "value": "[if(parameters('postGreSQLExists'), 'true', 'false')]"
                  },
                  {
                    "name": "keyvaultExists",
                    "value": "[if(parameters('keyvaultExists'), 'true', 'false')]"
                  },
                  {
                    "name": "aiSearchExists",
                    "value": "[if(parameters('aiSearchExists'), 'true', 'false')]"
                  }
                ],
                "scriptContent": "      Write-Host \"DEBUG OUTPUT VARIABLES:\"\r\n      Write-Host \"vnetId: $env:DEBUG_VNET_ID\"\r\n      Write-Host \"projectName: $env:PROJECT_NAME\"\r\n      Write-Host \"projectNumber: $env:PROJECT_NUMBER\"\r\n      Write-Host \"env: $env:ENV_NAME\"\r\n      Write-Host \"location: $env:LOCATION\"\r\n      Write-Host \"locationSuffix: $env:LOCATION_SUFFIX\"\r\n      Write-Host \"commonResourceGroup: $env:COMMON_RG\"\r\n      Write-Host \"targetResourceGroup: $env:TARGET_RG\"\r\n      Write-Host \"vnetNameFull: $env:VNET_NAME_FULL\"\r\n      Write-Host \"vnetResourceGroupName: $env:VNET_RG_NAME\"\r\n      Write-Host \"common_subnet_name_local: $env:COMMON_SUBNET_NAME\"\r\n      Write-Host \"genaiSubnetId: $env:GENAI_SUBNET_ID\"\r\n      Write-Host \"genaiSubnetName: $env:GENAI_SUBNET_NAME\"\r\n      Write-Host \"defaultSubnet: $env:DEFAULT_SUBNET\"\r\n      Write-Host \"aksSubnetId: $env:AKS_SUBNET_ID\"\r\n      Write-Host \"aksSubnetName: $env:AKS_SUBNET_NAME\"\r\n      Write-Host \"subscriptionId: $env:SUBSCRIPTION_ID\"\r\n      Write-Host \"vnetRule1: $env:VNET_RULE_1\"\r\n      Write-Host \"vnetRule2: $env:VNET_RULE_2\"\r\n      Write-Host \"postGreSQLExists: $env:postGreSQLExists\"\r\n      Write-Host \"debug_keyvaultExists: $env:keyvaultExists\"\r\n      Write-Host \"debug_aiSearchExists: $env:aiSearchExists\"\r\n    ",
                "retentionInterval": "PT1H"
              }
            }
          ],
          "outputs": {
            "debug_vnetId": {
              "type": "string",
              "value": "[parameters('debug_vnetId')]"
            },
            "debug_projectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            },
            "debug_projectNumber": {
              "type": "string",
              "value": "[parameters('projectNumber')]"
            },
            "debug_env": {
              "type": "string",
              "value": "[parameters('env')]"
            },
            "debug_location": {
              "type": "string",
              "value": "[parameters('location')]"
            },
            "debug_locationSuffix": {
              "type": "string",
              "value": "[parameters('locationSuffix')]"
            },
            "debug_commonResourceGroup": {
              "type": "string",
              "value": "[parameters('commonResourceGroup')]"
            },
            "debug_targetResourceGroup": {
              "type": "string",
              "value": "[parameters('targetResourceGroup')]"
            },
            "debug_vnetNameFull": {
              "type": "string",
              "value": "[parameters('vnetNameFull')]"
            },
            "debug_vnetResourceGroupName": {
              "type": "string",
              "value": "[parameters('vnetResourceGroupName')]"
            },
            "debug_common_subnet_name_local": {
              "type": "string",
              "value": "[parameters('common_subnet_name_local')]"
            },
            "debug_genaiSubnetId": {
              "type": "string",
              "value": "[parameters('genaiSubnetId')]"
            },
            "debug_genaiSubnetName": {
              "type": "string",
              "value": "[parameters('genaiSubnetName')]"
            },
            "debug_defaultSubnet": {
              "type": "string",
              "value": "[parameters('defaultSubnet')]"
            },
            "debug_aksSubnetId": {
              "type": "string",
              "value": "[parameters('aksSubnetId')]"
            },
            "debug_aksSubnetName": {
              "type": "string",
              "value": "[parameters('aksSubnetName')]"
            },
            "debug_vnetRule1": {
              "type": "string",
              "value": "[parameters('vnetRule1')]"
            },
            "debug_vnetRule2": {
              "type": "string",
              "value": "[parameters('vnetRule2')]"
            },
            "debug_postGreSQLExists": {
              "type": "bool",
              "value": "[parameters('postGreSQLExists')]"
            },
            "debug_keyvaultExists": {
              "type": "bool",
              "value": "[parameters('keyvaultExists')]"
            },
            "debug_aiSearchExists": {
              "type": "bool",
              "value": "[parameters('aiSearchExists')]"
            }
          }
        }
      }
    },
    "vmAdminLoginPermissions": {
      "condition": "[variables('resourceExists').storageAccount1001]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('VMAdminLogin4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userId": {
            "value": "[parameters('technicalContactId')]"
          },
          "userEmail": {
            "value": "[parameters('technicalContactEmail')]"
          },
          "additionalUserEmails": {
            "value": "[variables('p011_genai_team_lead_email_array')]"
          },
          "additionalUserIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10569625387980918735"
            }
          },
          "parameters": {
            "userId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Specifies the objectId of the person that ordered the resources"
              }
            },
            "userEmail": {
              "type": "string",
              "metadata": {
                "description": "Specifies the email address of the person that ordered the resources"
              }
            },
            "additionalUserIds": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access the Vm vmAdminLoginRole"
              }
            },
            "additionalUserEmails": {
              "type": "array",
              "metadata": {
                "description": "Additional optional email address of more people to access the Vm vmAdminLoginRole"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('userId'))]",
            "main_email_2_array": "[array(parameters('userEmail'))]"
          },
          "resources": [
            {
              "copy": {
                "name": "vmAdminLoginRole",
                "count": "[length(range(0, length(parameters('additionalUserIds'))))]"
              },
              "condition": "[not(empty(parameters('additionalUserIds')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(format('{0}-vmadminlogin-{1}', parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]], resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                "principalId": "[parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to user {0} to get VMAdminLogin', parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]])]"
              }
            },
            {
              "copy": {
                "name": "vmAdminLoginRoleUser",
                "count": "[length(range(0, length(variables('main_principal_2_array'))))]"
              },
              "condition": "[and(equals(parameters('useAdGroups'), false()), not(empty(parameters('userId'))))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(format('{0}-vmadminlogin-{1}', variables('main_principal_2_array')[range(0, length(variables('main_principal_2_array')))[copyIndex()]], resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                "principalId": "[variables('main_principal_2_array')[range(0, length(variables('main_principal_2_array')))[copyIndex()]]]",
                "principalType": "User",
                "description": "[format('Contributor to user {0} to get VMAdminLogin', variables('main_email_2_array')[range(0, length(variables('main_principal_2_array')))[copyIndex()]])]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "projectResourceGroup",
        "rbacModuleUsers"
      ]
    },
    "csContentSafety": {
      "condition": "[equals(parameters('serviceSettingDeployContentSafety'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ContentSafety4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csContentSafetySKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "contentsafetyName": {
            "value": "[format('cs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "[parameters('kindContentSafety')]"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-contentsafety-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "subnetName": {
            "value": "[variables('genaiSubnetName')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11281911402678898752"
            }
          },
          "parameters": {
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "ResourceID of subnet for private endpoints"
              }
            },
            "vnetName": {
              "type": "string"
            },
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "contentsafetyName": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "ContentSafety"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('contentsafetyName'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('contentsafetyName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('pend-nic-{0}-{1}', parameters('kind'), parameters('contentsafetyName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('contentsafetyName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('pendCogSerName')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('contentsafetyName'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "privateDnsContentSafety": {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('serviceSettingDeployContentSafety'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkContentSafety{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('csContentSafety').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "csContentSafety",
        "projectResourceGroup"
      ]
    },
    "csVision": {
      "condition": "[equals(parameters('serviceSettingDeployAzureAIVision'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Vision4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csVisionSKU')]"
          },
          "location": "[if(not(empty(parameters('serviceSettingOverrideRegionAzureAIVision'))), createObject('value', parameters('serviceSettingOverrideRegionAzureAIVision')), createObject('value', parameters('location')))]",
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": "[if(not(empty(parameters('serviceSettingOverrideRegionAzureAIVisionShort'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('serviceSettingOverrideRegionAzureAIVisionShort'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))), createObject('value', format('vision-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))))]",
          "kind": {
            "value": "ComputerVision"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-vision-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7338111499776537978"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "ComputerVision"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "apiProperties": {
                  "responsibleAiNotice": "Acknowledged"
                },
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('pend-nic-{0}-{1}', parameters('kind'), variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-vision-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Computer Vision K in vault as S"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-vision-api-endpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Computer Vision Endpoint in vault as S"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "computerVisionEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('pendCogSerName')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "privateDnsVision": {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('serviceSettingDeployAzureAIVision'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsVision{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('csVision').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "csVision",
        "projectResourceGroup"
      ]
    },
    "csSpeech": {
      "condition": "[equals(parameters('serviceSettingDeployAzureSpeech'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AISpeech4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csSpeechSKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": {
            "value": "[format('speech-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "SpeechServices"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-speech-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5938952191166567708"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "SpeechServices"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(parameters('publicNetworkAccess'), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('pend-nic-{0}-{1}', parameters('kind'), variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-speech-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Speech k in vault"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-speech-api-ednpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Speech Endpoint in vault"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('pendCogSerName')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "privateDnsSpeech": {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('serviceSettingDeployAzureSpeech'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkSpeech{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('csSpeech').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "csSpeech",
        "projectResourceGroup"
      ]
    },
    "csDocIntelligence": {
      "condition": "[equals(parameters('serviceSettingDeployAIDocIntelligence'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AIDocIntelligence4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "csSKU": {
            "value": "[parameters('csDocIntelligenceSKU')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "name": {
            "value": "[format('docs-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
          },
          "kind": {
            "value": "FormRecognizer"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-docs-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), createObject('value', true()), createObject('value', parameters('enablePublicNetworkAccessForCognitive')))]",
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9794638026923420631"
            }
          },
          "parameters": {
            "csSKU": {
              "type": "string",
              "defaultValue": "S0"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "FormRecognizer"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "restore": {
              "type": "bool"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('name'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('csSKU')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(parameters('publicNetworkAccess'), false(), true())]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('pend-nic-{0}-{1}', parameters('kind'), variables('nameCleaned'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aidocintelligence-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').key1]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azur AI Document Intelligence K in vault as S"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aidocintelligence-api-endpoint')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azure AI Document Intelligence Endpoint in vault as S"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01', 'full').identity.principalId]"
            },
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint]"
            },
            "host": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2024-10-01').endpoint, '/')[2]]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('pendCogSerName')]",
                  "type": "cognitiveservices",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "privateDnsDocInt": {
      "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('serviceSettingDeployAIDocIntelligence'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsDocInt{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('csDocIntelligence').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "csDocIntelligence",
        "projectResourceGroup"
      ]
    },
    "aiServices": {
      "condition": "[and(not(variables('resourceExists').aiServices), parameters('enableAIServices'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AIServices4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "[parameters('csAIservicesSKU')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "cognitiveName": {
            "value": "[variables('aiServicesName')]"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-aiservices-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "modelGPT4Version": {
            "value": "[parameters('modelGPT4Version')]"
          },
          "kind": {
            "value": "[parameters('kindAIServices')]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]"
            ]
          },
          "ipRules": "[if(empty(variables('processedIpRulesAIServices')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAIServices')))]",
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          },
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "deployModel_gpt_4": {
            "value": "[parameters('deployModel_gpt_4')]"
          },
          "modelGPT4Name": {
            "value": "[parameters('modelGPT4Name')]"
          },
          "deployModel_gpt_4o_mini": {
            "value": "[parameters('deployModel_gpt_4o_mini')]"
          },
          "deployModel_text_embedding_3_small": {
            "value": "[parameters('deployModel_text_embedding_3_small')]"
          },
          "deployModel_text_embedding_3_large": {
            "value": "[parameters('deployModel_text_embedding_3_large')]"
          },
          "deployModel_text_embedding_ada_002": {
            "value": "[parameters('deployModel_text_embedding_ada_002')]"
          },
          "default_embedding_capacity": {
            "value": "[parameters('default_embedding_capacity')]"
          },
          "default_gpt_capacity": {
            "value": "[parameters('default_gpt_capacity')]"
          },
          "default_model_sku": {
            "value": "[parameters('default_model_sku')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7670694936160769696"
            }
          },
          "parameters": {
            "cognitiveName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the service"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that will be associated with resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location that will be used"
              }
            },
            "sku": {
              "type": "string",
              "metadata": {
                "description": "Specifies the SKU, where default is standard"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of vNet"
              }
            },
            "restore": {
              "type": "bool",
              "metadata": {
                "description": "Restore instead of Purge"
              }
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool",
              "defaultValue": true
            },
            "kind": {
              "type": "string",
              "defaultValue": "AIServices"
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "acrNameDummy": {
              "type": "string",
              "defaultValue": ""
            },
            "keyvaultName": {
              "type": "string"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_text_embedding_ada_002": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_text_embedding_3_small": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_text_embedding_3_large": {
              "type": "bool",
              "defaultValue": false
            },
            "deployModel_gpt_4o_mini": {
              "type": "bool",
              "defaultValue": false
            },
            "default_embedding_capacity": {
              "type": "int",
              "defaultValue": 25
            },
            "default_gpt_capacity": {
              "type": "int",
              "defaultValue": 40
            },
            "default_model_sku": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "deployModel_gpt_4": {
              "type": "bool",
              "defaultValue": false
            },
            "modelGPT4Name": {
              "type": "string",
              "defaultValue": ""
            },
            "modelGPT4Version": {
              "type": "string",
              "defaultValue": ""
            },
            "modelGPT4SKUName": {
              "type": "string",
              "defaultValue": "Standard"
            },
            "modelGPT4SKUCapacity": {
              "type": "int",
              "defaultValue": 30
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('cognitiveName'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[variables('nameCleaned')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": false,
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccessWithPerimeter'), 'Allow', 'Deny'), 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              },
              "identity": {
                "type": "SystemAssigned"
              }
            },
            {
              "condition": "[parameters('deployModel_text_embedding_3_small')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-3-small')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-3-small"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
              ]
            },
            {
              "condition": "[parameters('deployModel_text_embedding_ada_002')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-ada-002')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-3-small')]"
              ]
            },
            {
              "condition": "[parameters('deployModel_gpt_4o_mini')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'gpt-4o-mini')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_gpt_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "gpt-4o-mini"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-ada-002')]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-3-small')]"
              ]
            },
            {
              "condition": "[and(and(parameters('deployModel_gpt_4'), not(empty(parameters('modelGPT4Version')))), not(empty(parameters('modelGPT4Name'))))]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), parameters('modelGPT4Name'))]",
              "sku": {
                "name": "[parameters('modelGPT4SKUName')]",
                "capacity": "[parameters('modelGPT4SKUCapacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('modelGPT4Name')]",
                  "version": "[parameters('modelGPT4Version')]"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-ada-002')]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'gpt-4o-mini')]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-3-small')]"
              ]
            },
            {
              "condition": "[parameters('deployModel_text_embedding_3_large')]",
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('nameCleaned'), 'text-embedding-3-large')]",
              "sku": {
                "name": "[parameters('default_model_sku')]",
                "capacity": "[parameters('default_embedding_capacity')]"
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-3-large"
                },
                "raiPolicyName": "Microsoft.DefaultV2",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-ada-002')]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), parameters('modelGPT4Name'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'gpt-4o-mini')]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('nameCleaned'), 'text-embedding-3-small')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('pendCogSerName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
              ]
            },
            {
              "condition": "[equals(parameters('centralDnsZoneByPolicyInHub'), false())]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('pendCogSerName'), format('{0}DnsZone', parameters('pendCogSerName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateLinksDnsZones').openai.name]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').openai.id]"
                    }
                  },
                  {
                    "name": "[parameters('privateLinksDnsZones').cognitiveservices.name]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').cognitiveservices.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('pendCogSerName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-aiservices-ep')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01').endpoint]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azure AI Services endpoint in vault as S"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'aifactory-proj-openai-ep')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
              ],
              "metadata": {
                "description": "Key Vault: Azure OpenAI endpoint in vault as S. Same key as Azure AI Services"
              }
            }
          ],
          "outputs": {
            "aiServicesEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01').endpoint]"
            },
            "endpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01').endpoints]"
            },
            "openAIEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]"
            },
            "aiServicesPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned')), '2024-10-01', 'full').identity.principalId]"
            },
            "name": {
              "type": "string",
              "value": "[variables('nameCleaned')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', variables('nameCleaned'))]"
            }
          }
        }
      },
      "dependsOn": [
        "acrCommon2",
        "kv1",
        "projectResourceGroup",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "csAzureOpenAI": {
      "condition": "[and(not(variables('resourceExists').openai), parameters('serviceSettingDeployAzureOpenAI'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AzureOpenAI4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cognitiveName": {
            "value": "[variables('aoaiName')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "laWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "restore": {
            "value": "[parameters('restore')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "commonResourceGroupName": {
            "value": "[variables('commonResourceGroup')]"
          },
          "sku": {
            "value": "[parameters('csOpenAISKU')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[variables('genaiSubnetName')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "modelGPT4Version": {
            "value": "[parameters('modelGPT4Version')]"
          },
          "aiSearchPrincipalId": "[if(parameters('enableAISearch'), if(variables('resourceExists').aiSearch, createObject('value', reference('aiSearchREF', '2024-03-01-preview', 'full').identity.principalId), createObject('value', reference('aiSearchService').outputs.principalId.value)), createObject('value', ''))]",
          "kind": {
            "value": "[parameters('kindAOpenAI')]"
          },
          "pendCogSerName": {
            "value": "[format('p-{0}-openai-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "disableLocalAuth": {
            "value": "[parameters('disableLocalAuth')]"
          },
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]",
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('aksSubnetName'))]"
            ]
          },
          "ipRules": {
            "copy": [
              {
                "name": "value",
                "count": "[length(variables('ipWhitelist_array'))]",
                "input": "[createObject('action', 'Allow', 'value', variables('ipWhitelist_array')[copyIndex('value')])]"
              }
            ]
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9860319069122143217"
            }
          },
          "parameters": {
            "cognitiveName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the service"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that will be associated with resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location that will be used"
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "metadata": {
                "description": "Specifies the SKU, where default is standard"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the VNET name that will be associated with the private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "pendCogSerName": {
              "type": "string"
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "restore": {
              "type": "bool",
              "defaultValue": false
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true
            },
            "modelGPT4Version": {
              "type": "string",
              "defaultValue": "1106-Preview"
            },
            "laWorkspaceName": {
              "type": "string"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "commonResourceGroupName": {
              "type": "string"
            },
            "aiSearchPrincipalId": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ],
            "nameCleaned": "[toLower(replace(parameters('cognitiveName'), '-', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2024-10-01",
              "name": "[parameters('cognitiveName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "allowedFqdnList": [],
                "customSubDomainName": "[variables('nameCleaned')]",
                "publicNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[if(or(parameters('publicNetworkAccess'), parameters('enablePublicAccessWithPerimeter')), false(), true())]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', parameters('ipRules')), null())]"
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('cognitiveName'), 'text-embedding-ada-002')]",
              "sku": {
                "name": "Standard",
                "capacity": 25
              },
              "properties": {
                "model": {
                  "format": "OpenAI",
                  "name": "text-embedding-ada-002",
                  "version": "2"
                },
                "raiPolicyName": "Microsoft.Default",
                "versionUpgradeOption": "OnceNewDefaultVersionAvailable"
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('cognitiveName'))]",
              "name": "default",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('commonResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('laWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ],
                "logAnalyticsDestinationType": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('pendCogSerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('pend-nic-{0}-{1}', parameters('kind'), parameters('cognitiveName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('pendCogSerName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                      "groupIds": [
                        "account"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', parameters('cognitiveName'), 'text-embedding-ada-002')]"
              ]
            }
          ],
          "outputs": {
            "cognitiveId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]"
            },
            "azureOpenAIEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName')), '2024-10-01').endpoint]"
            },
            "cognitiveName": {
              "type": "string",
              "value": "[parameters('cognitiveName')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName')), '2024-10-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('pendCogSerName')]",
                  "type": "openai",
                  "id": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('cognitiveName'))]",
                  "groupid": "account"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "acrCommon2",
        "aiSearchREF",
        "aiSearchService",
        "kv1",
        "projectResourceGroup",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "privateDnsAzureOpenAI": {
      "condition": "[and(and(not(variables('resourceExists').openai), parameters('serviceSettingDeployAzureOpenAI')), not(parameters('centralDnsZoneByPolicyInHub')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privDnsZoneLAOAI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('csAzureOpenAI').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "csAzureOpenAI",
        "projectResourceGroup"
      ]
    },
    "aiSearchService": {
      "condition": "[and(not(variables('resourceExists').aiSearch), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AzureAISearch4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[variables('safeNameAISearch')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "replicaCount": {
            "value": 1
          },
          "partitionCount": {
            "value": 1
          },
          "privateEndpointName": {
            "value": "[format('p-{0}-aisearch-{1}', variables('projectName'), variables('genaiName'))]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "semanticSearchTier": {
            "value": "[parameters('semanticSearchTier')]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "skuName": {
            "value": "[parameters('aiSearchSKUName')]"
          },
          "enableSharedPrivateLink": {
            "value": "[parameters('aiSearchEnableSharedPrivateLink')]"
          },
          "sharedPrivateLinks": {
            "value": []
          },
          "ipRules": "[if(empty(variables('processedIpRulesAISearch')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAISearch')))]",
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5851328999579387589"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of service"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "tags": {
              "type": "object"
            },
            "location": {
              "type": "string"
            },
            "enableSharedPrivateLink": {
              "type": "bool"
            },
            "acrNameDummy": {
              "type": "string",
              "defaultValue": ""
            },
            "sharedPrivateLinks": {
              "type": "array",
              "defaultValue": []
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "S0",
                "S1",
                "standard",
                "standard2"
              ]
            },
            "hostingMode": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default",
                "highDensity"
              ]
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 1
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 1
            },
            "privateEndpointName": {
              "type": "string"
            },
            "semanticSearchTier": {
              "type": "string",
              "defaultValue": "disabled",
              "allowedValues": [
                "disabled",
                "free",
                "standard"
              ]
            },
            "publicNetworkAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "hostName": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]"
          },
          "resources": [
            {
              "copy": {
                "name": "aiSearchSharedPend::sharedPrivateLinkResource",
                "count": "[length(parameters('sharedPrivateLinks'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('enableSharedPrivateLink'), true())]",
              "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
              "apiVersion": "2024-06-01-preview",
              "name": "[format('{0}/{1}', parameters('aiSearchName'), format('{0}-shared-pe-{1}', parameters('aiSearchName'), copyIndex()))]",
              "properties": "[parameters('sharedPrivateLinks')[copyIndex()]]",
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('enableSharedPrivateLink'), true())]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-03-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "standard2"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "replicaCount": "[parameters('replicaCount')]",
                "hostingMode": "[parameters('hostingMode')]",
                "partitionCount": "[parameters('partitionCount')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "networkRuleSet": {
                  "bypass": "AzureServices",
                  "ipRules": "[parameters('ipRules')]"
                },
                "semanticSearch": "[parameters('semanticSearchTier')]"
              }
            },
            {
              "condition": "[equals(parameters('enableSharedPrivateLink'), false())]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-03-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "replicaCount": "[parameters('replicaCount')]",
                "hostingMode": "[parameters('hostingMode')]",
                "partitionCount": "[parameters('partitionCount')]",
                "publicNetworkAccess": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('publicNetworkAccess')), 'Enabled', 'Disabled')]",
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'ipRules', parameters('ipRules')), null())]",
                "semanticSearch": "[parameters('semanticSearchTier')]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-01-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                      "groupIds": [
                        "searchService"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
              ]
            }
          ],
          "outputs": {
            "aiSearchEndpoint": {
              "type": "string",
              "value": "[variables('hostName')]"
            },
            "aiSearchName": {
              "type": "string",
              "value": "[parameters('aiSearchName')]"
            },
            "aiSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-03-01-preview', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "searchService",
                  "id": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "acrCommon2",
        "kv1",
        "projectResourceGroup",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "privateDnsAiSearchService": {
      "condition": "[and(and(not(variables('resourceExists').aiSearch), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('priDZoneSA1{0}{1}', variables('genaiName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": "[if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.dnsConfig.value), createObject('value', createArray()))]",
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiSearchService",
        "createPrivateDnsZones",
        "projectResourceGroup"
      ]
    },
    "sa4AIsearch": {
      "condition": "[not(variables('resourceExists').storageAccount2001)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('GenAISAAcc4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccount2001Name')]"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "blobPrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-blob-{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "filePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-file-{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "queuePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-queue-{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tablePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-table-{3}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesSa')), createObject('value', createArray()), createObject('value', variables('processedIpRulesSa')))]",
          "containers": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "files": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]",
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('aksSubnetName'))]"
            ]
          },
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://*.ml.azure.com",
                  "https://ai.azure.com",
                  "https://*.ai.azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
                  "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]",
                  "https://*.instances.azureml.ms",
                  "https://*.azureml.ms"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "maxAgeInSeconds": 2520,
                "exposedHeaders": [
                  "*"
                ],
                "allowedHeaders": [
                  "*"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9433826304063167379"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new storage account"
              }
            },
            "blobPrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies name of the blob private endpoint"
              }
            },
            "filePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the file service private endpoint"
              }
            },
            "queuePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the queue service private endpoint"
              }
            },
            "tablePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the table service private endpoint"
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "files": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Specifies the name of the storage account SKU"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the id of the subnet used for the private endpoints"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the storage acocunt resources"
              }
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "action": "Allow",
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]"
                }
              }
            ],
            "groupIds": [
              {
                "name": "[parameters('blobPrivateEndpointName')]",
                "gid": "blob"
              },
              {
                "name": "[parameters('filePrivateEndpointName')]",
                "gid": "file"
              },
              {
                "name": "[parameters('queuePrivateEndpointName')]",
                "gid": "queue"
              },
              {
                "name": "[parameters('tablePrivateEndpointName')]",
                "gid": "table"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "sacc2::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "sacc::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": true,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), null())]"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicGenAIAccess'), false())]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": false,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": "[variables('rules')]",
                  "ipRules": "[if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('blobPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('blobPrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('blobPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('filePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('filePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('filePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "file"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('queuePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('queuePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('queuePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "queue"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('tablePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('tablePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('tablePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "table"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), parameters('storageAccountName'), parameters('storageAccountName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('blobPrivateEndpointName')]",
                  "type": "blob",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('filePrivateEndpointName')]",
                  "type": "file",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('queuePrivateEndpointName')]",
                  "type": "queue",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('tablePrivateEndpointName')]",
                  "type": "table",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "privateDnsStorageGenAI": {
      "condition": "[and(not(variables('resourceExists').storageAccount2001), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('priDZoneSA2{0}{1}', variables('genaiName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('sa4AIsearch').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "projectResourceGroup",
        "sa4AIsearch"
      ]
    },
    "acr": {
      "condition": "[and(not(variables('resourceExists').acrProject), equals(parameters('useCommonACR'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('acrProjectName')]"
          },
          "skuName": {
            "value": "Premium"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}{1}-containerreg-to-vnt-mlcmn', variables('projectName'), parameters('locationSuffix'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1922574652700650329"
            }
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the Azure container registry that will be deployed"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Premium"
              ],
              "metadata": {
                "description": "(Optional) Specifies the Azure container registry service tier name, defaults to premium because of the private endpoints association"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with azure container registry resources"
              }
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "policyOn": "disabled",
            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2024-11-01-preview",
              "name": "[variables('containerRegistryNameCleaned')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'ipRules', createArray()), null())]",
                "dataEndpointEnabled": false,
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[variables('policyOn')]"
                  },
                  "retentionPolicy": {
                    "status": "[variables('policyOn')]",
                    "days": 7
                  },
                  "trustPolicy": {
                    "status": "[variables('policyOn')]",
                    "type": "Notary"
                  }
                },
                "publicNetworkAccess": "[if(not(parameters('enablePublicAccessWithPerimeter')), 'Disabled', 'Enabled')]",
                "zoneRedundancy": "Disabled"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                      "groupIds": [
                        "registry"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryNameCleaned')]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned')), '2024-11-01-preview').loginServer]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "registry",
                  "id": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "acrCommon2": {
      "condition": "[equals(parameters('useCommonACR'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMLGenaIContReg4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[variables('acrCommonName')]"
          },
          "skuName": {
            "value": "Premium"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('common_subnet_name_local')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-acr-cmn{0}-containerreg-to-vnt-mlcmn', parameters('locationSuffix'))]"
          },
          "tags": {
            "value": "[reference('acrCommon', '2021-09-01', 'full').tags]"
          },
          "location": {
            "value": "[reference('acrCommon', '2021-09-01', 'full').location]"
          },
          "enablePublicAccessWithPerimeter": "[if(equals(reference('acrCommon').publicNetworkAccess, 'Enabled'), createObject('value', true()), createObject('value', parameters('enablePublicAccessWithPerimeter')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1922574652700650329"
            }
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the Azure container registry that will be deployed"
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Premium"
              ],
              "metadata": {
                "description": "(Optional) Specifies the Azure container registry service tier name, defaults to premium because of the private endpoints association"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with azure container registry resources"
              }
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "policyOn": "disabled",
            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2024-11-01-preview",
              "name": "[variables('containerRegistryNameCleaned')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "adminUserEnabled": true,
                "networkRuleSet": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('defaultAction', 'Deny', 'ipRules', createArray()), null())]",
                "dataEndpointEnabled": false,
                "networkRuleBypassOptions": "AzureServices",
                "policies": {
                  "quarantinePolicy": {
                    "status": "[variables('policyOn')]"
                  },
                  "retentionPolicy": {
                    "status": "[variables('policyOn')]",
                    "days": 7
                  },
                  "trustPolicy": {
                    "status": "[variables('policyOn')]",
                    "type": "Notary"
                  }
                },
                "publicNetworkAccess": "[if(not(parameters('enablePublicAccessWithPerimeter')), 'Disabled', 'Enabled')]",
                "zoneRedundancy": "Disabled"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]",
                      "groupIds": [
                        "registry"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
              ]
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[variables('containerRegistryNameCleaned')]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned')), '2024-11-01-preview').loginServer]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "registry",
                  "id": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "acrCommon"
      ]
    },
    "sacc": {
      "condition": "[not(variables('resourceExists').storageAccount1001)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMLGenAIStorageAcc4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccount1001Name')]"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "blobPrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-blob-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "filePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-file-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "queuePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-queue-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tablePrivateEndpointName": {
            "value": "[format('p-sa-{0}{1}{2}-table-{3}ml', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "containers": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "files": {
            "value": [
              {
                "name": "default"
              }
            ]
          },
          "vnetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]",
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('aksSubnetName'))]"
            ]
          },
          "ipRules": "[if(empty(variables('processedIpRulesSa')), createObject('value', createArray()), createObject('value', variables('processedIpRulesSa')))]",
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://*.ml.azure.com",
                  "https://ai.azure.com",
                  "https://*.ai.azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]",
                  "[format('https://457c18fd-a6d7-4461-999a-be092e9d1ec0.workspace.{0}.api.azureml.ms', parameters('location'))]",
                  "https://*.instances.azureml.ms",
                  "https://*.azureml.ms"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "maxAgeInSeconds": 2520,
                "exposedHeaders": [
                  "*"
                ],
                "allowedHeaders": [
                  "*"
                ]
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9433826304063167379"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new storage account"
              }
            },
            "blobPrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies name of the blob private endpoint"
              }
            },
            "filePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the file service private endpoint"
              }
            },
            "queuePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the queue service private endpoint"
              }
            },
            "tablePrivateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the table service private endpoint"
              }
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "containers": {
              "type": "array",
              "defaultValue": []
            },
            "files": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "skuName": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Premium_LRS",
                "Premium_ZRS"
              ],
              "metadata": {
                "description": "Specifies the name of the storage account SKU"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the id of the subnet used for the private endpoints"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the storage acocunt resources"
              }
            },
            "vnetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vnetRules'))]",
                "input": {
                  "action": "Allow",
                  "id": "[parameters('vnetRules')[copyIndex('rules')]]"
                }
              }
            ],
            "groupIds": [
              {
                "name": "[parameters('blobPrivateEndpointName')]",
                "gid": "blob"
              },
              {
                "name": "[parameters('filePrivateEndpointName')]",
                "gid": "file"
              },
              {
                "name": "[parameters('queuePrivateEndpointName')]",
                "gid": "queue"
              },
              {
                "name": "[parameters('tablePrivateEndpointName')]",
                "gid": "table"
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "sacc2::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "sacc::blobServices::container",
                "count": "[length(parameters('containers'))]"
              },
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('containers')[copyIndex()].name)]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('containers'))))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicGenAIAccess'), false()), not(empty(parameters('files'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": "[parameters('corsRules')]"
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": true,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'virtualNetworkRules', variables('rules'), 'ipRules', if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))), null())]"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicGenAIAccess'), false())]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2024-01-01",
              "name": "[parameters('storageAccountName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "properties": {
                "accessTier": "Hot",
                "publicNetworkAccess": "Disabled",
                "allowCrossTenantReplication": true,
                "allowSharedKeyAccess": false,
                "allowBlobPublicAccess": false,
                "isHnsEnabled": false,
                "isNfsV3Enabled": false,
                "enableExtendedGroups": false,
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": false,
                  "services": {
                    "blob": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "file": {
                      "enabled": true,
                      "keyType": "Account"
                    },
                    "queue": {
                      "enabled": true,
                      "keyType": "Service"
                    },
                    "table": {
                      "enabled": true,
                      "keyType": "Service"
                    }
                  }
                },
                "keyPolicy": {
                  "keyExpirationPeriodInDays": 7
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": "[variables('rules')]",
                  "ipRules": "[if(empty(parameters('ipRules')), createArray(), parameters('ipRules'))]"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('blobPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('blobPrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('blobPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "blob"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('filePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('filePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('filePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "file"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('queuePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('queuePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('queuePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "queue"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('tablePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('tablePrivateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('tablePrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
                      "groupIds": [
                        "table"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountId": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[if(not(parameters('enablePublicGenAIAccess')), parameters('storageAccountName'), parameters('storageAccountName'))]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('blobPrivateEndpointName')]",
                  "type": "blob",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('filePrivateEndpointName')]",
                  "type": "file",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('queuePrivateEndpointName')]",
                  "type": "queue",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                },
                {
                  "name": "[parameters('tablePrivateEndpointName')]",
                  "type": "table",
                  "id": "[if(not(parameters('enablePublicGenAIAccess')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "privateDnsStorage": {
      "condition": "[and(not(variables('resourceExists').storageAccount1001), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('priDZoneSA3{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('sacc').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "projectResourceGroup",
        "sacc"
      ]
    },
    "kv1": {
      "condition": "[not(variables('resourceExists').keyvault)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AMGenAILKeyV4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[variables('keyvaultName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "enablePurgeProtection": {
            "value": "[parameters('keyvaultEnablePurgeProtection')]"
          },
          "soft_delete_days": {
            "value": "[parameters('keyvaultSoftDeleteDays')]"
          },
          "tenantIdentity": {
            "value": "[parameters('tenantId')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}-kv1-to-vnt-mlcmn', variables('projectName'))]"
          },
          "keyvaultNetworkPolicySubnets": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]",
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('aksSubnetName'))]"
            ]
          },
          "accessPolicies": {
            "value": []
          },
          "ipRules": "[if(empty(variables('processedIpRulesKv')), createObject('value', createArray()), createObject('value', variables('processedIpRulesKv')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14656584830533010964"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the name of the keyvault that is created"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "(Required) Specifies the tags that will be associated with keyvault resources"
              }
            },
            "tenantIdentity": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the tenant which the keyvault belongs to"
              }
            },
            "keyvaultNetworkPolicySubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an object containing network policies"
              }
            },
            "accessPolicies": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of objects containing access policies"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "(Optional) Specifies an array of objects containing ip rules"
              }
            },
            "soft_delete_days": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Optional) Specifies number of days to keep keyvault if deleted. Retention: 7-30 days. ESML defaults to 7 days"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location"
              }
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('keyvaultNetworkPolicySubnets'))]",
                "input": {
                  "id": "[parameters('keyvaultNetworkPolicySubnets')[copyIndex('rules')]]",
                  "ignoreMissingVnetServiceEndpoint": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyvaultName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": false,
                "enabledForDiskEncryption": false,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": "[if(parameters('enablePurgeProtection'), parameters('soft_delete_days'), null())]",
                "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
                "publicNetworkAccess": "[if(or(and(parameters('enablePublicGenAIAccess'), not(empty(parameters('ipRules')))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "tenantId": "[parameters('tenantIdentity')]",
                "networkAcls": "[if(not(parameters('enablePublicAccessWithPerimeter')), createObject('bypass', 'AzureServices', 'defaultAction', if(parameters('enablePublicAccessWithPerimeter'), 'Allow', 'Deny'), 'ipRules', parameters('ipRules'), 'virtualNetworkRules', variables('rules')), null())]",
                "accessPolicies": "[parameters('accessPolicies')]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                },
                "customNetworkInterfaceName": "[format('{0}-nic', parameters('privateEndpointName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                      "groupIds": [
                        "vault"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyvaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            "keyvaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')), '2023-07-01').vaultUri]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "vault",
                  "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup",
        "subnet_aks_ref",
        "subnet_genai_ref"
      ]
    },
    "privateDnsKeyVault": {
      "condition": "[and(not(variables('resourceExists').keyvault), equals(parameters('centralDnsZoneByPolicyInHub'), false()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('priDnZoneKV{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('kv1').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "kv1",
        "projectResourceGroup"
      ]
    },
    "applicationInsightSWC": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AppInsightsSWC4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('applicationInsightName')]"
          },
          "logWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logWorkspaceNameRG": {
            "value": "[variables('commonResourceGroup')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8353361888659384685"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the application insight resources"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to the application insights resources"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location where application insights should be deployed"
              }
            },
            "logWorkspaceName": {
              "type": "string"
            },
            "logWorkspaceNameRG": {
              "type": "string"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceNameRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]"
              }
            }
          ],
          "outputs": {
            "ainsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "vmPrivate": {
      "condition": "[and(not(variables('resourceExists').vm), equals(parameters('serviceSettingDeployProjectVM'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privVM4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "hybridBenefit": {
            "value": "[parameters('hybridBenefit')]"
          },
          "vmSize": {
            "value": "[parameters('vmSKU')[parameters('vmSKUSelectedArrayIndex')]]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[variables('vmName')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetId": {
            "value": "[variables('vnetId')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "149838002065094260"
            }
          },
          "parameters": {
            "kvSecretNameSuffix": {
              "type": "string",
              "defaultValue": "-001",
              "metadata": {
                "description": "default is -001 such as esml-dsvm-username-001 as secret name in keyvault Ex: creating multipe VM -001, -002,-003"
              }
            },
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Specifies a secure string used as password new local admin user"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the local admin user"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2_v3",
              "metadata": {
                "description": "Size of the virtual machine."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "location for all resources"
              }
            },
            "vmName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the virtual machine"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the subnet that the virtual machine should be connected to"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "Specift the virtual network id used for network interface"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "The tags that should be applied on virtual machine resources"
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "(Required) speficies the keyvault used to save local admin credentials"
              }
            },
            "hybridBenefit": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "(Required) true if Hybrid benefits for Windows server VMs, else FALSE for Pay-as-you-go"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1736467877,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "osDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended for production purpose is to upgrade to Premium_LRS "
              }
            },
            "extraDiskType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "default StandardSSD_LRS as demo mode, recommended is to upgrade to Premium_LRS for productional purpose "
              }
            },
            "extraDiskSizeGB": {
              "type": "int",
              "defaultValue": 128,
              "metadata": {
                "description": "default is 128GB, change to bigger, 1024, GB if much local data"
              }
            }
          },
          "variables": {
            "nicName": "[format('{0}-nic-{1}', parameters('vmName'), substring(uniqueString(parameters('vmName')), 0, 5))]",
            "subnetRef": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]",
            "esmlProjectKVNameUser": "[format('esml-dsvm-username{0}', parameters('kvSecretNameSuffix'))]",
            "esmlProjectKVNamePwd": "[format('esml-dsvm-password{0}', parameters('kvSecretNameSuffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[variables('subnetRef')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2020-12-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "licenseType": "[if(equals(parameters('hybridBenefit'), true()), 'Windows_Server', 'None')]",
                "osProfile": {
                  "computerName": "[substring(parameters('vmName'), 0, 14)]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "enableAutomaticUpdates": true,
                    "provisionVMAgent": true,
                    "patchSettings": {
                      "enableHotpatching": false,
                      "patchMode": "AutomaticByOS"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "microsoft-dsvm",
                    "offer": "dsvm-win-2022",
                    "sku": "winserver-2022",
                    "version": "latest"
                  },
                  "osDisk": {
                    "createOption": "FromImage",
                    "diskSizeGB": 256,
                    "managedDisk": {
                      "storageAccountType": "[parameters('osDiskType')]"
                    }
                  },
                  "dataDisks": [
                    {
                      "diskSizeGB": "[parameters('extraDiskSizeGB')]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('extraDiskType')]"
                      },
                      "lun": 0,
                      "createOption": "Empty"
                    }
                  ]
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2020-12-01",
              "name": "[format('{0}/{1}', parameters('vmName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "typeHandlerVersion": "1.0",
                "type": "AADLoginForWindows",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.DevTestLab/schedules",
              "apiVersion": "2018-09-15",
              "name": "[format('shutdown-computevm-{0}', parameters('vmName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "dailyRecurrence": {
                  "time": "0330"
                },
                "status": "Enabled",
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "taskType": "ComputeVmShutdownTask",
                "timeZoneId": "W. Europe Standard Time"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNameUser'))]",
              "properties": {
                "value": "[parameters('adminUsername')]",
                "contentType": "ESML generated local admin",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esmlProjectKVNamePwd'))]",
              "properties": {
                "contentType": "[format('ESML generated local admin password for username {0} on VM', parameters('adminUsername'))]",
                "value": "[parameters('adminPassword')]",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "addSecret": {
      "condition": "[not(variables('resourceExists').keyvault)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}S2P{1}', variables('keyvaultName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spAppIDValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleAppID_SeedingKeyvaultName')]"
            }
          },
          "spOIDValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          },
          "spSecretValue": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleSecret_SeedingKeyvaultName')]"
            }
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "keyvaultNameRG": {
            "value": "[format('prjRG{0}', variables('deploymentProjSpecificUniqueSuffix'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18118337329344880976"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": " KEYVAULT for ESML coreteam or PROJECT team"
              }
            },
            "keyvaultNameRG": {
              "type": "string"
            },
            "spIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-id",
              "metadata": {
                "description": "secret name of App ID for service principle"
              }
            },
            "spAppIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ID"
              }
            },
            "spSecret": {
              "type": "string",
              "defaultValue": "esml-project-sp-secret",
              "metadata": {
                "description": "secret name of for service principle App ID"
              }
            },
            "spSecretValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle secret"
              }
            },
            "esmlTenantID": {
              "type": "string",
              "defaultValue": "esml-tenant-id",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlTenantIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "secret value of Tenant ID"
              }
            },
            "esmlSubscriptionID": {
              "type": "string",
              "defaultValue": "esml-subscription-id",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "esmlSubscriptionIDSecret": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "secret value of Subscripton ID of current ESML environment"
              }
            },
            "expiration_date_default_2025_01_10_epoch": {
              "type": "int",
              "defaultValue": 1799626400,
              "metadata": {
                "description": "default keyvault secret expiration date in inteter, EPOC, seconds after 1970"
              }
            },
            "spOIDKey": {
              "type": "string",
              "defaultValue": "esml-project-sp-oid",
              "metadata": {
                "description": "secret name of Object ID for service principle"
              }
            },
            "spOIDValue": {
              "type": "securestring",
              "metadata": {
                "description": "value of service principle ObjectID"
              }
            }
          },
          "variables": {
            "esml_project_dbx_token_key": "esml-project-dbx-token"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), variables('esml_project_dbx_token_key'))]",
              "properties": {
                "value": "TODO Databricks token",
                "contentType": "ESML generated. TODO:Databricks token - needed for Azure ML pipelines with DatabricksSteps",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spIDKey'))]",
              "properties": {
                "value": "[parameters('spAppIDValue')]",
                "contentType": "Application ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spSecret'))]",
              "properties": {
                "value": "[parameters('spSecretValue')]",
                "contentType": "ESML generated. From seeding keyvalt (esml-project-sp-secret). Project specific service principle secret",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('spOIDKey'))]",
              "properties": {
                "value": "[parameters('spOIDValue')]",
                "contentType": "OBJECT ID of service principle",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlTenantID'))]",
              "properties": {
                "value": "[parameters('esmlTenantIDSecret')]",
                "contentType": "ESML generated - tenant ID",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('esmlSubscriptionID'))]",
              "properties": {
                "value": "[parameters('esmlSubscriptionIDSecret')]",
                "contentType": "ESML generated - Subscription ID for current ESML environment",
                "attributes": {
                  "enabled": true,
                  "exp": "[parameters('expiration_date_default_2025_01_10_epoch')]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "kvPrjAccessPolicyTechnicalContactAll": {
      "condition": "[not(variables('resourceExists').keyvault)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}AP{1}', variables('keyvaultName'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGetListSet')]"
          },
          "keyVaultResourceName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalPrincipalIds": {
            "value": "[union(variables('p011_genai_team_lead_array'), array(if(variables('resourceExists').miPrj, reference('miPrjREF').principalId, reference('miForPrj').outputs.managedIdentityPrincipalId.value)), array(if(variables('resourceExists').miACA, reference('miACAREF').principalId, reference('miForAca').outputs.managedIdentityPrincipalId.value)))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "addSecret",
        "kv1",
        "miACAREF",
        "miForAca",
        "miForPrj",
        "miPrjREF"
      ]
    },
    "kvCommonAccessPolicyGetList": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}GL{1}', variables('kvNameCommon'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGetList')]"
          },
          "keyVaultResourceName": {
            "value": "[variables('kvNameCommon')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalPrincipalIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "commonKv"
      ]
    },
    "spCommonKeyvaultPolicyGetList": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('spGetList{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultPermissions": {
            "value": "[variables('secretGet')]"
          },
          "keyVaultResourceName": {
            "value": "[variables('kvNameCommon')]"
          },
          "policyName": {
            "value": "add"
          },
          "principalId": {
            "reference": {
              "keyVault": {
                "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('inputKeyvaultSubscription'), parameters('inputKeyvaultResourcegroup')), 'Microsoft.KeyVault/vaults', parameters('inputKeyvault'))]"
              },
              "secretName": "[parameters('projectServicePrincipleOID_SeedingKeyvaultName')]"
            }
          },
          "additionalPrincipalIds": {
            "value": []
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "18287811454060297975"
            }
          },
          "parameters": {
            "keyVaultResourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the KeyVault resource ex. kv-myservice."
              }
            },
            "principalId": {
              "type": "securestring",
              "metadata": {
                "description": "Principal Id of the Azure resource (Managed Identity)."
              }
            },
            "keyVaultPermissions": {
              "type": "object",
              "metadata": {
                "description": "Assigned permissions for Principal Id (Managed Identity)"
              }
            },
            "additionalPrincipalIds": {
              "type": "array",
              "metadata": {
                "description": "optinal additional, assigned permissions for Principal Id, ObjectID of AD users"
              }
            },
            "policyName": {
              "type": "string",
              "allowedValues": [
                "add",
                "remove",
                "replace"
              ],
              "metadata": {
                "description": "Policy name"
              }
            }
          },
          "variables": {
            "main_principal_2_array": "[array(parameters('principalId'))]",
            "all_principals": "[union(variables('main_principal_2_array'), parameters('additionalPrincipalIds'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultResourceName'), parameters('policyName'))]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(parameters('additionalPrincipalIds'))]",
                    "input": {
                      "objectId": "[parameters('additionalPrincipalIds')[copyIndex('accessPolicies')]]",
                      "permissions": "[parameters('keyVaultPermissions')]",
                      "tenantId": "[subscription().tenantId]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "commonKv"
      ]
    },
    "privateDnsContainerRegistry": {
      "condition": "[and(and(not(variables('resourceExists').acrProject), not(parameters('centralDnsZoneByPolicyInHub'))), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('priDnsZACR{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('acr').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "acr",
        "createPrivateDnsZones",
        "projectResourceGroup"
      ]
    },
    "bing": {
      "condition": "[and(not(variables('resourceExists').bing), equals(parameters('serviceSettingDeployBingSearch'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('BingSearch4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('bingName')]"
          },
          "location": {
            "value": "global"
          },
          "sku": {
            "value": "[parameters('bingSearchSKU')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17179168099573302819"
            },
            "description": "Creates a Bing Search Grounding instance."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "global"
            },
            "sku": {
              "type": "string",
              "defaultValue": "G1"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Bing/accounts",
              "apiVersion": "2020-06-10",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Bing.Grounding",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Bing/accounts'), parameters('tags')['Microsoft.Bing/accounts'], json('{}'))]",
              "sku": {
                "name": "[parameters('sku')]"
              }
            }
          ],
          "outputs": {
            "bingApiKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Bing/accounts', parameters('name')), '2020-06-10').key1]"
            },
            "endpoint": {
              "type": "string",
              "value": "https://api.bing.microsoft.com/"
            },
            "bingName": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "cosmosdb": {
      "condition": "[and(not(variables('resourceExists').cosmosDB), equals(parameters('serviceSettingDeployCosmosDB'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('CosmosDB4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('cosmosDBName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "ipRules": "[if(or(or(empty(variables('ipWhitelist_array')), not(parameters('enablePublicGenAIAccess'))), parameters('enablePublicAccessWithPerimeter')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_array')))]",
          "totalThroughputLimit": {
            "value": "[parameters('cosmosTotalThroughputLimit')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "vNetRules": {
            "value": [
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('defaultSubnet'))]",
              "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetNameFull'), variables('aksSubnetName'))]"
            ]
          },
          "kind": {
            "value": "[parameters('cosmosKind')]"
          },
          "minimalTlsVersion": {
            "value": "[parameters('cosmosMinimalTlsVersion')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "corsRules": {
            "value": [
              {
                "allowedOrigins": [
                  "https://mlworkspace.azure.ai",
                  "https://ml.azure.com",
                  "https://ai.azure.com",
                  "https://azure.com",
                  "https://mlworkspacecanary.azure.ai",
                  "https://mlworkspace.azureml-test.net",
                  "[format('https://42.{0}.instances.azureml.ms', parameters('location'))]"
                ],
                "allowedMethods": [
                  "GET",
                  "HEAD",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS",
                  "PATCH"
                ],
                "allowedHeaders": [
                  "Content-Type",
                  "Accept",
                  "Authorization",
                  "x-ms-blob-type",
                  "x-ms-blob-content-type",
                  "x-ms-version",
                  "x-ms-date",
                  "x-ms-copy-source",
                  "Content-Length",
                  "Origin",
                  "Access-Control-Request-Method",
                  "Access-Control-Request-Headers"
                ],
                "exposedHeaders": [
                  "Content-Length",
                  "Content-Type",
                  "Content-Range",
                  "Content-Encoding",
                  "Content-Language",
                  "Cache-Control",
                  "Last-Modified",
                  "ETag",
                  "x-ms-request-id",
                  "x-ms-version",
                  "x-ms-copy-status",
                  "x-ms-copy-progress"
                ],
                "maxAgeInSeconds": 2520
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9151356478799027478"
            },
            "description": "Creates an Azure Cosmos DB account."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "vNetRules": {
              "type": "array",
              "defaultValue": []
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "corsRules": {
              "type": "array",
              "defaultValue": []
            },
            "capacityMode": {
              "type": "string",
              "defaultValue": "Serverless",
              "allowedValues": [
                "Serverless",
                "Provisioned"
              ]
            },
            "totalThroughputLimit": {
              "type": "int",
              "defaultValue": 1000,
              "minValue": 1000,
              "maxValue": 1000000
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "GlobalDocumentDB",
                "MongoDB"
              ]
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "autoscaleMaxThroughput": {
              "type": "int",
              "defaultValue": 4000,
              "minValue": 4000,
              "maxValue": 1000000
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "aifdb"
            },
            "containerName": {
              "type": "string",
              "defaultValue": "defaultcontainer"
            },
            "partitionKeyPath": {
              "type": "string",
              "defaultValue": "/id"
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "Tls12"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-cosmosdb-con-string"
            },
            "keyvaultName": {
              "type": "string"
            },
            "defaultTtl": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Default TTL in seconds. Set to -1 to disable or positive integer for automatic document expiration"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "rules",
                "count": "[length(parameters('vNetRules'))]",
                "input": {
                  "id": "[string(parameters('vNetRules')[copyIndex('rules')])]",
                  "ignoreMissingVNetServiceEndpoint": true
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-12-01-preview",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipRules",
                    "count": "[length(parameters('ipRules'))]",
                    "input": {
                      "ipAddressOrRange": "[string(parameters('ipRules')[copyIndex('ipRules')])]"
                    }
                  }
                ],
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "createMode": "Default",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "databaseAccountOfferType": "Standard",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "apiProperties": "[if(equals(parameters('kind'), 'MongoDB'), createObject('serverVersion', '4.2'), createObject())]",
                "capacityMode": "[parameters('capacityMode')]",
                "capacity": "[if(equals(parameters('capacityMode'), 'Serverless'), createObject('totalThroughputLimit', parameters('totalThroughputLimit')), null())]",
                "enableFreeTier": false,
                "isVirtualNetworkFilterEnabled": "[not(equals(parameters('vNetRules'), createArray()))]",
                "networkAclBypass": "AzureServices",
                "publicNetworkAccess": "[if(or(parameters('enablePublicGenAIAccess'), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "virtualNetworkRules": "[if(parameters('enablePublicAccessWithPerimeter'), createArray(), variables('rules'))]"
              }
            },
            {
              "condition": "[equals(parameters('kind'), 'GlobalDocumentDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'GlobalDocumentDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), parameters('containerName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerName')]",
                  "partitionKey": {
                    "paths": [
                      "[parameters('partitionKeyPath')]"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "automatic": true,
                    "includedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "excludedPaths": [
                      {
                        "path": "/\"_etag\"/?"
                      }
                    ]
                  },
                  "defaultTtl": "[parameters('defaultTtl')]"
                },
                "options": "[if(equals(parameters('capacityMode'), 'Provisioned'), createObject('autoscaleSettings', createObject('maxThroughput', parameters('autoscaleMaxThroughput'))), createObject())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('name'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'MongoDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('kind'), 'MongoDB')]",
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2024-12-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), parameters('containerName'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resource": {
                  "id": "[parameters('containerName')]",
                  "shardKey": {
                    "[format('{0}', replace(parameters('partitionKeyPath'), '/', ''))]": "Hash"
                  },
                  "indexes": [
                    {
                      "key": {
                        "keys": [
                          "_id"
                        ]
                      }
                    }
                  ]
                },
                "options": "[if(equals(parameters('capacityMode'), 'Provisioned'), createObject('autoscaleSettings', createObject('maxThroughput', parameters('autoscaleMaxThroughput'))), createObject())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('name'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]",
                      "groupIds": [
                        "[if(equals(parameters('kind'), 'GlobalDocumentDB'), 'Sql', if(equals(parameters('kind'), 'MongoDB'), 'MongoDB', 'Cassandra'))]"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[if(equals(parameters('kind'), 'MongoDB'), listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').connectionStrings[0].connectionString, format('AccountEndpoint={0};AccountKey={1};', reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').documentEndpoint, listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').primaryMasterKey))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: CosmosDB"
              }
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '2024-12-01-preview').documentEndpoint]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-cosmosdb-{0}-{1}', parameters('kind'), parameters('name')), '')]",
                  "type": "[if(equals(parameters('kind'), 'GlobalDocumentDB'), 'cosmosdbnosql', if(equals(parameters('kind'), 'MongoDB'), 'cosmosdbmongo', 'cosmosdbcassandra'))]",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "cosmosdbRbac": {
      "condition": "[and(not(variables('resourceExists').cosmosDB), equals(parameters('serviceSettingDeployCosmosDB'), true()))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosRbac{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosName": {
            "value": "[reference('cosmosdb').outputs.name.value]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15636990560246303873"
            },
            "description": "Creates a role assignment for a service principal."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "cosmosName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionReader": "00000000-0000-0000-0000-000000000001",
            "roleDefinitionContributor": "00000000-0000-0000-0000-000000000002"
          },
          "resources": [
            {
              "copy": {
                "name": "userSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'), parameters('usersOrAdGroupArray')[copyIndex()]))]",
              "properties": {
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'))]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            },
            {
              "copy": {
                "name": "spSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosName'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'), parameters('servicePrincipleAndMIArray')[copyIndex()]))]",
              "properties": {
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "roleDefinitionId": "[format('{0}/sqlRoleDefinitions/{1}', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName')), variables('roleDefinitionContributor'))]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "cosmosdb",
        "spAndMI2Array"
      ]
    },
    "privateDnsCosmos": {
      "condition": "[and(and(and(not(variables('resourceExists').cosmosDB), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployCosmosDB')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkCosmos{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('cosmosdb').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "cosmosdb",
        "createPrivateDnsZones",
        "projectResourceGroup"
      ]
    },
    "postgreSQL": {
      "condition": "[and(not(variables('resourceExists').postgreSQL), parameters('serviceSettingDeployPostgreSQL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PostgreSQL4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('postgreSQLName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
          "sku": {
            "value": "[variables('postgreSQLSKU')]"
          },
          "storage": {
            "value": "[variables('postgreSQLStorage')]"
          },
          "version": {
            "value": "[parameters('postgreSQLVersion')]"
          },
          "tenantId": {
            "value": "[parameters('tenantId')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "highAvailability": {
            "value": "[parameters('postgreSQLHighAvailability')]"
          },
          "availabilityZone": {
            "value": "[parameters('postgresAvailabilityZone')]"
          },
          "useCMK": {
            "value": "[parameters('postgresEnableCustomerManagedKey')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1294879000209345168"
            },
            "description": "Creates an Azure Database for PostgreSQL - Flexible Server."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard_B2s",
                "tier": "Burstable"
              }
            },
            "storage": {
              "type": "object",
              "defaultValue": {
                "iops": 120,
                "tier": "P4",
                "storageSizeGB": 32,
                "autoGrow": "Disabled"
              }
            },
            "version": {
              "type": "string",
              "defaultValue": "16"
            },
            "administratorLogin": {
              "type": "string",
              "defaultValue": "aifactoryadmin"
            },
            "resourceExists": {
              "type": "bool",
              "defaultValue": false
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "administratorLoginPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Administrator login password. If not provided, a random password will be generated."
              }
            },
            "databaseNames": {
              "type": "array",
              "defaultValue": [
                "aifdb"
              ]
            },
            "allowAzureIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowAllIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowedSingleIPs": {
              "type": "array",
              "defaultValue": []
            },
            "tenantId": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "entraIdPrincipleAdmin": {
              "type": "string",
              "defaultValue": ""
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
              }
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-postgresqlflex-con-string"
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": false
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "highAvailability": {
              "type": "object",
              "defaultValue": {
                "mode": "Disabled"
              }
            },
            "availabilityZone": {
              "type": "string",
              "defaultValue": "1"
            },
            "useCMK": {
              "type": "bool",
              "defaultValue": false
            },
            "keyVaultKeyId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The key vault key ID for customer managed key encryption. Required when useCMK is true."
              }
            },
            "cmkUserAssignedIdentityId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The user assigned identity ID for customer managed key encryption. Required when useCMK is true."
              }
            }
          },
          "variables": {
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]",
            "seed": "[uniqueString(resourceGroup().id, subscription().subscriptionId, deployment().name)]",
            "uppercaseLetter": "[substring(toUpper(variables('seed')), 0, 1)]",
            "lowercaseLetter": "[substring(toLower(variables('seed')), 1, 1)]",
            "numbers": "[substring(variables('seed'), 2, 4)]",
            "specialChar": "!@#$",
            "randomSpecialChar": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "loginPwd": "[if(empty(parameters('administratorLoginPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar'), variables('numbers'), guid(deployment().name)), parameters('administratorLoginPassword'))]",
            "defaultDbName": "aifdb",
            "dbNameToUse": "[if(not(empty(parameters('databaseNames'))), first(parameters('databaseNames')), variables('defaultDbName'))]",
            "keyVaultPermissions": {
              "secrets": [
                "get",
                "wrap key",
                "unwrap key"
              ]
            }
          },
          "resources": [
            {
              "copy": {
                "name": "postgreSQLFlex::firewall_single",
                "count": "[length(parameters('allowedSingleIPs'))]"
              },
              "condition": "[not(parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('allow-single-{0}', replace(parameters('allowedSingleIPs')[copyIndex()], '.', '')))]",
              "properties": {
                "startIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]",
                "endIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2024-11-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "replica": {
                  "role": "Primary"
                },
                "storage": "[parameters('storage')]",
                "network": {
                  "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]"
                },
                "dataEncryption": "[if(parameters('useCMK'), createObject('type', 'AzureKeyVault', 'primaryKeyURI', parameters('keyVaultKeyId'), 'primaryUserAssignedIdentityId', parameters('cmkUserAssignedIdentityId')), createObject('type', 'SystemManaged'))]",
                "authConfig": {
                  "activeDirectoryAuth": "Enabled",
                  "passwordAuth": "Enabled",
                  "tenantId": "[parameters('tenantId')]"
                },
                "version": "[parameters('version')]",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[variables('loginPwd')]",
                "availabilityZone": "1",
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                },
                "highAvailability": "[parameters('highAvailability')]",
                "maintenanceWindow": {
                  "customWindow": "Disabled",
                  "dayOfWeek": 0,
                  "startHour": 0,
                  "startMinute": 0
                },
                "replicationRole": "Primary"
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('dbNameToUse'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.utf8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAllIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'AllowAll_2025-5-23_18-6-32')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAzureIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2024-11-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'AllowAllAzureServicesAndResourcesWithinAzureIps_2025-5-23_18-8-9')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-postgreSQLFlexibleServer-{0}', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-postgreSQLFlexibleServer-{0}', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]",
                      "groupIds": [
                        "postgresqlServer"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('Server={0};Database={1};Port=5432;User Id={2};Password={3};Ssl Mode=Require;', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview').fullyQualifiedDomainName, variables('dbNameToUse'), parameters('administratorLogin'), variables('loginPwd'))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('useCMK')]",
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'add')]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview', 'full').identity.principalId]",
                    "permissions": "[variables('keyVaultPermissions')]",
                    "tenantId": "[subscription().tenantId]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "POSTGRES_DOMAIN_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '2024-11-01-preview').fullyQualifiedDomainName]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-postgreSQLFlexibleServer-{0}', parameters('name')), '')]",
                  "type": "postgres",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "postgreSQLRbac": {
      "condition": "[and(not(variables('resourceExists').postgreSQL), parameters('serviceSettingDeployPostgreSQL'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PostgreSQLRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "postgreSqlServerName": {
            "value": "[reference('postgreSQL').outputs.name.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "adminNames": {
            "value": "[variables('p011_genai_team_lead_email_array')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11848605134918445830"
            },
            "description": "Creates role assignments for PostgreSQL Flexible Server."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "adminNames": {
              "type": "array",
              "defaultValue": []
            },
            "postgreSqlServerName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "postgreSqlReaderRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "postgreSqlContributorRoleId": "a9f2b5d7-5c0c-4d8e-bd6f-3f9c0f9d5f9b"
          },
          "resources": [
            {
              "copy": {
                "name": "userPostgreSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgreSqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('usersOrAdGroupArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]"
              }
            },
            {
              "copy": {
                "name": "spPostgreSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('postgreSqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('servicePrincipleAndMIArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "copy": {
                "name": "pgAdmins",
                "count": "[length(parameters('adminNames'))]"
              },
              "condition": "[not(empty(parameters('adminNames')))]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/administrators",
              "apiVersion": "2025-01-01-preview",
              "name": "[format('{0}/{1}', parameters('postgreSqlServerName'), guid(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgreSqlServerName')), variables('contributorRoleId'), parameters('adminNames')[copyIndex()]))]",
              "properties": {
                "principalName": "[parameters('adminNames')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "tenantId": "[subscription().tenantId]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "postgreSQL",
        "spAndMI2Array"
      ]
    },
    "privateDnsPostGreSQL": {
      "condition": "[and(and(and(not(variables('resourceExists').postgreSQL), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployPostgreSQL')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkPostgreSQL{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('postgreSQL').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "postgreSQL",
        "projectResourceGroup"
      ]
    },
    "redisCache": {
      "condition": "[and(not(variables('resourceExists').redis), parameters('serviceSettingDeployRedisCache'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RedisCache4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('redisName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "skuName": {
            "value": "[parameters('redisSKU')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1593049858357460099"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 63,
              "metadata": {
                "description": "Required. The name of the Redis cache resource. Start and end with alphanumeric. Consecutive hyphens not allowed"
              }
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-redis-con-string"
            },
            "redisVersion": {
              "type": "string",
              "defaultValue": "latest"
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of an existing keyvault, that it will be used to store secrets (connection string)"
              }
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "replicasPerPrimary": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "shardCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 2,
              "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "metadata": {
                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional, default is Standard. The type of Redis cache to deploy."
              }
            },
            "subnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1."
              }
            },
            "diagnosticSettingsName": {
              "type": "string",
              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "metadata": {
                "description": "Optional. The name of the diagnostic setting, if deployed."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
              }
            },
            "diagnosticLogCategoriesToEnable": {
              "type": "array",
              "defaultValue": [
                "allLogs"
              ],
              "allowedValues": [
                "allLogs",
                "ConnectedClientList"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
              }
            },
            "diagnosticMetricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "metadata": {
                "description": "Has the resource private endpoint?"
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {
                "maxmemory-policy": "volatile-lru",
                "maxmemory-reserved": "50",
                "maxfragmentationmemory-reserved": "50"
              },
              "metadata": {
                "description": "Optional. Redis configuration. See https://docs.microsoft.com/azure/azure-cache-for-redis/cache-configure for valid values."
              }
            },
            "updateChannel": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "Patch",
                "Minor",
                "Major"
              ],
              "metadata": {
                "description": "Optional. Specifies which Redis updates are automatically applied. Default is None."
              }
            },
            "zonalAllocationPolicy": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Specifies distribution of Redis cache nodes across Availability Zones. Only supported for Premium SKUs."
              }
            },
            "disableAccessKeyAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disables access via Redis keys. Requires AAD integration."
              }
            },
            "enableAadIntegration": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables Azure Active Directory authentication."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogsSpecified",
                "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                "input": {
                  "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                  "enabled": true
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                "input": {
                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true
                }
              }
            ],
            "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]",
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "redisConfiguration": "[union(parameters('redisConfiguration'), if(parameters('enableAadIntegration'), createObject('aad-enabled', 'true'), createObject()))]",
                "redisVersion": "[parameters('redisVersion')]",
                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                "disableAccessKeyAuthentication": "[parameters('disableAccessKeyAuthentication')]",
                "updateChannel": "[parameters('updateChannel')]",
                "zonalAllocationPolicy": "[if(equals(parameters('skuName'), 'Premium'), parameters('zonalAllocationPolicy'), null())]",
                "sku": {
                  "capacity": "[parameters('capacity')]",
                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                  "name": "[parameters('skuName')]"
                },
                "subnetId": "[if(not(empty(parameters('subnetId'))), parameters('subnetId'), null())]"
              },
              "zones": "[if(equals(parameters('skuName'), 'Premium'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 1), null())]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0},password={1},ssl=True,abortConnect=False', reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').hostName, listKeys(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').primaryKey)]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ],
              "metadata": {
                "description": "Key Vault: REDIS"
              }
            },
            {
              "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[parameters('diagnosticSettingsName')]",
              "properties": {
                "storageAccountId": null,
                "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                "eventHubAuthorizationRuleId": null,
                "eventHubName": null,
                "metrics": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsMetrics'))]",
                "logs": "[if(empty(parameters('diagnosticWorkspaceId')), null(), variables('diagnosticsLogs'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-redis-{0}', parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-redis-{0}', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Cache/redis', parameters('name'))]",
                      "groupIds": [
                        "redisCache"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The resource name."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID."
              },
              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
            },
            "hostName": {
              "type": "string",
              "metadata": {
                "description": "Redis hostname."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').hostName]"
            },
            "sslPort": {
              "type": "int",
              "metadata": {
                "description": "Redis SSL port."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').sslPort]"
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network where the Redis cache was deployed in."
              },
              "value": "[if(not(empty(parameters('subnetId'))), reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01').subnetId, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('name')), '2024-11-01', 'full').location]"
            },
            "redisConnectionStringSecretName": {
              "type": "string",
              "metadata": {
                "description": "The name of the secret in keyvault, holding the connection string to redis."
              },
              "value": "[parameters('connectionStringKey')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-redis-{0}', parameters('name')), '')]",
                  "type": "redis",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Cache/redis', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "redisCacheRbac": {
      "condition": "[and(not(variables('resourceExists').redis), parameters('serviceSettingDeployRedisCache'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RedisCacheRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "redisName": {
            "value": "[reference('redisCache').outputs.name.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15259879239447699339"
            },
            "description": "Creates role assignments for Redis Cache."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "redisName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            },
            "builtInAccessPolicyName": {
              "type": "string",
              "defaultValue": "Data Contributor",
              "allowedValues": [
                "Data Owner",
                "Data Contributor",
                "Data Reader"
              ],
              "metadata": {
                "description": "Specify name of Built-In access policy to use as assignment."
              }
            },
            "builtInAccessPolicyAssignmentName": {
              "type": "string",
              "defaultValue": "[format('builtInAccessPolicyAssignment-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "builtInAccessPolicyAssignmentObjectId": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Specify the valid objectId(usually it is a GUID) of the Microsoft Entra Service Principal or Managed Identity or User Principal to which the built-in access policy would be assigned."
              }
            },
            "builtInAccessPolicyAssignmentObjectAlias": {
              "type": "string",
              "defaultValue": "[format('builtInAccessPolicyApplication-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify human readable name of principal Id of the Microsoft Entra Application name or Managed Identity name used for built-in policy assignment."
              }
            },
            "customAccessPolicyName": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicy-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "customAccessPolicyPermissions": {
              "type": "string",
              "defaultValue": "+@connection +get +hget allkeys",
              "metadata": {
                "description": "Specify the valid permissions for the customer access policy to create. For details refer to https://aka.ms/redis/ConfigureAccessPolicyPermissions"
              }
            },
            "customAccessPolicyAssignmentName": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicyAssignment-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify name of custom access policy to create."
              }
            },
            "customAccessPolicyAssignmentObjectId": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Specify the valid objectId(usually it is a GUID) of the Microsoft Entra Service Principal or Managed Identity or User Principal to which the custom access policy would be assigned."
              }
            },
            "customAccessPolicyAssignmentObjectAlias": {
              "type": "string",
              "defaultValue": "[format('customAccessPolicyApplication-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specify human readable name of principal Id of the Microsoft Entra Application name or Managed Identity name used for custom policy assignment."
              }
            }
          },
          "variables": {
            "redisContributorRoleId": "e0f68234-74aa-48ed-b826-c38b57376e17",
            "readerRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "contributorId": "fcfef8a3-163d-4692-937a-460c785b8fdb"
          },
          "resources": [
            {
              "type": "Microsoft.Cache/redis/accessPolicyAssignments",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('builtInAccessPolicyAssignmentName'))]",
              "properties": {
                "accessPolicyName": "[parameters('builtInAccessPolicyName')]",
                "objectId": "[parameters('builtInAccessPolicyAssignmentObjectId')]",
                "objectIdAlias": "[parameters('builtInAccessPolicyAssignmentObjectAlias')]"
              }
            },
            {
              "type": "Microsoft.Cache/redis/accessPolicies",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('customAccessPolicyName'))]",
              "properties": {
                "permissions": "[parameters('customAccessPolicyPermissions')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis/accessPolicyAssignments', parameters('redisName'), parameters('builtInAccessPolicyAssignmentName'))]"
              ]
            },
            {
              "type": "Microsoft.Cache/redis/accessPolicyAssignments",
              "apiVersion": "2023-08-01",
              "name": "[format('{0}/{1}', parameters('redisName'), parameters('customAccessPolicyAssignmentName'))]",
              "properties": {
                "accessPolicyName": "[parameters('customAccessPolicyName')]",
                "objectId": "[parameters('customAccessPolicyAssignmentObjectId')]",
                "objectIdAlias": "[parameters('customAccessPolicyAssignmentObjectAlias')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cache/redis/accessPolicies', parameters('redisName'), parameters('customAccessPolicyName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "redisCache",
        "spAndMI2Array"
      ]
    },
    "privateDnsRedisCache": {
      "condition": "[and(and(and(not(variables('resourceExists').redis), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployRedisCache')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkRedisCache{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('redisCache').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "projectResourceGroup",
        "redisCache"
      ]
    },
    "sqlServer": {
      "condition": "[and(not(variables('resourceExists').sqlServer), parameters('serviceSettingDeploySQLDatabase'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SqlServer4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "serverName": {
            "value": "[variables('sqlServerName')]"
          },
          "databaseName": {
            "value": "[variables('sqlDBName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "skuObject": "[if(empty(variables('sqlServerSKUObject_DTU')), createObject('value', createObject()), createObject('value', variables('sqlServerSKUObject_DTU')))]",
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "keyvaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15650693920444933281"
            },
            "description": "Creates an Azure SQL Server instance with a SQL Database"
          },
          "parameters": {
            "serverName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "keyvaultName": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "createPrivateEndpoint": {
              "type": "bool"
            },
            "skuObject": {
              "type": "object"
            },
            "version": {
              "type": "string",
              "defaultValue": "12.0"
            },
            "minimalTlsVersion": {
              "type": "string",
              "defaultValue": "1.2"
            },
            "appUser": {
              "type": "string",
              "defaultValue": "aifactory-user"
            },
            "sqlAdmin": {
              "type": "string",
              "defaultValue": "aifactory-admin"
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "aifdb"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "aifactory-proj-sqldb-con-string"
            },
            "sqlAdminPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "appUserPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "sqlServerAllowedIpRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of IP firewall rules to apply. Example: [ { \"name\": \"AllowAzureServices\", \"startIpAddress\": \"0.0.0.0\", \"endIpAddress\": \"0.0.0.0\" }, { \"name\": \"AllowMyDevIP\", \"startIpAddress\": \"YOUR_IP\", \"endIpAddress\": \"YOUR_IP\" } ]"
              }
            },
            "allowAzureIPsFirewall": {
              "type": "bool",
              "defaultValue": "[not(parameters('createPrivateEndpoint'))]"
            },
            "allowAllIPsFirewall": {
              "type": "bool",
              "defaultValue": false
            },
            "allowedSingleIPs": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "seed": "[uniqueString(resourceGroup().id, subscription().subscriptionId, deployment().name)]",
            "uppercaseLetter": "[substring(toUpper(variables('seed')), 0, 1)]",
            "lowercaseLetter": "[substring(toLower(variables('seed')), 1, 1)]",
            "numbers": "[substring(variables('seed'), 2, 4)]",
            "specialChar": "!@#$",
            "randomSpecialChar": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "randomSpecialChar2": "[substring(variables('specialChar'), mod(length(variables('seed')), length(variables('specialChar'))), 1)]",
            "adminPwd": "[if(empty(parameters('sqlAdminPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar'), variables('numbers'), guid(deployment().name)), parameters('sqlAdminPassword'))]",
            "userPwd": "[if(empty(parameters('appUserPassword')), format('{0}{1}{2}{3}{4}', variables('uppercaseLetter'), variables('lowercaseLetter'), variables('randomSpecialChar2'), variables('numbers'), guid(deployment().name)), parameters('appUserPassword'))]",
            "defaultSku": {
              "name": "S0",
              "tier": "Standard",
              "capacity": 10
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "sku": "[if(not(empty(parameters('skuObject'))), createObject('name', parameters('skuObject').name, 'tier', parameters('skuObject').tier, 'capacity', parameters('skuObject').capacity), createObject('name', variables('defaultSku').name, 'tier', variables('defaultSku').tier, 'capacity', variables('defaultSku').capacity))]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAllIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'sql-all-fw-rule')]",
              "properties": {
                "startIpAddress": "0.0.0.1",
                "endIpAddress": "255.255.255.254"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(parameters('allowAzureIPsFirewall'), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), 'sql-allow-azure-services-fw-rule')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlServer::firewallSingle",
                "count": "[length(parameters('allowedSingleIPs'))]"
              },
              "condition": "[not(parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), format('sql-allow-single-{0}', replace(parameters('allowedSingleIPs')[copyIndex()], '.', '')))]",
              "properties": {
                "startIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]",
                "endIpAddress": "[parameters('allowedSingleIPs')[copyIndex()]]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "copy": {
                "name": "sqlServer::serverIpFirewallRules",
                "count": "[length(parameters('sqlServerAllowedIpRules'))]"
              },
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('sqlServerAllowedIpRules')[copyIndex()].name)]",
              "properties": {
                "startIpAddress": "[parameters('sqlServerAllowedIpRules')[copyIndex()].startIpAddress]",
                "endIpAddress": "[parameters('sqlServerAllowedIpRules')[copyIndex()].endIpAddress]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "condition": "[and(not(empty(parameters('subnetNamePend'))), not(parameters('createPrivateEndpoint')))]",
              "type": "Microsoft.Sql/servers/virtualNetworkRules",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), format('vnetrule-{0}', last(split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend')), '/'))))]",
              "properties": {
                "virtualNetworkSubnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]",
                "ignoreMissingVnetServiceEndpoint": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2024-05-01-preview",
              "name": "[parameters('serverName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "version": "[parameters('version')]",
                "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
                "publicNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Disabled', 'Enabled')]",
                "restrictOutboundNetworkAccess": "[if(parameters('createPrivateEndpoint'), 'Enabled', 'Disabled')]",
                "administratorLogin": "[parameters('sqlAdmin')]",
                "administratorLoginPassword": "[variables('adminPwd')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'sqlAdminPassword')]",
              "properties": {
                "value": "[variables('adminPwd')]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), 'appUserPassword')]",
              "properties": {
                "value": "[variables('userPwd')]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyvaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0}; Password={1}', format('Server={0}; Database={1}; User={2}', reference(resourceId('Microsoft.Sql/servers', parameters('serverName')), '2024-05-01-preview').fullyQualifiedDomainName, parameters('databaseName'), parameters('appUser')), variables('userPwd'))]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]",
                "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('databaseName'))]"
              ]
            },
            {
              "condition": "[parameters('createPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]",
                      "groupIds": [
                        "sqlServer"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('serverName'))]"
              ]
            }
          ],
          "outputs": {
            "connectionStringKey": {
              "type": "string",
              "value": "[parameters('connectionStringKey')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "serverName": {
              "type": "string",
              "value": "[parameters('serverName')]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(parameters('createPrivateEndpoint'), format('pend-sqlServer-SQLDatabaseIn-{0}', parameters('serverName')), '')]",
                  "type": "sql",
                  "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.Sql/servers', parameters('serverName')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kv1",
        "projectResourceGroup"
      ]
    },
    "sqlRbac": {
      "condition": "[and(not(variables('resourceExists').sqlServer), parameters('serviceSettingDeploySQLDatabase'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SqlServerRbac4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlServerName": {
            "value": "[reference('sqlServer').outputs.serverName.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "usersOrAdGroupArray": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "13740601472124994315"
            },
            "description": "Creates role assignments for Azure SQL Server and SQL Database."
          },
          "parameters": {
            "usersOrAdGroupArray": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "sqlServerName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool"
            }
          },
          "variables": {
            "sqlContributorRoleId": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
            "sqlDatabaseAdminRoleId": "dbaa88c4-8eeb-4f5a-9e09-3c5b2e2f7ef5",
            "readerRoleId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "contributorId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "copy": {
                "name": "userSqlRoleAssignment",
                "count": "[length(parameters('usersOrAdGroupArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('sqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorId'))]",
                "principalId": "[parameters('usersOrAdGroupArray')[copyIndex()]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]"
              }
            },
            {
              "copy": {
                "name": "spSqlRoleAssignment",
                "count": "[length(parameters('servicePrincipleAndMIArray'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Sql/servers/{0}', parameters('sqlServerName'))]",
              "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('servicePrincipleAndMIArray')[copyIndex()])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[copyIndex()]]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "sqlRoleAssignments": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(parameters('usersOrAdGroupArray'))))]",
                "input": {
                  "id": "[extensionResourceId(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[range(0, length(parameters('usersOrAdGroupArray')))[copyIndex()]]))]",
                  "name": "[guid(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), variables('contributorId'), parameters('usersOrAdGroupArray')[range(0, length(parameters('usersOrAdGroupArray')))[copyIndex()]])]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "spAndMI2Array",
        "sqlServer"
      ]
    },
    "privateDnsSql": {
      "condition": "[and(and(and(not(variables('resourceExists').sqlDB), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeploySQLDatabase')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkSqlServer{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('sqlServer').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "projectResourceGroup",
        "sqlServer"
      ]
    },
    "appinsights": {
      "condition": "[and(not(variables('resourceExists').applicationInsight), parameters('serviceSettingDeployAppInsightsDashboard'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AppInsights4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('appinsights-{0}-{1}-{2}-{3}{4}', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('uniqueInAIFenv'), parameters('resourceSuffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('commonResourceGroup')), 'Microsoft.OperationalInsights/workspaces', variables('laWorkspaceName'))]"
          },
          "dashboardName": {
            "value": "[variables('dashboardInsightsName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2523925041476961699"
            },
            "description": "Creates an Application Insights instance based on an existing Log Analytics workspace."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "dashboardName": {
              "type": "string",
              "defaultValue": ""
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            },
            {
              "condition": "[not(empty(parameters('dashboardName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "aifactory-app-insights-dashboard",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('dashboardName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "9366335847281582273"
                    },
                    "description": "Creates a dashboard for an Application Insights instance."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "applicationInsightsName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Portal/dashboards",
                      "apiVersion": "2020-09-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "lenses": [
                          {
                            "order": 0,
                            "parts": [
                              {
                                "position": {
                                  "x": 0,
                                  "y": 0,
                                  "colSpan": 2,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "id",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AspNetOverviewPinnedPart",
                                  "asset": {
                                    "idInputName": "id",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "overview"
                                }
                              },
                              {
                                "position": {
                                  "x": 2,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/ProactiveDetectionAsyncPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "ProactiveDetection"
                                }
                              },
                              {
                                "position": {
                                  "x": 3,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/QuickPulseButtonSmallPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-04T01:20:33.345Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AvailabilityNavButtonPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 5,
                                  "y": 0,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-08T18:47:35.237Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "78ce933e-e864-4b05-a27b-71fd55a6afad"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/AppMapButtonPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Usage",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 3,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "endTime": null,
                                        "createdTime": "2018-05-04T01:22:35.782Z",
                                        "isInitialTime": true,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/UsageUsersOverviewPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Reliability",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 7,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                    },
                                    {
                                      "name": "DataModel",
                                      "value": {
                                        "version": "1.0.0",
                                        "timeContext": {
                                          "durationMs": 86400000,
                                          "createdTime": "2018-05-04T23:42:40.072Z",
                                          "isInitialTime": false,
                                          "grain": 1,
                                          "useDashboardTimeRange": false
                                        }
                                      },
                                      "isOptional": true
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "8a02f7bf-ac0f-40e1-afe9-f0e72cfee77f",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/CuratedBladeFailuresPinnedPart",
                                  "isAdapter": true,
                                  "asset": {
                                    "idInputName": "ResourceId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "failures"
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Responsiveness\r\n",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 11,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ResourceId",
                                      "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                    },
                                    {
                                      "name": "DataModel",
                                      "value": {
                                        "version": "1.0.0",
                                        "timeContext": {
                                          "durationMs": 86400000,
                                          "createdTime": "2018-05-04T23:43:37.804Z",
                                          "isInitialTime": false,
                                          "grain": 1,
                                          "useDashboardTimeRange": false
                                        }
                                      },
                                      "isOptional": true
                                    },
                                    {
                                      "name": "ConfigurationId",
                                      "value": "2a8ede4f-2bee-4b9c-aed9-2db0e8a01865",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/CuratedBladePerformancePinnedPart",
                                  "isAdapter": true,
                                  "asset": {
                                    "idInputName": "ResourceId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "performance"
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 1,
                                  "colSpan": 3,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [],
                                  "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                  "settings": {
                                    "content": {
                                      "settings": {
                                        "content": "# Browser",
                                        "title": "",
                                        "subtitle": ""
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "position": {
                                  "x": 15,
                                  "y": 1,
                                  "colSpan": 1,
                                  "rowSpan": 1
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "ComponentId",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "MetricsExplorerJsonDefinitionId",
                                      "value": "BrowserPerformanceTimelineMetrics"
                                    },
                                    {
                                      "name": "TimeContext",
                                      "value": {
                                        "durationMs": 86400000,
                                        "createdTime": "2018-05-08T12:16:27.534Z",
                                        "isInitialTime": false,
                                        "grain": 1,
                                        "useDashboardTimeRange": false
                                      }
                                    },
                                    {
                                      "name": "CurrentFilter",
                                      "value": {
                                        "eventTypes": [
                                          4,
                                          1,
                                          3,
                                          5,
                                          2,
                                          6,
                                          13
                                        ],
                                        "typeFacets": {},
                                        "isPermissive": false
                                      }
                                    },
                                    {
                                      "name": "id",
                                      "value": {
                                        "Name": "[parameters('applicationInsightsName')]",
                                        "SubscriptionId": "[subscription().subscriptionId]",
                                        "ResourceGroup": "[resourceGroup().name]"
                                      }
                                    },
                                    {
                                      "name": "Version",
                                      "value": "1.0"
                                    }
                                  ],
                                  "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePinnedPart",
                                  "asset": {
                                    "idInputName": "ComponentId",
                                    "type": "ApplicationInsights"
                                  },
                                  "defaultMenuItemId": "browser"
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "sessions/count",
                                              "aggregationType": 5,
                                              "namespace": "microsoft.insights/components/kusto",
                                              "metricVisualization": {
                                                "displayName": "Sessions",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "users/count",
                                              "aggregationType": 5,
                                              "namespace": "microsoft.insights/components/kusto",
                                              "metricVisualization": {
                                                "displayName": "Users",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Unique sessions and users",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]",
                                                "menuid": "segmentationUsers"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "requests/failed",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Failed requests",
                                                "color": "#EC008C"
                                              }
                                            }
                                          ],
                                          "title": "Failed requests",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]",
                                                "menuid": "failures"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "requests/duration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Server response time",
                                                "color": "#00BCF2"
                                              }
                                            }
                                          ],
                                          "title": "Server response time",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]",
                                                "menuid": "performance"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 2,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "browserTimings/networkDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Page load network connect time",
                                                "color": "#7E58FF"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "browserTimings/processingDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Client processing time",
                                                "color": "#44F1C8"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "browserTimings/sendDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Send request time",
                                                "color": "#EB9371"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "browserTimings/receiveDuration",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Receiving response time",
                                                "color": "#0672F1"
                                              }
                                            }
                                          ],
                                          "title": "Average page load time breakdown",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "availabilityResults/availabilityPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Availability",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average availability",
                                          "visualization": {
                                            "chartType": 3,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          },
                                          "openBladeOnClick": {
                                            "openBlade": true,
                                            "destinationBlade": {
                                              "extensionName": "HubsExtension",
                                              "bladeName": "ResourceMenuBlade",
                                              "parameters": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]",
                                                "menuid": "availability"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "exceptions/server",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Server exceptions",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "dependencies/failed",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Dependency failures",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Server exceptions and Dependency failures",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "performanceCounters/processorCpuPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Processor time",
                                                "color": "#47BDF5"
                                              }
                                            },
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "performanceCounters/processCpuPercentage",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Process CPU",
                                                "color": "#7E58FF"
                                              }
                                            }
                                          ],
                                          "title": "Average processor and process CPU utilization",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 12,
                                  "y": 5,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "exceptions/browser",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Browser exceptions",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Browser exceptions",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 0,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "availabilityResults/count",
                                              "aggregationType": 7,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Availability test results count",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Availability test results count",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 4,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "performanceCounters/processIOBytesPerSecond",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Process IO rate",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average process I/O rate",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              },
                              {
                                "position": {
                                  "x": 8,
                                  "y": 8,
                                  "colSpan": 4,
                                  "rowSpan": 3
                                },
                                "metadata": {
                                  "inputs": [
                                    {
                                      "name": "options",
                                      "value": {
                                        "chart": {
                                          "metrics": [
                                            {
                                              "resourceMetadata": {
                                                "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Insights/components/{2}', subscription().subscriptionId, resourceGroup().name, parameters('applicationInsightsName'))]"
                                              },
                                              "name": "performanceCounters/memoryAvailableBytes",
                                              "aggregationType": 4,
                                              "namespace": "microsoft.insights/components",
                                              "metricVisualization": {
                                                "displayName": "Available memory",
                                                "color": "#47BDF5"
                                              }
                                            }
                                          ],
                                          "title": "Average available memory",
                                          "visualization": {
                                            "chartType": 2,
                                            "legendVisualization": {
                                              "isVisible": true,
                                              "position": 2,
                                              "hideSubtitle": false
                                            },
                                            "axisVisualization": {
                                              "x": {
                                                "isVisible": true,
                                                "axisType": 2
                                              },
                                              "y": {
                                                "isVisible": true,
                                                "axisType": 1
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "name": "sharedTimeRange",
                                      "isOptional": true
                                    }
                                  ],
                                  "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                  "settings": {}
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "connectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "instrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "miForAca": {
      "condition": "[not(variables('resourceExists').miACA)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miForAca4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('miACAName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10728264960472795345"
            },
            "description": "Creates a user assigned MI, needed to be created before ACA, and needs to be assigned ACR Pull permissions to access an Azure Container Registry, before ACA"
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "cognitiveServicesUserRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), variables('cognitiveServicesUserRoleDefinitionId'))]",
              "properties": {
                "roleDefinitionId": "[variables('cognitiveServicesUserRoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "managedIdentityName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').clientId]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2024-11-30').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "projectResourceGroup"
      ]
    },
    "miRbac": {
      "condition": "[and(not(variables('resourceExists').miACA), parameters('useCommonACR'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miRbacCmn-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference('acrCommon2').outputs.containerRegistryName.value]"
          },
          "principalId": "[if(variables('resourceExists').miACA, createObject('value', reference('miACAREF').principalId), createObject('value', reference('miForAca').outputs.managedIdentityPrincipalId.value))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17212244635106074430"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "acrCommon2",
        "miACAREF",
        "miForAca",
        "projectResourceGroup"
      ]
    },
    "miRbacProj": {
      "condition": "[and(not(variables('resourceExists').miACA), not(parameters('useCommonACR')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('miRbacProj-{0}-{1}', deployment().name, variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerRegistryName": {
            "value": "[reference('acr').outputs.containerRegistryName.value]"
          },
          "principalId": "[if(variables('resourceExists').miACA, createObject('value', reference('miACAREF').principalId), createObject('value', reference('miForAca').outputs.managedIdentityPrincipalId.value))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17212244635106074430"
            },
            "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
          },
          "parameters": {
            "containerRegistryName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalType": "ServicePrincipal",
                "principalId": "[parameters('principalId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "acr",
        "miACAREF",
        "miForAca",
        "projectResourceGroup"
      ]
    },
    "privateDnscontainerAppsEnv": {
      "condition": "[and(and(and(not(variables('resourceExists').containerAppsEnv), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployContainerApps')), not(parameters('enablePublicAccessWithPerimeter')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkACAEnv{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('containerAppsEnv').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "containerAppsEnv",
        "createPrivateDnsZones",
        "projectResourceGroup"
      ]
    },
    "subnetDelegationServerFarm": {
      "condition": "[and(and(and(not(variables('resourceExists').functionApp), not(variables('resourceExists').webApp)), or(parameters('serviceSettingDeployWebApp'), parameters('serviceSettingDeployFunction'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('subnetDelegationServerFarm1{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[variables('aksSubnetName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "delegations": {
            "value": [
              {
                "name": "webapp-delegation",
                "properties": {
                  "serviceName": "Microsoft.Web/serverFarms"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17392790951735419702"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "existingAddressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "serviceEndpoints": {
              "type": "array",
              "defaultValue": []
            },
            "delegations": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[if(not(empty(parameters('addressPrefix'))), parameters('addressPrefix'), if(not(empty(parameters('existingAddressPrefix'))), parameters('existingAddressPrefix'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.addressPrefix.value))]",
                "serviceEndpoints": "[if(not(empty(parameters('serviceEndpoints'))), parameters('serviceEndpoints'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.serviceEndpoints.value)]",
                "routeTable": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value), null())]",
                "networkSecurityGroup": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value), null())]",
                "natGateway": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value), null())]",
                "delegations": "[parameters('delegations')]",
                "privateEndpointNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')]",
                "privateLinkServiceNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')]"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-snet-props-{0}', uniqueString(deployment().name))]",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17165401858716077681"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').addressPrefix]"
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').serviceEndpoints, createArray())]"
                    },
                    "delegations": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').delegations, createArray())]"
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').networkSecurityGroup.id, '')]"
                    },
                    "routeTableId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'routeTable'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').routeTable.id, '')]"
                    },
                    "natGatewayId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'natGateway'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').natGateway.id, '')]"
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateEndpointNetworkPolicies, '')]"
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateLinkServiceNetworkPolicies, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            },
            "subnetName": {
              "type": "string",
              "value": "[parameters('subnetName')]"
            }
          }
        }
      }
    },
    "subnetDelegationAca": {
      "condition": "[and(not(variables('resourceExists').containerAppsEnv), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('subnetDelegationAcaEnv{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "subnetName": {
            "value": "[variables('acaSubnetName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "delegations": {
            "value": [
              {
                "name": "aca-delegation",
                "properties": {
                  "serviceName": "Microsoft.App/environments"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17392790951735419702"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "existingAddressPrefix": {
              "type": "string",
              "defaultValue": ""
            },
            "serviceEndpoints": {
              "type": "array",
              "defaultValue": []
            },
            "delegations": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[if(not(empty(parameters('addressPrefix'))), parameters('addressPrefix'), if(not(empty(parameters('existingAddressPrefix'))), parameters('existingAddressPrefix'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.addressPrefix.value))]",
                "serviceEndpoints": "[if(not(empty(parameters('serviceEndpoints'))), parameters('serviceEndpoints'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.serviceEndpoints.value)]",
                "routeTable": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.routeTableId.value), null())]",
                "networkSecurityGroup": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.networkSecurityGroupId.value), null())]",
                "natGateway": "[if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value)), createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.natGatewayId.value), null())]",
                "delegations": "[parameters('delegations')]",
                "privateEndpointNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Disabled')]",
                "privateLinkServiceNetworkPolicies": "[if(not(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name))), '2022-09-01').outputs.privateLinkServiceNetworkPolicies.value, 'Enabled')]"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Resources/deployments', format('get-snet-props-{0}', uniqueString(deployment().name)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-snet-props-{0}', uniqueString(deployment().name))]",
              "resourceGroup": "[parameters('vnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "subnetName": {
                    "value": "[parameters('subnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "17165401858716077681"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').addressPrefix]"
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').serviceEndpoints, createArray())]"
                    },
                    "delegations": {
                      "type": "array",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').delegations, createArray())]"
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').networkSecurityGroup.id, '')]"
                    },
                    "routeTableId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'routeTable'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').routeTable.id, '')]"
                    },
                    "natGatewayId": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'natGateway'), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').natGateway.id, '')]"
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateEndpointNetworkPolicies, '')]"
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "value": "[coalesce(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateLinkServiceNetworkPolicies, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            },
            "subnetName": {
              "type": "string",
              "value": "[parameters('subnetName')]"
            }
          }
        }
      }
    },
    "webapp": {
      "condition": "[and(not(variables('resourceExists').webApp), parameters('serviceSettingDeployWebApp'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('WebApp4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('webAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "sku": "[if(parameters('byoASEv3'), createObject('value', parameters('webappSKUAce')), createObject('value', parameters('webappSKU')))]",
          "alwaysOn": {
            "value": "[parameters('webappAlwaysOn')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "subnetIntegrationName": {
            "value": "[variables('aksSubnetName')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "applicationInsightsName": "[if(and(parameters('serviceSettingDeployAppInsightsDashboard'), not(variables('resourceExists').applicationInsight)), createObject('value', reference('appinsights').outputs.name.value), if(parameters('serviceSettingDeployAppInsightsDashboard'), createObject('value', variables('applicationInsightName')), createObject('value', reference('applicationInsightSWC').outputs.name.value)))]",
          "logAnalyticsWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[variables('commonResourceGroup')]"
          },
          "runtime": {
            "value": "[parameters('webAppRuntime')]"
          },
          "redundancyMode": {
            "value": "[parameters('appRedundancyMode')]"
          },
          "byoASEv3": {
            "value": "[parameters('byoASEv3')]"
          },
          "byoAseFullResourceId": {
            "value": "[parameters('byoAseFullResourceId')]"
          },
          "byoAseAppServicePlanRID": {
            "value": "[parameters('byoAseAppServicePlanResourceId')]"
          },
          "runtimeVersion": {
            "value": "[parameters('webAppRuntimeVersion')]"
          },
          "ipRules": {
            "value": "[variables('ipWhitelist_array')]"
          },
          "appSettings": {
            "value": [
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').openai), parameters('serviceSettingDeployAzureOpenAI')), reference('csAzureOpenAI').outputs.azureOpenAIEndpoint.value, if(parameters('serviceSettingDeployAzureOpenAI'), reference('openaiREF').endpoint, ''))]"
              },
              {
                "name": "AZURE_AISERVICES_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').aiServices), parameters('enableAIServices')), reference('aiServices').outputs.openAIEndpoint.value, if(parameters('enableAIServices'), reference('aiServicesREF').endpoint, ''))]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').aiSearch), parameters('enableAISearch')), reference('aiSearchService').outputs.aiSearchEndpoint.value, if(parameters('enableAISearch'), variables('hostname'), ''))]"
              },
              {
                "name": "WEBSITE_VNET_ROUTE_ALL",
                "value": "1"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10403214579499127158"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "appServicePlanName": {
              "type": "string",
              "defaultValue": ""
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S1",
                "tier": "Standard",
                "capacity": 1
              }
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": [
                "https://mlworkspace.azure.ai",
                "https://ml.azure.com",
                "https://*.ml.azure.com",
                "https://ai.azure.com",
                "https://*.ai.azure.com",
                "https://mlworkspacecanary.azure.ai",
                "https://mlworkspace.azureml-test.net",
                "https://42.swedencentral.instances.azureml.ms",
                "https://*.instances.azureml.ms",
                "https://*.azureml.ms"
              ]
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string"
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java"
              ]
            },
            "runtimeVersion": {
              "type": "string",
              "defaultValue": "3.11",
              "allowedValues": [
                "3.7",
                "3.8",
                "3.9",
                "3.10",
                "3.11",
                "3.12",
                "18-lts",
                "20-lts",
                "8",
                "11",
                "17",
                "21",
                "v4.8",
                "v6.0",
                "v7.0",
                "v8.0"
              ]
            },
            "subnetIntegrationName": {
              "type": "string"
            },
            "hostNameSslStatesIn": {
              "type": "array",
              "defaultValue": []
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "byoASEv3": {
              "type": "bool",
              "defaultValue": false
            },
            "byoAseFullResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "byoAseAppServicePlanRID": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedIpRules",
                "count": "[length(parameters('ipRules'))]",
                "input": {
                  "ipAddress": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'ipAddress'), parameters('ipRules')[copyIndex('formattedIpRules')].ipAddress, if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], '/'), parameters('ipRules')[copyIndex('formattedIpRules')], format('{0}/32', parameters('ipRules')[copyIndex('formattedIpRules')])))]",
                  "action": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'action'), parameters('ipRules')[copyIndex('formattedIpRules')].action, 'Allow')]",
                  "priority": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'priority'), parameters('ipRules')[copyIndex('formattedIpRules')].priority, add(100, copyIndex('formattedIpRules')))]",
                  "name": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'name'), parameters('ipRules')[copyIndex('formattedIpRules')].name, format('Rule-{0}', copyIndex('formattedIpRules')))]",
                  "description": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'description'), parameters('ipRules')[copyIndex('formattedIpRules')].description, 'Allow access from IP')]"
                }
              }
            ],
            "servicePlanName": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('{0}-plan', parameters('name')))]",
            "byoACE3Intenal": "[not(empty(parameters('byoAseFullResourceId')))]",
            "aseName": "[last(split(parameters('byoAseFullResourceId'), '/'))]",
            "hostNameSslStatesDefault": "[if(not(empty(parameters('hostNameSslStatesIn'))), parameters('hostNameSslStatesIn'), createArray(createObject('name', format('{0}.azurewebsites.net', parameters('name')), 'hostType', 'Standard', 'sslState', 'Disabled')))]",
            "hostNameSslStates": "[if(parameters('byoASEv3'), createArray(createObject('name', format('{0}.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Standard'), createObject('name', format('{0}.scm.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Repository')), variables('hostNameSslStatesDefault'))]",
            "denyAllRule": {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny-All",
              "description": "Deny all access by default"
            },
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "condition": "[empty(parameters('byoAseAppServicePlanRID'))]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-11-01",
              "name": "[variables('servicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "I1v2",
                "tier": "IsolatedV2",
                "size": "I1v2",
                "family": "Iv2",
                "capacity": 1
              },
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'linux', 'windows')]",
              "properties": {
                "reserved": "[or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python'))]",
                "hostingEnvironmentProfile": "[if(and(parameters('byoASEv3'), not(empty(parameters('byoAseFullResourceId')))), createObject('id', parameters('byoAseFullResourceId')), null())]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'app,linux', 'app')]",
              "identity": "[variables('identity')]",
              "properties": {
                "serverFarmId": "[if(and(not(empty(parameters('byoAseAppServicePlanRID'))), parameters('byoASEv3')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('byoAseAppServicePlanRID'), '/')[2], split(parameters('byoAseAppServicePlanRID'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('byoAseAppServicePlanRID'), '/'))), resourceId('Microsoft.Web/serverfarms', variables('servicePlanName')))]",
                "httpsOnly": true,
                "hostingEnvironmentProfile": "[if(and(not(empty(parameters('byoAseFullResourceId'))), parameters('byoASEv3')), createObject('id', parameters('byoAseFullResourceId')), null())]",
                "virtualNetworkSubnetId": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[1]))]",
                "publicNetworkAccess": "[if(parameters('byoASEv3'), 'Disabled', if(or(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), 'Enabled', 'Disabled'))]",
                "siteConfig": {
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "cors": {
                    "allowedOrigins": "[parameters('allowedOrigins')]"
                  },
                  "ipSecurityRestrictions": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), createArray(), concat(variables('formattedIpRules'), createArray(variables('denyAllRule'))))]",
                  "linuxFxVersion": "[if(equals(parameters('runtime'), 'python'), format('PYTHON|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'node'), format('NODE|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'java'), format('JAVA|{0}-java{1}', parameters('runtimeVersion'), parameters('runtimeVersion')), '')))]",
                  "netFrameworkVersion": "[if(equals(parameters('runtime'), 'dotnet'), parameters('runtimeVersion'), null())]",
                  "appSettings": "[concat(parameters('appSettings'), if(not(empty(parameters('applicationInsightsName'))), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', if(not(empty(parameters('applicationInsightsName'))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, '')), createObject('name', 'ApplicationInsightsAgent_EXTENSION_VERSION', 'value', '~2')), createArray()))]"
                },
                "hostNameSslStates": "[variables('hostNameSslStates')]",
                "redundancyMode": "[parameters('redundancyMode')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('p-{0}-webapp', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[1])]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('p-{0}-webapp', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                      "groupIds": [
                        "sites"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "webAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "webAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), format('p-{0}-webapp', parameters('name')), '')]",
                  "type": "azurewebapps",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), resourceId('Microsoft.Web/sites', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "aiHub",
        "aiSearchService",
        "aiServices",
        "aiServicesREF",
        "appinsights",
        "applicationInsightSWC",
        "csAzureOpenAI",
        "openaiREF",
        "projectResourceGroup",
        "sacc",
        "subnetDelegationServerFarm"
      ]
    },
    "privateDnsWebapp": {
      "condition": "[and(and(and(and(not(variables('resourceExists').webApp), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployWebApp')), not(parameters('enablePublicAccessWithPerimeter'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkWebApp{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('webapp').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "projectResourceGroup",
        "webapp"
      ]
    },
    "rbacForWebAppMSI": {
      "condition": "[and(not(variables('resourceExists').webApp), parameters('serviceSettingDeployWebApp'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForWebApp{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "webAppPrincipalId": "[if(variables('resourceExists').webApp, createObject('value', reference('webappREF', '2022-09-01', 'full').identity.principalId), createObject('value', reference('webapp').outputs.principalId.value))]",
          "openAIName": "[if(variables('resourceExists').openai, createObject('value', variables('aoaiName')), if(parameters('serviceSettingDeployAzureOpenAI'), createObject('value', reference('csAzureOpenAI').outputs.cognitiveName.value), createObject('value', '')))]",
          "aiServicesName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "7685492578315064902"
            }
          },
          "parameters": {
            "webAppPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "openAIName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('webAppPrincipalId'), 'storageBlobDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), parameters('webAppPrincipalId'), 'storageBlobDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('openAIName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), parameters('webAppPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiServicesName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('webAppPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('webAppPrincipalId'), 'searchIndexDataReader')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('webAppPrincipalId'), 'searchServiceContributor')]",
              "properties": {
                "principalId": "[parameters('webAppPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiSearchService",
        "aiServices",
        "csAzureOpenAI",
        "sa4AIsearch",
        "sacc",
        "webapp",
        "webappREF"
      ]
    },
    "function": {
      "condition": "[and(not(variables('resourceExists').functionApp), parameters('serviceSettingDeployFunction'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Function4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('functionAppName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "sku": "[if(parameters('byoASEv3'), createObject('value', parameters('webappSKUAce')), createObject('value', parameters('functionSKU')))]",
          "alwaysOn": {
            "value": "[parameters('functionAlwaysOn')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "subnetIntegrationName": {
            "value": "[variables('aksSubnetName')]"
          },
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "applicationInsightsName": "[if(and(parameters('serviceSettingDeployAppInsightsDashboard'), not(variables('resourceExists').applicationInsight)), createObject('value', reference('appinsights').outputs.name.value), if(parameters('serviceSettingDeployAppInsightsDashboard'), createObject('value', variables('applicationInsightName')), createObject('value', reference('applicationInsightSWC').outputs.name.value)))]",
          "logAnalyticsWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[variables('commonResourceGroup')]"
          },
          "redundancyMode": {
            "value": "[parameters('appRedundancyMode')]"
          },
          "byoASEv3": {
            "value": "[parameters('byoASEv3')]"
          },
          "byoAseFullResourceId": {
            "value": "[parameters('byoAseFullResourceId')]"
          },
          "byoAseAppServicePlanRID": {
            "value": "[parameters('byoAseAppServicePlanResourceId')]"
          },
          "ipRules": {
            "value": "[variables('ipWhitelist_array')]"
          },
          "appSettings": {
            "value": [
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').openai), parameters('serviceSettingDeployAzureOpenAI')), reference('csAzureOpenAI').outputs.azureOpenAIEndpoint.value, if(parameters('serviceSettingDeployAzureOpenAI'), reference('openaiREF').endpoint, ''))]"
              },
              {
                "name": "AZURE_AISERVICES_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').aiServices), parameters('enableAIServices')), reference('aiServices').outputs.openAIEndpoint.value, if(parameters('enableAIServices'), reference('aiServicesREF').endpoint, ''))]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[if(and(not(variables('resourceExists').aiSearch), parameters('enableAISearch')), reference('aiSearchService').outputs.aiSearchEndpoint.value, if(parameters('enableAISearch'), variables('hostname'), ''))]"
              }
            ]
          },
          "runtime": {
            "value": "[parameters('functionRuntime')]"
          },
          "runtimeVersion": {
            "value": "[parameters('functionVersion')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15097669480221924559"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "appServicePlanName": {
              "type": "string",
              "defaultValue": ""
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "EP1",
                "tier": "ElasticPremium",
                "family": "EP",
                "capacity": 1
              }
            },
            "appSettings": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": [
                "https://mlworkspace.azure.ai",
                "https://ml.azure.com",
                "https://*.ml.azure.com",
                "https://ai.azure.com",
                "https://*.ai.azure.com",
                "https://mlworkspacecanary.azure.ai",
                "https://mlworkspace.azureml-test.net",
                "https://42.swedencentral.instances.azureml.ms",
                "https://*.instances.azureml.ms",
                "https://*.azureml.ms"
              ]
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "defaultValue": ""
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string",
              "defaultValue": ""
            },
            "runtime": {
              "type": "string",
              "defaultValue": "python",
              "allowedValues": [
                "dotnet",
                "node",
                "python",
                "java"
              ]
            },
            "runtimeVersion": {
              "type": "string",
              "defaultValue": "3.11",
              "allowedValues": [
                "3.7",
                "3.8",
                "3.9",
                "3.10",
                "3.11",
                "3.12",
                "18-lts",
                "20-lts",
                "8",
                "11",
                "17",
                "21",
                "v4.8",
                "v6.0",
                "v7.0",
                "v8.0"
              ]
            },
            "subnetIntegrationName": {
              "type": "string"
            },
            "hostNameSslStatesIn": {
              "type": "array",
              "defaultValue": []
            },
            "systemAssignedIdentity": {
              "type": "bool",
              "defaultValue": true
            },
            "userAssignedIdentities": {
              "type": "object",
              "defaultValue": {}
            },
            "redundancyMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "ActiveActive",
                "Failover",
                "GeoRedundant",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Site redundancy mode."
              }
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "byoASEv3": {
              "type": "bool",
              "defaultValue": false
            },
            "byoAseFullResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "byoAseAppServicePlanRID": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedIpRules",
                "count": "[length(parameters('ipRules'))]",
                "input": {
                  "ipAddress": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'ipAddress'), parameters('ipRules')[copyIndex('formattedIpRules')].ipAddress, if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], '/'), parameters('ipRules')[copyIndex('formattedIpRules')], format('{0}/32', parameters('ipRules')[copyIndex('formattedIpRules')])))]",
                  "action": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'action'), parameters('ipRules')[copyIndex('formattedIpRules')].action, 'Allow')]",
                  "priority": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'priority'), parameters('ipRules')[copyIndex('formattedIpRules')].priority, add(100, copyIndex('formattedIpRules')))]",
                  "name": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'name'), parameters('ipRules')[copyIndex('formattedIpRules')].name, format('Rule-{0}', copyIndex('formattedIpRules')))]",
                  "description": "[if(contains(parameters('ipRules')[copyIndex('formattedIpRules')], 'description'), parameters('ipRules')[copyIndex('formattedIpRules')].description, 'Allow access from IP')]"
                }
              }
            ],
            "aseName": "[last(split(parameters('byoAseFullResourceId'), '/'))]",
            "hostNameSslStatesDefault": "[if(not(empty(parameters('hostNameSslStatesIn'))), parameters('hostNameSslStatesIn'), createArray(createObject('name', format('{0}.azurewebsites.net', parameters('name')), 'hostType', 'Standard', 'sslState', 'Disabled')))]",
            "hostNameSslStates": "[if(parameters('byoASEv3'), createArray(createObject('name', format('{0}.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Standard'), createObject('name', format('{0}.scm.{1}.appserviceenvironment.net', parameters('name'), variables('aseName')), 'sslState', 'Disabled', 'hostType', 'Repository')), variables('hostNameSslStatesDefault'))]",
            "servicePlanName": "[if(not(empty(parameters('appServicePlanName'))), parameters('appServicePlanName'), format('{0}-plan', parameters('name')))]",
            "denyAllRule": {
              "ipAddress": "0.0.0.0/0",
              "action": "Deny",
              "priority": 2147483647,
              "name": "Deny-All",
              "description": "Deny all access by default"
            },
            "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
            "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
          },
          "resources": [
            {
              "condition": "[empty(parameters('byoAseAppServicePlanRID'))]",
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2024-11-01",
              "name": "[variables('servicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'linux', 'windows')]",
              "properties": {
                "reserved": "[or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python'))]",
                "hostingEnvironmentProfile": "[if(and(parameters('byoASEv3'), not(empty(parameters('byoAseFullResourceId')))), createObject('id', parameters('byoAseFullResourceId')), null())]"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[if(or(or(equals(parameters('runtime'), 'node'), equals(parameters('runtime'), 'python')), equals(parameters('runtime'), 'java')), 'functionapp,linux', 'functionapp')]",
              "identity": "[variables('identity')]",
              "properties": {
                "enabled": true,
                "scmSiteAlsoStopped": false,
                "keyVaultReferenceIdentity": "[if(parameters('systemAssignedIdentity'), 'SystemAssigned', 'None')]",
                "storageAccountRequired": false,
                "serverFarmId": "[if(not(empty(parameters('byoAseAppServicePlanRID'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('byoAseAppServicePlanRID'), '/')[2], split(parameters('byoAseAppServicePlanRID'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('byoAseAppServicePlanRID'), '/'))), resourceId('Microsoft.Web/serverfarms', variables('servicePlanName')))]",
                "httpsOnly": true,
                "hostingEnvironmentProfile": "[if(not(empty(parameters('byoAseFullResourceId'))), createObject('id', parameters('byoAseFullResourceId')), null())]",
                "virtualNetworkSubnetId": "[if(parameters('byoASEv3'), null(), if(parameters('enablePublicAccessWithPerimeter'), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetIntegrationName')), '/')[1])))]",
                "publicNetworkAccess": "[if(parameters('byoASEv3'), 'Disabled', if(or(parameters('enablePublicAccessWithPerimeter'), parameters('enablePublicGenAIAccess')), 'Enabled', 'Disabled'))]",
                "siteConfig": {
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "cors": {
                    "allowedOrigins": "[parameters('allowedOrigins')]"
                  },
                  "ipSecurityRestrictions": "[if(or(parameters('enablePublicAccessWithPerimeter'), parameters('byoASEv3')), createArray(), concat(variables('formattedIpRules'), createArray(variables('denyAllRule'))))]",
                  "linuxFxVersion": "[if(equals(parameters('runtime'), 'python'), format('PYTHON|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'node'), format('NODE|{0}', parameters('runtimeVersion')), if(equals(parameters('runtime'), 'java'), format('JAVA|{0}-java{1}', parameters('runtimeVersion'), parameters('runtimeVersion')), '')))]",
                  "netFrameworkVersion": "[if(equals(parameters('runtime'), 'dotnet'), parameters('runtimeVersion'), null())]",
                  "appSettings": "[concat(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTOVERVNET', 'value', '1'), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', parameters('runtime')), createObject('name', 'WEBSITE_VNET_ROUTE_ALL', 'value', '1')), if(not(equals(parameters('runtime'), 'python')), createArray(createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('name')))), createArray()), if(equals(parameters('runtime'), 'python'), createArray(createObject('name', 'ENABLE_ORYX_BUILD', 'value', 'true'), createObject('name', 'SCM_DO_BUILD_DURING_DEPLOYMENT', 'value', 'true')), createArray()), parameters('appSettings'), if(not(empty(parameters('applicationInsightsName'))), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString)), createArray()))]"
                },
                "hostNameSslStates": "[variables('hostNameSslStates')]",
                "redundancyMode": "[parameters('redundancyMode')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
              ]
            },
            {
              "condition": "[and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[format('p-{0}-function', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetNamePend')), '/')[1])]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('p-{0}-function', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                      "groupIds": [
                        "sites"
                      ],
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppName": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
            },
            "defaultHostname": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01').defaultHostName]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('name')), '2024-11-01', 'full').identity.principalId]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), format('p-{0}-function', parameters('name')), '')]",
                  "type": "azurewebapps",
                  "id": "[if(and(parameters('createPrivateEndpoint'), not(parameters('byoASEv3'))), resourceId('Microsoft.Web/sites', parameters('name')), '')]"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "aiHub",
        "aiSearchService",
        "aiServices",
        "aiServicesREF",
        "appinsights",
        "applicationInsightSWC",
        "csAzureOpenAI",
        "openaiREF",
        "projectResourceGroup",
        "sacc",
        "subnetDelegationServerFarm",
        "webapp"
      ]
    },
    "privateDnsFunction": {
      "condition": "[and(and(and(and(not(variables('resourceExists').functionApp), not(parameters('centralDnsZoneByPolicyInHub'))), parameters('serviceSettingDeployFunction')), not(parameters('enablePublicAccessWithPerimeter'))), not(parameters('byoASEv3')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateDnsLinkFunction{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dnsConfig": {
            "value": "[reference('function').outputs.dnsConfig.value]"
          },
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "15049098437994256913"
            }
          },
          "parameters": {
            "dnsConfig": {
              "type": "array"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "resourceCreatedNow": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpointDnsZone",
                "count": "[length(parameters('dnsConfig'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}DnsZone', parameters('dnsConfig')[copyIndex()].name, parameters('dnsConfig')[copyIndex()].name)]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}', parameters('dnsConfig')[copyIndex()].name)]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones')[parameters('dnsConfig')[copyIndex()].type].id]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "createPrivateDnsZones",
        "function",
        "projectResourceGroup"
      ]
    },
    "rbacForFunctionMSI": {
      "condition": "[and(not(variables('resourceExists').functionApp), parameters('serviceSettingDeployFunction'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForFunction{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "functionPrincipalId": "[if(variables('resourceExists').functionApp, createObject('value', reference('functionREF', '2022-09-01', 'full').identity.principalId), createObject('value', reference('function').outputs.principalId.value))]",
          "openAIName": "[if(variables('resourceExists').openai, createObject('value', variables('aoaiName')), if(parameters('serviceSettingDeployAzureOpenAI'), createObject('value', reference('csAzureOpenAI').outputs.cognitiveName.value), createObject('value', '')))]",
          "aiServicesName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "200045614052441962"
            }
          },
          "parameters": {
            "functionPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string",
              "defaultValue": ""
            },
            "aiSearchName": {
              "type": "string",
              "defaultValue": ""
            },
            "openAIName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiServicesName": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), parameters('functionPrincipalId'), 'storageBlobDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('storageAccountName2')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), parameters('functionPrincipalId'), 'storageBlobDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('openAIName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), parameters('functionPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiServicesName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), parameters('functionPrincipalId'), 'cognitiveServicesUser')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('functionPrincipalId'), 'searchIndexDataContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), parameters('functionPrincipalId'), 'searchServiceContributor')]",
              "properties": {
                "principalId": "[parameters('functionPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiSearchService",
        "aiServices",
        "csAzureOpenAI",
        "function",
        "functionREF",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "containerAppsEnv": {
      "condition": "[and(not(variables('resourceExists').containerAppsEnv), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-env-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('containerAppsEnvName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logAnalyticsWorkspaceRG": {
            "value": "[variables('commonResourceGroup')]"
          },
          "applicationInsightsName": "[if(and(parameters('serviceSettingDeployAppInsightsDashboard'), not(variables('resourceExists').applicationInsight)), createObject('value', reference('appinsights').outputs.name.value), if(parameters('serviceSettingDeployAppInsightsDashboard'), createObject('value', variables('applicationInsightName')), createObject('value', reference('applicationInsightSWC').outputs.name.value)))]",
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "subnetAcaDedicatedName": {
            "value": "[variables('acaSubnetName')]"
          },
          "wlMinCountServerless": {
            "value": "[parameters('wlMinCountServerless')]"
          },
          "wlMinCountDedicated": {
            "value": "[parameters('wlMinCountDedicated')]"
          },
          "wlMaxCount": {
            "value": "[parameters('wlMaxCount')]"
          },
          "wlProfileDedicatedName": {
            "value": "[parameters('wlProfileDedicatedName')]"
          },
          "wlProfileGPUConsumptionName": {
            "value": "[parameters('wlProfileGPUConsumptionName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "182631986997618464"
            },
            "description": "Creates an Azure Container Registry and an Azure Container Apps environment."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "subnetNamePend": {
              "type": "string"
            },
            "subnetAcaDedicatedName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRG": {
              "type": "string"
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "containerRegistryAdminUserEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "wlMinCountServerless": {
              "type": "int",
              "defaultValue": 0
            },
            "wlMinCountDedicated": {
              "type": "int",
              "defaultValue": 1
            },
            "wlMaxCount": {
              "type": "int",
              "defaultValue": 5
            },
            "wlProfileDedicatedName": {
              "type": "string",
              "defaultValue": "D4"
            },
            "wlProfileGPUConsumptionName": {
              "type": "string",
              "defaultValue": "Consumption-GPU-NC24-A100"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "logAnalyticsWorkspaceRG": {
                    "value": "[parameters('logAnalyticsWorkspaceRG')]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "enablePublicGenAIAccess": {
                    "value": "[parameters('enablePublicGenAIAccess')]"
                  },
                  "enablePublicAccessWithPerimeter": {
                    "value": "[parameters('enablePublicAccessWithPerimeter')]"
                  },
                  "createPrivateEndpoint": "[if(parameters('enablePublicAccessWithPerimeter'), createObject('value', false()), createObject('value', true()))]",
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  "subnetNamePend": {
                    "value": "[parameters('subnetNamePend')]"
                  },
                  "subnetAcaDedicatedName": {
                    "value": "[parameters('subnetAcaDedicatedName')]"
                  },
                  "wlMinCountServerless": {
                    "value": "[parameters('wlMinCountServerless')]"
                  },
                  "wlMinCountDedicated": {
                    "value": "[parameters('wlMinCountDedicated')]"
                  },
                  "wlMaxCount": {
                    "value": "[parameters('wlMaxCount')]"
                  },
                  "wlProfileDedicatedName": {
                    "value": "[parameters('wlProfileDedicatedName')]"
                  },
                  "wlProfileGPUConsumptionName": {
                    "value": "[parameters('wlProfileGPUConsumptionName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "11712255516451809268"
                    },
                    "description": "Creates an Azure Container Apps environment."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Application Insights resource"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if Dapr is enabled"
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Log Analytics workspace"
                      }
                    },
                    "logAnalyticsWorkspaceRG": {
                      "type": "string"
                    },
                    "vnetName": {
                      "type": "string"
                    },
                    "vnetResourceGroupName": {
                      "type": "string"
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string"
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "createPrivateEndpoint": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "wlProfileDedicatedName": {
                      "type": "string",
                      "defaultValue": "D4"
                    },
                    "wlProfileGPUConsumptionName": {
                      "type": "string",
                      "defaultValue": "Consumption-GPU-NC24-A100"
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "wlProfileDedicatedGPUName": {
                      "type": "string",
                      "defaultValue": "Dedicated-GPU-NC24-A100"
                    },
                    "wlMinCountDedicatedGPU": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCountDedicatedGPU": {
                      "type": "int",
                      "defaultValue": 5
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
                            "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logAnalyticsWorkspaceRG')), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                          }
                        },
                        "daprAIInstrumentationKey": "[if(and(parameters('daprEnabled'), not(empty(parameters('applicationInsightsName')))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey, '')]",
                        "daprAIConnectionString": "[if(and(parameters('daprEnabled'), not(empty(parameters('applicationInsightsName')))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString, '')]",
                        "workloadProfiles": [
                          {
                            "name": "Consumption",
                            "workloadProfileType": "Consumption"
                          },
                          {
                            "name": "[parameters('wlProfileDedicatedName')]",
                            "workloadProfileType": "[parameters('wlProfileDedicatedName')]",
                            "minimumCount": "[parameters('wlMinCountDedicated')]",
                            "maximumCount": "[parameters('wlMaxCount')]"
                          }
                        ],
                        "vnetConfiguration": {
                          "infrastructureSubnetId": "[if(parameters('enablePublicAccessWithPerimeter'), null(), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetAcaDedicatedName')))]",
                          "internal": "[if(parameters('enablePublicAccessWithPerimeter'), false(), true())]"
                        }
                      }
                    },
                    {
                      "condition": "[parameters('createPrivateEndpoint')]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-01-01",
                      "name": "[format('pend-acaenv-{0}', parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "subnet": {
                          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNamePend'))]"
                        },
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pend-aca-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
                              "groupIds": [
                                "managedEnvironments"
                              ],
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2025-01-01').defaultDomain]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "dnsConfig": {
                      "type": "array",
                      "value": [
                        {
                          "name": "[if(parameters('createPrivateEndpoint'), format('pend-acaenv-{0}', parameters('name')), '')]",
                          "type": "azurecontainerapps",
                          "id": "[if(parameters('createPrivateEndpoint'), resourceId('Microsoft.App/managedEnvironments', parameters('name')), '')]"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
            },
            "environmentName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.name.value]"
            },
            "environmentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.id.value]"
            },
            "dnsConfig": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}', parameters('name'))), '2022-09-01').outputs.dnsConfig.value]"
            }
          }
        }
      },
      "dependsOn": [
        "appinsights",
        "applicationInsightSWC",
        "miForAca",
        "miRbac",
        "projectResourceGroup",
        "subnetDelegationAca"
      ]
    },
    "acaApi": {
      "condition": "[and(not(variables('resourceExists').containerAppA), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-a-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('containerAppAName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "ipSecurityRestrictions": "[if(parameters('enablePublicGenAIAccess'), createObject('value', variables('ipSecurityRestrictions')), createObject('value', createArray()))]",
          "allowedOrigins": {
            "value": "[variables('allowedOrigins')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "subnetNamePend": {
            "value": "[variables('defaultSubnet')]"
          },
          "subnetAcaDedicatedName": {
            "value": "[variables('acaSubnetName')]"
          },
          "customDomains": {
            "value": "[parameters('acaCustomDomainsArray')]"
          },
          "resourceGroupName": {
            "value": "[variables('targetResourceGroup')]"
          },
          "identityId": "[if(variables('resourceExists').miACA, createObject('value', reference('miACAREF').principalId), createObject('value', reference('miForAca').outputs.managedIdentityPrincipalId.value))]",
          "identityName": {
            "value": "[variables('miACAName')]"
          },
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', reference('acrCommon2').outputs.containerRegistryName.value), if(variables('resourceExists').acrProject, createObject('value', variables('acrProjectName')), createObject('value', reference('acr').outputs.containerRegistryName.value)))]",
          "containerAppsEnvironmentName": "[if(and(variables('resourceExists').containerAppsEnv, parameters('serviceSettingDeployContainerApps')), createObject('value', variables('containerAppsEnvName')), if(parameters('serviceSettingDeployContainerApps'), createObject('value', reference('containerAppsEnv').outputs.environmentName.value), createObject('value', '')))]",
          "containerAppsEnvironmentId": "[if(and(variables('resourceExists').containerAppsEnv, parameters('serviceSettingDeployContainerApps')), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.App/managedEnvironments', variables('containerAppsEnvName'))), if(parameters('serviceSettingDeployContainerApps'), createObject('value', reference('containerAppsEnv').outputs.environmentId.value), createObject('value', '')))]",
          "openAiDeploymentName": {
            "value": "gpt"
          },
          "openAiEvalDeploymentName": {
            "value": "gpt-evals"
          },
          "openAiEmbeddingDeploymentName": {
            "value": "text-embedding-ada-002"
          },
          "openAiEndpoint": "[if(and(variables('resourceExists').aiServices, parameters('enableAIServices')), createObject('value', reference('aiServicesREF').endpoints['OpenAI Language Model Instance API']), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.openAIEndpoint.value), createObject('value', '')))]",
          "openAiName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]",
          "openAiType": {
            "value": "azure"
          },
          "openAiApiVersion": {
            "value": "[parameters('openAiApiVersion')]"
          },
          "aiSearchEndpoint": "[if(and(not(variables('resourceExists').aiSearch), parameters('enableAISearch')), createObject('value', reference('aiSearchService').outputs.aiSearchEndpoint.value), if(parameters('enableAISearch'), createObject('value', variables('hostname')), createObject('value', '')))]",
          "aiSearchIndexName": {
            "value": "[format('index-{0}-{1}', variables('projectName'), parameters('resourceSuffix'))]"
          },
          "appinsightsConnectionstring": "[if(and(not(variables('resourceExists').applicationInsight), parameters('serviceSettingDeployAppInsightsDashboard')), createObject('value', reference('appinsights').outputs.connectionString.value), if(parameters('serviceSettingDeployAppInsightsDashboard'), createObject('value', reference('appInsightsREF').ConnectionString), createObject('value', '')))]",
          "bingName": "[if(and(parameters('serviceSettingDeployBingSearch'), not(variables('resourceExists').bing)), createObject('value', reference('bing').outputs.bingName.value), if(parameters('serviceSettingDeployBingSearch'), createObject('value', variables('bingName')), createObject('value', '')))]",
          "bingApiEndpoint": {
            "value": "[variables('var_bing_endpoint')]"
          },
          "bingApiKey": "[if(and(parameters('serviceSettingDeployBingSearch'), not(variables('resourceExists').bing)), createObject('value', reference('bing').outputs.bingApiKey.value), if(and(parameters('serviceSettingDeployBingSearch'), variables('resourceExists').bing), createObject('value', listKeys('bingREF', '2020-06-10').key1), createObject('value', '')))]",
          "aiProjectName": "[if(and(parameters('enableAIFoundryHub'), not(variables('resourceExists').aiHubProject)), createObject('value', reference('aiHub').outputs.aiProjectName.value), createObject('value', variables('aifProjectName')))]",
          "subscriptionId": {
            "value": "[variables('subscriptionIdDevTestProd')]"
          },
          "appWorkloadProfileName": {
            "value": "[parameters('acaAppWorkloadProfileName')]"
          },
          "containerCpuCoreCount": {
            "value": "[parameters('containerCpuCoreCount')]"
          },
          "containerMemory": {
            "value": "[parameters('containerMemory')]"
          },
          "keyVaultUrl": "[if(variables('resourceExists').keyvault, createObject('value', reference('kvREF').vaultUri), createObject('value', reference('kv1').outputs.keyvaultUri.value))]",
          "imageName": "[if(not(empty(parameters('aca_a_registry_image'))), createObject('value', parameters('aca_a_registry_image')), createObject('value', parameters('aca_default_image')))]",
          "imageRegistryType": "[if(not(empty(parameters('aca_a_registry_image'))), createObject('value', variables('imageRegistryTypeA')), createObject('value', 'ms'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "11939160748184369493"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "identityName": {
              "type": "string"
            },
            "identityId": {
              "type": "string"
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "api"
            },
            "openAiDeploymentName": {
              "type": "string"
            },
            "openAiEvalDeploymentName": {
              "type": "string"
            },
            "openAiEndpoint": {
              "type": "string"
            },
            "openAiName": {
              "type": "string"
            },
            "bingName": {
              "type": "string"
            },
            "openAiApiVersion": {
              "type": "string"
            },
            "openAiEmbeddingDeploymentName": {
              "type": "string"
            },
            "openAiType": {
              "type": "string"
            },
            "aiSearchEndpoint": {
              "type": "string"
            },
            "aiSearchIndexName": {
              "type": "string"
            },
            "appinsightsConnectionstring": {
              "type": "string"
            },
            "aiProjectName": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            },
            "customDomains": {
              "type": "array",
              "defaultValue": []
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "vnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetNamePend": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetAcaDedicatedName": {
              "type": "string",
              "defaultValue": ""
            },
            "appWorkloadProfileName": {
              "type": "string",
              "defaultValue": ""
            },
            "keyVaultUrl": {
              "type": "string",
              "defaultValue": ""
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "imageRegistryType": {
              "type": "string",
              "defaultValue": "ms",
              "allowedValues": [
                "ms",
                "dockerhub",
                "private"
              ]
            },
            "bingApiKey": {
              "type": "securestring"
            },
            "bingApiEndpoint": {
              "type": "string"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "containerCpuCoreCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "2.0Gi",
              "metadata": {
                "description": "Memory allocated to a single container instance, e.g., 1Gi"
              }
            }
          },
          "variables": {
            "baseEnvVars": [
              {
                "name": "AZURE_LOCATION",
                "value": "[parameters('location')]"
              },
              {
                "name": "AZURE_RESOURCE_GROUP",
                "value": "[parameters('resourceGroupName')]"
              },
              {
                "name": "AZURE_SUBSCRIPTION_ID",
                "value": "[parameters('subscriptionId')]"
              },
              {
                "name": "AZURE_CLIENT_ID",
                "value": "[parameters('identityId')]"
              },
              {
                "name": "AZURE_SEARCH_ENDPOINT",
                "value": "[parameters('aiSearchEndpoint')]"
              },
              {
                "name": "AZUREAISEARCH__INDEX_NAME",
                "value": "[parameters('aiSearchIndexName')]"
              },
              {
                "name": "OPENAI_TYPE",
                "value": "[parameters('openAiType')]"
              },
              {
                "name": "AZURE_OPENAI_API_VERSION",
                "value": "[parameters('openAiApiVersion')]"
              },
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "[parameters('openAiEndpoint')]"
              },
              {
                "name": "AZURE_OPENAI_NAME",
                "value": "[parameters('openAiName')]"
              },
              {
                "name": "AZURE_OPENAI_DEPLOYMENT_NAME",
                "value": "[parameters('openAiDeploymentName')]"
              },
              {
                "name": "AZURE_OPENAI_4_EVAL_DEPLOYMENT_NAME",
                "value": "[parameters('openAiEvalDeploymentName')]"
              },
              {
                "name": "AZURE_AI_PROJECT_NAME",
                "value": "[parameters('aiProjectName')]"
              },
              {
                "name": "AZURE_EMBEDDING_NAME",
                "value": "[parameters('openAiEmbeddingDeploymentName')]"
              },
              {
                "name": "appinsightsConnectionstring",
                "value": "[parameters('appinsightsConnectionstring')]"
              },
              {
                "name": "BING_SEARCH_ENDPOINT",
                "value": "[parameters('bingApiEndpoint')]"
              },
              {
                "name": "BING_SEARCH_NAME",
                "value": "[parameters('bingName')]"
              }
            ],
            "bingSearchKeyEnvVar": "[if(not(empty(parameters('bingApiKey'))), createArray(createObject('name', 'BING_SEARCH_KEY', 'secretRef', 'bing-search-key')), createArray())]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}-1', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerAppsEnvironmentId": {
                    "value": "[parameters('containerAppsEnvironmentId')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "customDomains": {
                    "value": "[parameters('customDomains')]"
                  },
                  "ipSecurityRestrictions": {
                    "value": "[parameters('ipSecurityRestrictions')]"
                  },
                  "enablePublicGenAIAccess": {
                    "value": "[parameters('enablePublicGenAIAccess')]"
                  },
                  "enablePublicAccessWithPerimeter": {
                    "value": "[parameters('enablePublicAccessWithPerimeter')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('vnetResourceGroupName')]"
                  },
                  "subnetNamePend": {
                    "value": "[parameters('subnetNamePend')]"
                  },
                  "subnetAcaDedicatedName": {
                    "value": "[parameters('subnetAcaDedicatedName')]"
                  },
                  "allowedOrigins": {
                    "value": "[parameters('allowedOrigins')]"
                  },
                  "appWorkloadProfileName": {
                    "value": "[parameters('appWorkloadProfileName')]"
                  },
                  "containerCpuCoreCount": {
                    "value": "[parameters('containerCpuCoreCount')]"
                  },
                  "containerMemory": {
                    "value": "[parameters('containerMemory')]"
                  },
                  "keyVaultUrl": {
                    "value": "[parameters('keyVaultUrl')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "imageRegistryType": {
                    "value": "[parameters('imageRegistryType')]"
                  },
                  "secrets": "[if(not(empty(parameters('bingApiKey'))), createObject('value', createObject('bing-search-key', parameters('bingApiKey'))), createObject('value', createObject()))]",
                  "env": {
                    "value": "[concat(variables('baseEnvVars'), variables('bingSearchKeyEnvVar'))]"
                  },
                  "targetPort": {
                    "value": "[parameters('targetPort')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15179009151763167262"
                    },
                    "description": "Creates or updates an existing Azure Container App."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment name for the container apps"
                      }
                    },
                    "containerAppsEnvironmentId": {
                      "type": "string"
                    },
                    "containerCpuCoreCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "2.0Gi",
                      "metadata": {
                        "description": "Memory allocated to a single container instance, e.g., 1Gi"
                      }
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "metadata": {
                        "description": "The minimum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "The name of the container"
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry"
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable or disable Dapr for the container app"
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "The Dapr app ID"
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if Ingress is enabled for the container app"
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "The type of identity for the resource"
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The ID of the user-assigned identity"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The secrets required for the container"
                      }
                    },
                    "env": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The environment variables for the container"
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if the resource ingress is exposed externally"
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service binds associated with the container"
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "The target port for the container"
                      }
                    },
                    "allowedOrigins": {
                      "type": "array"
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
                    },
                    "imageRegistryType": {
                      "type": "string",
                      "defaultValue": "ms",
                      "allowedValues": [
                        "ms",
                        "dockerhub",
                        "private"
                      ]
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable public access with network perimeter security"
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the virtual network"
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource group name containing the virtual network"
                      }
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the private endpoints"
                      }
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the dedicated container apps subnet"
                      }
                    },
                    "appWorkloadProfileName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "keyVaultUrl": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('depl-{0}-2', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enablePublicGenAIAccess": {
                            "value": "[parameters('enablePublicGenAIAccess')]"
                          },
                          "ipSecurityRestrictions": {
                            "value": "[parameters('ipSecurityRestrictions')]"
                          },
                          "enablePublicAccessWithPerimeter": {
                            "value": "[parameters('enablePublicAccessWithPerimeter')]"
                          },
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetResourceGroupName": {
                            "value": "[parameters('vnetResourceGroupName')]"
                          },
                          "subnetNamePend": {
                            "value": "[parameters('subnetNamePend')]"
                          },
                          "subnetAcaDedicatedName": {
                            "value": "[parameters('subnetAcaDedicatedName')]"
                          },
                          "identityType": {
                            "value": "[parameters('identityType')]"
                          },
                          "identityName": {
                            "value": "[parameters('identityName')]"
                          },
                          "ingressEnabled": {
                            "value": "[parameters('ingressEnabled')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "containerAppsEnvironmentName": {
                            "value": "[parameters('containerAppsEnvironmentName')]"
                          },
                          "containerAppsEnvironmentId": {
                            "value": "[parameters('containerAppsEnvironmentId')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "containerRegistryHostSuffix": {
                            "value": "[parameters('containerRegistryHostSuffix')]"
                          },
                          "containerCpuCoreCount": {
                            "value": "[parameters('containerCpuCoreCount')]"
                          },
                          "containerMemory": {
                            "value": "[parameters('containerMemory')]"
                          },
                          "containerMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "containerMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "daprEnabled": {
                            "value": "[parameters('daprEnabled')]"
                          },
                          "daprAppId": {
                            "value": "[parameters('daprAppId')]"
                          },
                          "daprAppProtocol": {
                            "value": "[parameters('daprAppProtocol')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "allowedOrigins": {
                            "value": "[parameters('allowedOrigins')]"
                          },
                          "external": {
                            "value": "[parameters('external')]"
                          },
                          "env": {
                            "value": "[parameters('env')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "imageRegistryType": {
                            "value": "[parameters('imageRegistryType')]"
                          },
                          "targetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          },
                          "customDomains": {
                            "value": "[parameters('customDomains')]"
                          },
                          "appWorkloadProfileName": {
                            "value": "[parameters('appWorkloadProfileName')]"
                          },
                          "keyVaultUrl": {
                            "value": "[parameters('keyVaultUrl')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2534383004813400886"
                            },
                            "description": "Creates a container app in an Azure Container App environment."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "allowedOrigins": {
                              "type": "array",
                              "metadata": {
                                "description": "Allowed origins"
                              }
                            },
                            "containerAppsEnvironmentName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the environment for container apps"
                              }
                            },
                            "containerAppsEnvironmentId": {
                              "type": "string",
                              "metadata": {
                                "description": "ID of the environment for container apps"
                              }
                            },
                            "containerCpuCoreCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                              }
                            },
                            "containerMemory": {
                              "type": "string",
                              "defaultValue": "2.0Gi",
                              "metadata": {
                                "description": "Memory allocated to a single container instance, e.g., 1Gi"
                              }
                            },
                            "containerMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "minValue": 1,
                              "metadata": {
                                "description": "The maximum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerMinReplicas": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "The minimum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the container"
                              }
                            },
                            "containerRegistryName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the container registry"
                              }
                            },
                            "containerRegistryHostSuffix": {
                              "type": "string",
                              "defaultValue": "azurecr.io",
                              "metadata": {
                                "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                              }
                            },
                            "daprAppProtocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "allowedValues": [
                                "http",
                                "grpc"
                              ],
                              "metadata": {
                                "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
                              }
                            },
                            "daprAppId": {
                              "type": "string",
                              "defaultValue": "[parameters('containerName')]",
                              "metadata": {
                                "description": "The Dapr app ID"
                              }
                            },
                            "daprEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable Dapr"
                              }
                            },
                            "env": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The environment variables for the container"
                              }
                            },
                            "external": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if the resource ingress is exposed externally"
                              }
                            },
                            "identityName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The ID of the user-assigned identity"
                              }
                            },
                            "identityType": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned"
                              ],
                              "metadata": {
                                "description": "The type of identity for the resource"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container image"
                              }
                            },
                            "imageRegistryType": {
                              "type": "string",
                              "defaultValue": "ms",
                              "allowedValues": [
                                "ms",
                                "dockerhub",
                                "private"
                              ]
                            },
                            "ingressEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if Ingress is enabled for the container app"
                              }
                            },
                            "revisionMode": {
                              "type": "string",
                              "defaultValue": "Single"
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "The secrets required for the container"
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The service binds associated with the container"
                              }
                            },
                            "serviceType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container apps add-on to use. e.g. redis"
                              }
                            },
                            "targetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "The target port for the container"
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "vnetCidr": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "enablePublicGenAIAccess": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enablePublicAccessWithPerimeter": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "vnetResourceGroupName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetNamePend": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetAcaDedicatedName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "appWorkloadProfileName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "keyVaultUrl": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]",
                            "rId": "[resourceId('Microsoft.App/managedEnvironments@2023-05-01', parameters('containerAppsEnvironmentName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2025-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "[variables('normalizedIdentityType')]",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]": {}
                                }
                              },
                              "properties": {
                                "workloadProfileName": "[if(empty(parameters('appWorkloadProfileName')), null(), parameters('appWorkloadProfileName'))]",
                                "environmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                                "configuration": {
                                  "copy": [
                                    {
                                      "name": "secrets",
                                      "count": "[length(items(parameters('secrets')))]",
                                      "input": {
                                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                                        "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                                      }
                                    }
                                  ],
                                  "activeRevisionsMode": "[parameters('revisionMode')]",
                                  "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'allowInsecure', true(), 'transport', 'auto', 'ipSecurityRestrictions', if(and(not(empty(parameters('ipSecurityRestrictions'))), not(parameters('enablePublicGenAIAccess'))), parameters('ipSecurityRestrictions'), null()), 'corsPolicy', createObject('maxAge', 3600, 'allowCredentials', true(), 'allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')), 'allowedMethods', createArray('GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'), 'allowedHeaders', createArray('*'), 'exposeHeaders', createArray('*')), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null())), null())]",
                                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
                                  "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
                                  "registries": "[if(and(variables('usePrivateRegistry'), equals(parameters('imageRegistryType'), 'private')), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
                                },
                                "template": {
                                  "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
                                  "containers": [
                                    {
                                      "image": "[if(not(empty(parameters('imageName'))), if(equals(parameters('imageRegistryType'), 'private'), format('{0}.{1}/{2}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix'), parameters('imageName')), parameters('imageName')), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                      "name": "[parameters('containerName')]",
                                      "env": "[parameters('env')]",
                                      "resources": {
                                        "cpu": "[parameters('containerCpuCoreCount')]",
                                        "memory": "[parameters('containerMemory')]"
                                      }
                                    }
                                  ],
                                  "scale": {
                                    "minReplicas": "[parameters('containerMinReplicas')]",
                                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "defaultDomain": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2025-01-01').defaultDomain]"
                            },
                            "identityPrincipalId": {
                              "type": "string",
                              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
                            },
                            "imageName": {
                              "type": "string",
                              "value": "[parameters('imageName')]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "serviceBind": {
                              "type": "object",
                              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01').configuration.ingress.fqdn), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
                    },
                    "imageName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.imageName.value]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.name.value]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.uri.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "SERVICE_ACA_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_ACA_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.uri.value]"
            },
            "SERVICE_ACA_IMAGE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-1', parameters('name'))), '2022-09-01').outputs.imageName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "acr",
        "acrCommon2",
        "aiHub",
        "aiSearchService",
        "aiServices",
        "aiServicesREF",
        "appinsights",
        "appInsightsREF",
        "bing",
        "cmnRbacACR",
        "containerAppsEnv",
        "kv1",
        "kvREF",
        "miACAREF",
        "miForAca",
        "subnetDelegationAca"
      ]
    },
    "acaWebApp": {
      "condition": "[and(not(variables('resourceExists').containerAppW), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('aca-w-{0}-depl', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "name": {
            "value": "[variables('containerAppWName')]"
          },
          "apiEndpoint": {
            "value": "[reference('acaApi').outputs.SERVICE_ACA_URI.value]"
          },
          "allowedOrigins": {
            "value": "[variables('allowedOrigins')]"
          },
          "containerAppsEnvironmentName": "[if(and(variables('resourceExists').containerAppsEnv, parameters('serviceSettingDeployContainerApps')), createObject('value', variables('containerAppsEnvName')), if(parameters('serviceSettingDeployContainerApps'), createObject('value', reference('containerAppsEnv').outputs.environmentName.value), createObject('value', '')))]",
          "containerAppsEnvironmentId": "[if(and(variables('resourceExists').containerAppsEnv, parameters('serviceSettingDeployContainerApps')), createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionIdDevTestProd'), variables('targetResourceGroup')), 'Microsoft.App/managedEnvironments', variables('containerAppsEnvName'))), if(parameters('serviceSettingDeployContainerApps'), createObject('value', reference('containerAppsEnv').outputs.environmentId.value), createObject('value', '')))]",
          "containerRegistryName": "[if(parameters('useCommonACR'), createObject('value', reference('acrCommon2').outputs.containerRegistryName.value), if(variables('resourceExists').acrProject, createObject('value', variables('acrProjectName')), createObject('value', reference('acr').outputs.containerRegistryName.value)))]",
          "identityId": "[if(variables('resourceExists').miACA, createObject('value', reference('miACAREF').principalId), createObject('value', reference('miForAca').outputs.managedIdentityPrincipalId.value))]",
          "identityName": {
            "value": "[variables('miACAName')]"
          },
          "appWorkloadProfileName": {
            "value": "[parameters('acaAppWorkloadProfileName')]"
          },
          "containerCpuCoreCount": {
            "value": "[parameters('containerCpuCoreCount')]"
          },
          "containerMemory": {
            "value": "[parameters('containerMemory')]"
          },
          "keyVaultUrl": "[if(variables('resourceExists').keyvault, createObject('value', reference('kvREF').vaultUri), createObject('value', reference('kv1').outputs.keyvaultUri.value))]",
          "imageName": "[if(not(empty(parameters('aca_w_registry_image'))), createObject('value', parameters('aca_w_registry_image')), createObject('value', parameters('aca_default_image')))]",
          "imageRegistryType": "[if(not(empty(parameters('aca_w_registry_image'))), createObject('value', variables('imageRegistryTypeW')), createObject('value', 'ms'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16918582377667319699"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "identityName": {
              "type": "string"
            },
            "identityId": {
              "type": "string"
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "web"
            },
            "apiEndpoint": {
              "type": "string"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            },
            "appWorkloadProfileName": {
              "type": "string",
              "defaultValue": ""
            },
            "containerCpuCoreCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "2.0Gi",
              "metadata": {
                "description": "Memory allocated to a single container instance, e.g., 1Gi"
              }
            },
            "keyVaultUrl": {
              "type": "string",
              "defaultValue": ""
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "imageName": {
              "type": "string",
              "defaultValue": ""
            },
            "imageRegistryType": {
              "type": "string",
              "defaultValue": "ms",
              "allowedValues": [
                "ms",
                "dockerhub",
                "private"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('depl-{0}-{1}', parameters('name'), deployment().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "identityType": {
                    "value": "UserAssigned"
                  },
                  "allowedOrigins": {
                    "value": "[parameters('allowedOrigins')]"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerAppsEnvironmentId": {
                    "value": "[parameters('containerAppsEnvironmentId')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "appWorkloadProfileName": {
                    "value": "[parameters('appWorkloadProfileName')]"
                  },
                  "containerCpuCoreCount": {
                    "value": "[parameters('containerCpuCoreCount')]"
                  },
                  "containerMemory": {
                    "value": "[parameters('containerMemory')]"
                  },
                  "keyVaultUrl": {
                    "value": "[parameters('keyVaultUrl')]"
                  },
                  "env": {
                    "value": [
                      {
                        "name": "AZURE_CLIENT_ID",
                        "value": "[parameters('identityId')]"
                      },
                      {
                        "name": "API_ENDPOINT",
                        "value": "[parameters('apiEndpoint')]"
                      }
                    ]
                  },
                  "targetPort": {
                    "value": "[parameters('targetPort')]"
                  },
                  "imageName": {
                    "value": "[parameters('imageName')]"
                  },
                  "imageRegistryType": {
                    "value": "[parameters('imageRegistryType')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15179009151763167262"
                    },
                    "description": "Creates or updates an existing Azure Container App."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment name for the container apps"
                      }
                    },
                    "containerAppsEnvironmentId": {
                      "type": "string"
                    },
                    "containerCpuCoreCount": {
                      "type": "int",
                      "defaultValue": 1,
                      "metadata": {
                        "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "2.0Gi",
                      "metadata": {
                        "description": "Memory allocated to a single container instance, e.g., 1Gi"
                      }
                    },
                    "wlMinCountServerless": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "wlMinCountDedicated": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "wlMaxCount": {
                      "type": "int",
                      "defaultValue": 5
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "metadata": {
                        "description": "The minimum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "The name of the container"
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry"
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable or disable Dapr for the container app"
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "The Dapr app ID"
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if Ingress is enabled for the container app"
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "The type of identity for the resource"
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The ID of the user-assigned identity"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The secrets required for the container"
                      }
                    },
                    "env": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The environment variables for the container"
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if the resource ingress is exposed externally"
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service binds associated with the container"
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "The target port for the container"
                      }
                    },
                    "allowedOrigins": {
                      "type": "array"
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest"
                    },
                    "imageRegistryType": {
                      "type": "string",
                      "defaultValue": "ms",
                      "allowedValues": [
                        "ms",
                        "dockerhub",
                        "private"
                      ]
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "enablePublicGenAIAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "enablePublicAccessWithPerimeter": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable public access with network perimeter security"
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the virtual network"
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Resource group name containing the virtual network"
                      }
                    },
                    "subnetNamePend": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the private endpoints"
                      }
                    },
                    "subnetAcaDedicatedName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Subnet name for the dedicated container apps subnet"
                      }
                    },
                    "appWorkloadProfileName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "keyVaultUrl": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('depl-{0}-2', parameters('name'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enablePublicGenAIAccess": {
                            "value": "[parameters('enablePublicGenAIAccess')]"
                          },
                          "ipSecurityRestrictions": {
                            "value": "[parameters('ipSecurityRestrictions')]"
                          },
                          "enablePublicAccessWithPerimeter": {
                            "value": "[parameters('enablePublicAccessWithPerimeter')]"
                          },
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "vnetResourceGroupName": {
                            "value": "[parameters('vnetResourceGroupName')]"
                          },
                          "subnetNamePend": {
                            "value": "[parameters('subnetNamePend')]"
                          },
                          "subnetAcaDedicatedName": {
                            "value": "[parameters('subnetAcaDedicatedName')]"
                          },
                          "identityType": {
                            "value": "[parameters('identityType')]"
                          },
                          "identityName": {
                            "value": "[parameters('identityName')]"
                          },
                          "ingressEnabled": {
                            "value": "[parameters('ingressEnabled')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "containerAppsEnvironmentName": {
                            "value": "[parameters('containerAppsEnvironmentName')]"
                          },
                          "containerAppsEnvironmentId": {
                            "value": "[parameters('containerAppsEnvironmentId')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "containerRegistryHostSuffix": {
                            "value": "[parameters('containerRegistryHostSuffix')]"
                          },
                          "containerCpuCoreCount": {
                            "value": "[parameters('containerCpuCoreCount')]"
                          },
                          "containerMemory": {
                            "value": "[parameters('containerMemory')]"
                          },
                          "containerMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "containerMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "daprEnabled": {
                            "value": "[parameters('daprEnabled')]"
                          },
                          "daprAppId": {
                            "value": "[parameters('daprAppId')]"
                          },
                          "daprAppProtocol": {
                            "value": "[parameters('daprAppProtocol')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "allowedOrigins": {
                            "value": "[parameters('allowedOrigins')]"
                          },
                          "external": {
                            "value": "[parameters('external')]"
                          },
                          "env": {
                            "value": "[parameters('env')]"
                          },
                          "imageName": {
                            "value": "[parameters('imageName')]"
                          },
                          "imageRegistryType": {
                            "value": "[parameters('imageRegistryType')]"
                          },
                          "targetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          },
                          "customDomains": {
                            "value": "[parameters('customDomains')]"
                          },
                          "appWorkloadProfileName": {
                            "value": "[parameters('appWorkloadProfileName')]"
                          },
                          "keyVaultUrl": {
                            "value": "[parameters('keyVaultUrl')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.37.4.10188",
                              "templateHash": "2534383004813400886"
                            },
                            "description": "Creates a container app in an Azure Container App environment."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "allowedOrigins": {
                              "type": "array",
                              "metadata": {
                                "description": "Allowed origins"
                              }
                            },
                            "containerAppsEnvironmentName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the environment for container apps"
                              }
                            },
                            "containerAppsEnvironmentId": {
                              "type": "string",
                              "metadata": {
                                "description": "ID of the environment for container apps"
                              }
                            },
                            "containerCpuCoreCount": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                              }
                            },
                            "containerMemory": {
                              "type": "string",
                              "defaultValue": "2.0Gi",
                              "metadata": {
                                "description": "Memory allocated to a single container instance, e.g., 1Gi"
                              }
                            },
                            "containerMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "minValue": 1,
                              "metadata": {
                                "description": "The maximum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerMinReplicas": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "The minimum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the container"
                              }
                            },
                            "containerRegistryName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the container registry"
                              }
                            },
                            "containerRegistryHostSuffix": {
                              "type": "string",
                              "defaultValue": "azurecr.io",
                              "metadata": {
                                "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                              }
                            },
                            "daprAppProtocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "allowedValues": [
                                "http",
                                "grpc"
                              ],
                              "metadata": {
                                "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
                              }
                            },
                            "daprAppId": {
                              "type": "string",
                              "defaultValue": "[parameters('containerName')]",
                              "metadata": {
                                "description": "The Dapr app ID"
                              }
                            },
                            "daprEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable Dapr"
                              }
                            },
                            "env": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The environment variables for the container"
                              }
                            },
                            "external": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if the resource ingress is exposed externally"
                              }
                            },
                            "identityName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The ID of the user-assigned identity"
                              }
                            },
                            "identityType": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned"
                              ],
                              "metadata": {
                                "description": "The type of identity for the resource"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container image"
                              }
                            },
                            "imageRegistryType": {
                              "type": "string",
                              "defaultValue": "ms",
                              "allowedValues": [
                                "ms",
                                "dockerhub",
                                "private"
                              ]
                            },
                            "ingressEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if Ingress is enabled for the container app"
                              }
                            },
                            "revisionMode": {
                              "type": "string",
                              "defaultValue": "Single"
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "The secrets required for the container"
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The service binds associated with the container"
                              }
                            },
                            "serviceType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container apps add-on to use. e.g. redis"
                              }
                            },
                            "targetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "The target port for the container"
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "vnetCidr": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "enablePublicGenAIAccess": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enablePublicAccessWithPerimeter": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "vnetName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "vnetResourceGroupName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetNamePend": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subnetAcaDedicatedName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "appWorkloadProfileName": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "keyVaultUrl": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]",
                            "rId": "[resourceId('Microsoft.App/managedEnvironments@2023-05-01', parameters('containerAppsEnvironmentName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2025-01-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "[variables('normalizedIdentityType')]",
                                "userAssignedIdentities": {
                                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))]": {}
                                }
                              },
                              "properties": {
                                "workloadProfileName": "[if(empty(parameters('appWorkloadProfileName')), null(), parameters('appWorkloadProfileName'))]",
                                "environmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                                "configuration": {
                                  "copy": [
                                    {
                                      "name": "secrets",
                                      "count": "[length(items(parameters('secrets')))]",
                                      "input": {
                                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                                        "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                                      }
                                    }
                                  ],
                                  "activeRevisionsMode": "[parameters('revisionMode')]",
                                  "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'allowInsecure', true(), 'transport', 'auto', 'ipSecurityRestrictions', if(and(not(empty(parameters('ipSecurityRestrictions'))), not(parameters('enablePublicGenAIAccess'))), parameters('ipSecurityRestrictions'), null()), 'corsPolicy', createObject('maxAge', 3600, 'allowCredentials', true(), 'allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')), 'allowedMethods', createArray('GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'), 'allowedHeaders', createArray('*'), 'exposeHeaders', createArray('*')), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null())), null())]",
                                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
                                  "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
                                  "registries": "[if(and(variables('usePrivateRegistry'), equals(parameters('imageRegistryType'), 'private')), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
                                },
                                "template": {
                                  "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
                                  "containers": [
                                    {
                                      "image": "[if(not(empty(parameters('imageName'))), if(equals(parameters('imageRegistryType'), 'private'), format('{0}.{1}/{2}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix'), parameters('imageName')), parameters('imageName')), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                      "name": "[parameters('containerName')]",
                                      "env": "[parameters('env')]",
                                      "resources": {
                                        "cpu": "[parameters('containerCpuCoreCount')]",
                                        "memory": "[parameters('containerMemory')]"
                                      }
                                    }
                                  ],
                                  "scale": {
                                    "minReplicas": "[parameters('containerMinReplicas')]",
                                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "defaultDomain": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2025-01-01').defaultDomain]"
                            },
                            "identityPrincipalId": {
                              "type": "string",
                              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
                            },
                            "imageName": {
                              "type": "string",
                              "value": "[parameters('imageName')]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "serviceBind": {
                              "type": "object",
                              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2025-01-01').configuration.ingress.fqdn), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
                    },
                    "imageName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.imageName.value]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.name.value]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-2', parameters('name'))), '2022-09-01').outputs.uri.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "SERVICE_ACA_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_ACA_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.uri.value]"
            },
            "SERVICE_ACA_IMAGE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('depl-{0}-{1}', parameters('name'), deployment().name)), '2022-09-01').outputs.imageName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "acaApi",
        "acr",
        "acrCommon2",
        "cmnRbacACR",
        "containerAppsEnv",
        "kv1",
        "kvREF",
        "miACAREF",
        "miForAca",
        "subnetDelegationAca"
      ]
    },
    "rbacForContainerAppsMI": {
      "condition": "[and(not(variables('resourceExists').miACA), parameters('serviceSettingDeployContainerApps'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacForContainerAppsMI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "appInsightsName": "[if(and(parameters('serviceSettingDeployAppInsightsDashboard'), not(variables('resourceExists').applicationInsight)), createObject('value', reference('appinsights').outputs.name.value), if(parameters('serviceSettingDeployAppInsightsDashboard'), createObject('value', variables('applicationInsightName')), createObject('value', reference('applicationInsightSWC').outputs.name.value)))]",
          "principalIdMI": "[if(variables('resourceExists').miACA, createObject('value', reference('miACAREF').principalId), createObject('value', reference('miForAca').outputs.managedIdentityPrincipalId.value))]",
          "resourceGroupId": {
            "value": "[reference('projectResourceGroup').outputs.rgId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "14845812446885816195"
            }
          },
          "parameters": {
            "principalIdMI": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            },
            "resourceGroupId": {
              "type": "string"
            }
          },
          "variables": {
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "aiHubProjectDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "monitoringMetricsPublisherRoleId": "3913510d-42f4-4e42-8a64-420c390055eb",
            "monitoringReaderRoleId": "43d0d8ad-25c7-4714-9337-8ba259a9fe05"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchIndexDataContributorRoleId to project service principal OID: {0} to {1}', parameters('principalIdMI'), parameters('aiSearchName'))]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchServiceContributorRoleId to project service principal OID: {0} to {1}', parameters('principalIdMI'), parameters('aiSearchName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('appInsightsName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('monitoringMetricsPublisherRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringMetricsPublisherRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('monitoringMetricsPublisherRoleId to project service principal OID:{0} to {1}', parameters('principalIdMI'), parameters('appInsightsName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('appInsightsName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('appInsightsName'))]",
              "name": "[guid(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('monitoringReaderRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('monitoringReaderRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('monitoringReaderRoleId to project service principal OID:{0} to {1}', parameters('principalIdMI'), parameters('appInsightsName'))]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiHubProjectDataScientistRoleId'), parameters('principalIdMI'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiHubProjectDataScientistRoleId'))]",
                "principalId": "[parameters('principalIdMI')]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMLDataScientistRoleId to project service principal OID:{0} to {1} on RG level', parameters('principalIdMI'), parameters('resourceGroupId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "acaApi",
        "aiSearchService",
        "appinsights",
        "applicationInsightSWC",
        "containerAppsEnv",
        "miACAREF",
        "miForAca",
        "projectResourceGroup"
      ]
    },
    "amlv2": {
      "condition": "[and(not(variables('resourceExists').aml), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AzureMLDepl_{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('amlName')]"
          },
          "uniqueDepl": {
            "value": "[variables('deploymentProjSpecificUniqueSuffix')]"
          },
          "uniqueSalt5char": {
            "value": "[variables('uniqueInAIFenv')]"
          },
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "projectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "aifactorySuffix": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "skuName": {
            "value": "basic"
          },
          "skuTier": {
            "value": "basic"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "aksSubnetId": {
            "value": "[parameters('aksSubnetId')]"
          },
          "aksSubnetName": {
            "value": "[variables('aksSubnetName')]"
          },
          "aksDnsServiceIP": {
            "value": "[parameters('aksDnsServiceIP')]"
          },
          "aksServiceCidr": {
            "value": "[parameters('aksServiceCidr')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "vnetId": {
            "value": "[variables('vnetId')]"
          },
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "privateEndpointName": {
            "value": "[format('pend-{0}-aml-to-vnt-mlcmn', variables('projectName'))]"
          },
          "amlPrivateDnsZoneID": {
            "value": "[variables('privateLinksDnsZones').amlworkspace.id]"
          },
          "notebookPrivateDnsZoneID": {
            "value": "[variables('privateLinksDnsZones').notebooks.id]"
          },
          "allowPublicAccessWhenBehindVnet": "[if(and(equals(parameters('AMLStudioUIPrivate'), true()), empty(variables('ipWhitelist_remove_ending_32'))), createObject('value', false()), createObject('value', true()))]",
          "enablePublicAccessWithPerimeter": "[if(equals(parameters('AMLStudioUIPrivate'), false()), createObject('value', true()), createObject('value', false()))]",
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "aksVmSku_dev": {
            "value": "[variables('aks_dev_sku_param')]"
          },
          "aksVmSku_testProd": {
            "value": "[variables('aks_test_prod_sku_param')]"
          },
          "aksNodes_dev": {
            "value": "[variables('aks_dev_nodes_param')]"
          },
          "aksNodes_testProd": {
            "value": "[variables('aks_test_prod_nodes_param')]"
          },
          "kubernetesVersionAndOrchestrator": {
            "value": "[variables('aks_version_param')]"
          },
          "amlComputeDefaultVmSize_dev": {
            "value": "[variables('aml_cluster_dev_sku_param')]"
          },
          "amlComputeDefaultVmSize_testProd": {
            "value": "[variables('aml_cluster_test_prod_sku_param')]"
          },
          "amlComputeMaxNodex_dev": {
            "value": "[variables('aml_cluster_dev_nodes_param')]"
          },
          "amlComputeMaxNodex_testProd": {
            "value": "[variables('aml_cluster_test_prod_nodes_param')]"
          },
          "ciVmSku_dev": {
            "value": "[variables('aml_ci_dev_sku_param')]"
          },
          "ciVmSku_testProd": {
            "value": "[variables('aml_ci_test_prod_sku_param')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesAzureML')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAzureML')))]",
          "ipWhitelist_array": "[if(empty(variables('ipWhitelist_remove_ending_32')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_remove_ending_32')))]",
          "saName": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "kvName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "acrName": "[if(parameters('useCommonACR'), createObject('value', reference('acrCommon2').outputs.containerRegistryName.value), if(variables('resourceExists').acrProject, createObject('value', variables('acrProjectName')), createObject('value', reference('acr').outputs.containerRegistryName.value)))]",
          "acrRGName": "[if(parameters('useCommonACR'), createObject('value', variables('commonResourceGroup')), createObject('value', variables('targetResourceGroup')))]",
          "appInsightsName": {
            "value": "[reference('applicationInsightSWC').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6944343267955003006"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new machine learning studio resources"
              }
            },
            "uniqueDepl": {
              "type": "string"
            },
            "uniqueSalt5char": {
              "type": "string"
            },
            "locationSuffix": {
              "type": "string"
            },
            "aifactorySuffix": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "projectNumber": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "aksSubnetId": {
              "type": "string"
            },
            "aksSubnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet name for aks"
              }
            },
            "aksServiceCidr": {
              "type": "string",
              "defaultValue": "10.0.0.0/16"
            },
            "aksDnsServiceIP": {
              "type": "string",
              "defaultValue": "10.0.0.10"
            },
            "aksDockerBridgeCidr": {
              "type": "string",
              "defaultValue": "172.17.0.1/16"
            },
            "ownSSL": {
              "type": "string",
              "defaultValue": "disabled",
              "metadata": {
                "description": "AKS own SSL on private cluster. MS auto SSL is not possible since private cluster"
              }
            },
            "aksCert": {
              "type": "string",
              "defaultValue": ""
            },
            "aksCname": {
              "type": "string",
              "defaultValue": ""
            },
            "aksCertKey": {
              "type": "string",
              "defaultValue": ""
            },
            "aksSSLOverwriteExistingDomain": {
              "type": "bool",
              "defaultValue": false
            },
            "aksSSLstatus": {
              "type": "string",
              "defaultValue": ""
            },
            "skuName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the skuname of the machine learning studio"
              }
            },
            "skuTier": {
              "type": "string",
              "metadata": {
                "description": "Specifies the sku tier of the machine learning studio"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to machine learning studio resources"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "vnetId": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the virtual network id associated with private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "amlPrivateDnsZoneID": {
              "type": "string",
              "metadata": {
                "description": "Resource name ID on DnsZone"
              }
            },
            "notebookPrivateDnsZoneID": {
              "type": "string",
              "metadata": {
                "description": "Resource name ID on DnsZone"
              }
            },
            "kubernetesVersionAndOrchestrator": {
              "type": "string",
              "metadata": {
                "description": "AKS Kubernetes version and AgentPool orchestrator version"
              }
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Azure ML allowPublicAccessWhenBehindVnet"
              }
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "ESML can run in DEMO mode, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can turn this off, to use your HUB instead."
              }
            },
            "amlComputeDefaultVmSize_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default VM size for the default compute cluster: STANDARD_D3"
              }
            },
            "amlComputeDefaultVmSize_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default VM size for the default compute cluster: STANDARD_D4"
              }
            },
            "amlComputeMaxNodex_dev": {
              "type": "int",
              "metadata": {
                "description": "Dev Max nodes: 0-Max"
              }
            },
            "amlComputeMaxNodex_testProd": {
              "type": "int",
              "metadata": {
                "description": "TestProd Max nodes: 0-Max"
              }
            },
            "aksVmSku_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default  VM size for the default AKS cluster:Standard_D12. More: Standard_D3_v2(4,14)"
              }
            },
            "aksVmSku_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default  VM size for the default AKS cluster:Standard_D12(4,28,200GB)"
              }
            },
            "aksNodes_dev": {
              "type": "int",
              "metadata": {
                "description": "Dev Agentpool agents/nodes: 1 as default for Dev"
              }
            },
            "aksNodes_testProd": {
              "type": "int",
              "metadata": {
                "description": "Dev Agentpool agents/nodes: 3 as default for Test or Prod"
              }
            },
            "ciVmSku_dev": {
              "type": "string",
              "metadata": {
                "description": "DEV default VM size for the default Compute Instance cluster:Standard_D4_v3(4,16,100)"
              }
            },
            "ciVmSku_testProd": {
              "type": "string",
              "metadata": {
                "description": "TestProd default VM size for the default Compute Instance cluster:Standard_D4_v3. More: Standard_D14 (16 cores,112 ram)"
              }
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "saName": {
              "type": "string"
            },
            "kvName": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            },
            "acrRGName": {
              "type": "string"
            },
            "appInsightsName": {
              "type": "string"
            },
            "ipWhitelist_array": {
              "type": "array",
              "defaultValue": []
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "subnetRef": "[format('{0}/subnets/{1}', parameters('vnetId'), parameters('subnetName'))]",
            "aiFactoryNumber": "[substring(parameters('aifactorySuffix'), 1, 3)]",
            "aml_create_ci": false,
            "aksName": "[format('esml{0}-{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
            "nodeResourceGroupName": "[format('aks-{0}', resourceGroup().name)]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Default",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "imageBuildCompute": "[format('{0}/p{1}-m01{2}-{3}', parameters('name'), parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "friendlyName": "[parameters('name')]",
                "description": "Azure Machine Learning v2, managed networking, not using legacy V1 mode",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false
                },
                "ipAllowlist": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "Default",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "imageBuildCompute": "[format('{0}/p{1}-m01{2}-{3}', parameters('name'), parameters('projectNumber'), parameters('locationSuffix'), parameters('env'))]",
                "friendlyName": "[parameters('name')]",
                "description": "Azure Machine Learning v2, managed networking, not using legacy V1 mode",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('saName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('kvName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[if(or(not(empty(parameters('ipWhitelist_array'))), parameters('enablePublicAccessWithPerimeter')), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false
                },
                "ipAllowlist": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(and(parameters('allowPublicAccessWhenBehindVnet'), not(empty(parameters('ipWhitelist_array')))), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('ownSSL'), 'disabled'), equals(parameters('env'), 'dev'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('aksName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AKS",
                "computeLocation": "[parameters('location')]",
                "description": "[format('Serve model ONLINE inference on AKS powered webservice. Defaults: Dev={0}. TestProd={1}', parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                "resourceId": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value, reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value)]",
                "properties": {
                  "agentCount": "[if(equals(parameters('env'), 'dev'), 1, 3)]",
                  "clusterPurpose": "[if(equals(parameters('env'), 'dev'), 'DevTest', 'FastProd')]",
                  "agentVmSize": "[if(equals(parameters('env'), 'dev'), parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                  "loadBalancerType": "InternalLoadBalancer",
                  "aksNetworkingConfiguration": {
                    "subnetId": "[parameters('aksSubnetId')]",
                    "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]",
                    "serviceCidr": "[parameters('aksServiceCidr')]"
                  },
                  "loadBalancerSubnet": "[parameters('aksSubnetName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(and(equals(parameters('ownSSL'), 'disabled'), equals(parameters('env'), 'test')), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('aksName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "computeType": "AKS",
                "computeLocation": "[parameters('location')]",
                "description": "[format('Serve model ONLINE inference on AKS powered webservice. Defaults: Dev={0}. TestProd={1}', parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                "resourceId": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value, reference(resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))), '2022-09-01').outputs.aksId.value)]",
                "properties": {
                  "agentCount": "[if(equals(parameters('env'), 'dev'), 1, 3)]",
                  "clusterPurpose": "[if(equals(parameters('env'), 'dev'), 'DevTest', 'FastProd')]",
                  "agentVmSize": "[if(equals(parameters('env'), 'dev'), parameters('aksVmSku_dev'), parameters('aksVmSku_testProd'))]",
                  "loadBalancerType": "InternalLoadBalancer",
                  "aksNetworkingConfiguration": {
                    "subnetId": "[parameters('aksSubnetId')]",
                    "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('aksDockerBridgeCidr')]",
                    "serviceCidr": "[parameters('aksServiceCidr')]"
                  },
                  "loadBalancerSubnet": "[parameters('aksSubnetName')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSDev4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.Resources/deployments', format('AMLAKSTestProd4{0}', parameters('uniqueDepl')))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('p{0}-m01{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('location')]",
                "description": "[format('CPU cluster for batch training models ( or batch scoring with AML pipeline) for {0} in ESML-{1} AI Factory. Defaults: Dev={2}. TestProd={3}', parameters('projectName'), parameters('env'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                "disableLocalAuth": true,
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                  "enableNodePublicIp": false,
                  "isolatedNetwork": false,
                  "osType": "Linux",
                  "remoteLoginPortPublicAccess": "Disabled",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeMaxNodex_dev'), parameters('amlComputeMaxNodex_testProd'))]",
                    "nodeIdleTimeBeforeScaleDown": "PT120S"
                  },
                  "subnet": {
                    "id": "[variables('subnetRef')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.MachineLearningServices/workspaces/computes",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), format('p{0}-m01{1}-{2}', parameters('projectNumber'), parameters('locationSuffix'), parameters('env')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "computeType": "AmlCompute",
                "computeLocation": "[parameters('location')]",
                "description": "[format('CPU cluster for batch training models ( or batch scoring with AML pipeline) for {0} in ESML-{1} AI Factory. Defaults: Dev={2}. TestProd={3}', parameters('projectName'), parameters('env'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                "disableLocalAuth": true,
                "properties": {
                  "vmPriority": "Dedicated",
                  "vmSize": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeDefaultVmSize_dev'), parameters('amlComputeDefaultVmSize_testProd'))]",
                  "enableNodePublicIp": false,
                  "isolatedNetwork": false,
                  "osType": "Linux",
                  "remoteLoginPortPublicAccess": "Disabled",
                  "scaleSettings": {
                    "minNodeCount": 0,
                    "maxNodeCount": "[if(equals(parameters('env'), 'dev'), parameters('amlComputeMaxNodex_dev'), parameters('amlComputeMaxNodex_testProd'))]",
                    "nodeIdleTimeBeforeScaleDown": "PT120S"
                  },
                  "subnet": {
                    "id": "[variables('subnetRef')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.Resources/deployments', format('mlNetworking1{0}', parameters('uniqueDepl')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('mlNetworking1{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceArmId": "[if(equals(parameters('env'), 'dev'), createObject('value', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))), createObject('value', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))))]",
                  "subnetId": {
                    "value": "[variables('subnetRef')]"
                  },
                  "machineLearningPleName": {
                    "value": "[parameters('privateEndpointName')]"
                  },
                  "amlPrivateDnsZoneID": {
                    "value": "[parameters('amlPrivateDnsZoneID')]"
                  },
                  "notebookPrivateDnsZoneID": {
                    "value": "[parameters('notebookPrivateDnsZoneID')]"
                  },
                  "centralDnsZoneByPolicyInHub": {
                    "value": "[parameters('centralDnsZoneByPolicyInHub')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "15700423160202838962"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region of the deployment"
                      }
                    },
                    "machineLearningPleName": {
                      "type": "string",
                      "metadata": {
                        "description": "Machine learning workspace private link endpoint name"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the subnet resource"
                      }
                    },
                    "workspaceArmId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the machine learning workspace"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Tags to add to the resources"
                      }
                    },
                    "amlPrivateDnsZoneID": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name ID on DnsZone"
                      }
                    },
                    "notebookPrivateDnsZoneID": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name ID on DnsZone"
                      }
                    },
                    "ipRules": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "centralDnsZoneByPolicyInHub": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "ESML can run standalone/demo mode, this is deafault mode, meaning default FALSE value, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can change this, to use your HUB DnzZones instead."
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZoneName": {
                      "azureusgovernment": "privatelink.api.ml.azure.us",
                      "azurechinacloud": "privatelink.api.ml.azure.cn",
                      "azurecloud": "privatelink.api.azureml.ms"
                    },
                    "privateAznbDnsZoneName": {
                      "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
                      "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
                      "azurecloud": "privatelink.notebooks.azure.net"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('machineLearningPleName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('machineLearningPleName')]",
                            "properties": {
                              "groupIds": [
                                "amlworkspace"
                              ],
                              "privateLinkServiceId": "[parameters('workspaceArmId')]",
                              "privateLinkServiceConnectionState": {
                                "status": "Approved",
                                "description": "Auto-Approved",
                                "actionsRequired": "None"
                              }
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('centralDnsZoneByPolicyInHub'), false())]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}DnsZone', parameters('machineLearningPleName'), parameters('machineLearningPleName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[variables('privateDnsZoneName')[environment().name]]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('amlPrivateDnsZoneID')]"
                            }
                          },
                          {
                            "name": "[variables('privateAznbDnsZoneName')[environment().name]]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('notebookPrivateDnsZoneID')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('machineLearningPleName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[equals(parameters('env'), 'dev')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AMLAKSDev4{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('aksName')]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kubernetesVersion": {
                    "value": "[parameters('kubernetesVersionAndOrchestrator')]"
                  },
                  "dnsPrefix": {
                    "value": "[format('{0}-dns', variables('aksName'))]"
                  },
                  "enableRbac": {
                    "value": true
                  },
                  "nodeResourceGroup": {
                    "value": "[variables('nodeResourceGroupName')]"
                  },
                  "aksDnsServiceIP": {
                    "value": "[parameters('aksDnsServiceIP')]"
                  },
                  "aksServiceCidr": {
                    "value": "[parameters('aksServiceCidr')]"
                  },
                  "agentPoolProfiles": {
                    "value": [
                      {
                        "name": "[toLower('agentpool')]",
                        "count": "[parameters('aksNodes_dev')]",
                        "vmSize": "[parameters('aksVmSku_dev')]",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "mode": "System",
                        "vnetSubnetID": "[parameters('aksSubnetId')]",
                        "type": "VirtualMachineScaleSets",
                        "maxPods": 30,
                        "orchestratorVersion": "[parameters('kubernetesVersionAndOrchestrator')]",
                        "osDiskSizeGB": 128
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "949985098030188726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the AKS cluster"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Specifies the tags that should be applied to aks resources"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies location were aks resources should be deployed"
                      }
                    },
                    "kubernetesVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies version of kubernetes on the AKS cluster"
                      }
                    },
                    "dnsPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the DNS prefix for the AKS cluster"
                      }
                    },
                    "enableRbac": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if RBAC permission model should be enabled or not"
                      }
                    },
                    "disableLocalAccounts": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if LOCAL accounts in kubernetes permission model should be enabled or not"
                      }
                    },
                    "enableAzureRbac": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if AzureRbac accounts in kubernetes permission model should be enabled or not. 2022-11 needs to be false, since Azure ML"
                      }
                    },
                    "outboundType": {
                      "type": "string",
                      "defaultValue": "loadBalancer",
                      "allowedValues": [
                        "loadBalancer",
                        "userDefinedRouting",
                        "none"
                      ]
                    },
                    "agentPoolProfiles": {
                      "type": "array",
                      "metadata": {
                        "description": "Specifies agent pool profile settings in a array with hashmaps format"
                      }
                    },
                    "nodeResourceGroup": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the resource group that is used for node pool resources"
                      }
                    },
                    "aksServiceCidr": {
                      "type": "string",
                      "defaultValue": "10.0.0.0/16"
                    },
                    "aksDnsServiceIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.10"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Paid"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "kubernetesVersion": "[parameters('kubernetesVersion')]",
                        "dnsPrefix": "[parameters('dnsPrefix')]",
                        "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                        "enableRBAC": "[parameters('enableRbac')]",
                        "agentPoolProfiles": "[parameters('agentPoolProfiles')]",
                        "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                        "networkProfile": {
                          "networkPlugin": "azure",
                          "outboundType": "[parameters('outboundType')]",
                          "serviceCidr": "[parameters('aksServiceCidr')]",
                          "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                          "dockerBridgeCidr": "172.17.0.1/16",
                          "loadBalancerSku": "standard"
                        },
                        "apiServerAccessProfile": {
                          "enablePrivateCluster": true
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "aksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[or(equals(parameters('env'), 'test'), equals(parameters('env'), 'prod'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AMLAKSTestProd4{0}', parameters('uniqueDepl'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('aksName')]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kubernetesVersion": {
                    "value": "[parameters('kubernetesVersionAndOrchestrator')]"
                  },
                  "dnsPrefix": {
                    "value": "[format('{0}-dns', variables('aksName'))]"
                  },
                  "enableRbac": {
                    "value": true
                  },
                  "nodeResourceGroup": {
                    "value": "[variables('nodeResourceGroupName')]"
                  },
                  "aksDnsServiceIP": {
                    "value": "[parameters('aksDnsServiceIP')]"
                  },
                  "aksServiceCidr": {
                    "value": "[parameters('aksServiceCidr')]"
                  },
                  "agentPoolProfiles": {
                    "value": [
                      {
                        "name": "agentpool",
                        "count": "[parameters('aksNodes_testProd')]",
                        "vmSize": "[parameters('aksVmSku_testProd')]",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "mode": "System",
                        "vnetSubnetID": "[parameters('aksSubnetId')]",
                        "type": "VirtualMachineScaleSets",
                        "maxPods": 30,
                        "orchestratorVersion": "[parameters('kubernetesVersionAndOrchestrator')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.37.4.10188",
                      "templateHash": "949985098030188726"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the AKS cluster"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "Specifies the tags that should be applied to aks resources"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies location were aks resources should be deployed"
                      }
                    },
                    "kubernetesVersion": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies version of kubernetes on the AKS cluster"
                      }
                    },
                    "dnsPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the DNS prefix for the AKS cluster"
                      }
                    },
                    "enableRbac": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if RBAC permission model should be enabled or not"
                      }
                    },
                    "disableLocalAccounts": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if LOCAL accounts in kubernetes permission model should be enabled or not"
                      }
                    },
                    "enableAzureRbac": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if AzureRbac accounts in kubernetes permission model should be enabled or not. 2022-11 needs to be false, since Azure ML"
                      }
                    },
                    "outboundType": {
                      "type": "string",
                      "defaultValue": "loadBalancer",
                      "allowedValues": [
                        "loadBalancer",
                        "userDefinedRouting",
                        "none"
                      ]
                    },
                    "agentPoolProfiles": {
                      "type": "array",
                      "metadata": {
                        "description": "Specifies agent pool profile settings in a array with hashmaps format"
                      }
                    },
                    "nodeResourceGroup": {
                      "type": "string",
                      "metadata": {
                        "description": "Specifies the name of the resource group that is used for node pool resources"
                      }
                    },
                    "aksServiceCidr": {
                      "type": "string",
                      "defaultValue": "10.0.0.0/16"
                    },
                    "aksDnsServiceIP": {
                      "type": "string",
                      "defaultValue": "10.0.0.10"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ContainerService/managedClusters",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Paid"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "kubernetesVersion": "[parameters('kubernetesVersion')]",
                        "dnsPrefix": "[parameters('dnsPrefix')]",
                        "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                        "enableRBAC": "[parameters('enableRbac')]",
                        "agentPoolProfiles": "[parameters('agentPoolProfiles')]",
                        "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                        "networkProfile": {
                          "networkPlugin": "azure",
                          "outboundType": "[parameters('outboundType')]",
                          "serviceCidr": "[parameters('aksServiceCidr')]",
                          "dnsServiceIP": "[parameters('aksDnsServiceIP')]",
                          "dockerBridgeCidr": "172.17.0.1/16",
                          "loadBalancerSku": "standard"
                        },
                        "apiServerAccessProfile": {
                          "enablePrivateCluster": true
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "aksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerService/managedClusters', parameters('name'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "amlId": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')))]"
            },
            "amlName": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), parameters('name'), parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[if(equals(parameters('env'), 'dev'), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "dnsConfig": {
              "type": "array",
              "value": [
                {
                  "name": "[parameters('privateEndpointName')]",
                  "type": "amlworkspace"
                }
              ]
            }
          }
        }
      },
      "dependsOn": [
        "acr",
        "acrCommon2",
        "applicationInsightSWC",
        "kv1",
        "projectResourceGroup",
        "sa4AIsearch"
      ]
    },
    "rbacAmlv2": {
      "condition": "[and(not(variables('resourceExists').aml), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacUsersAmlVersion2{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "azureMLworkspaceName": "[if(and(variables('resourceExists').aml, parameters('enableAzureMachineLearning')), createObject('value', variables('amlName')), if(parameters('enableAzureMachineLearning'), createObject('value', reference('amlv2').outputs.amlName.value), createObject('value', '')))]",
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "user2Storage": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12124267625136021728"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "azureMLworkspaceName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "user2Storage": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "variables": {
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd"
          },
          "resources": [
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027a: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 1: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028a: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Azure Storage 1: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[parameters('user2Storage')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('043 AzureAIDeveloper role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": ""
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignment",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIAdministrator'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 azureAIAdministrator role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "AI Project: azureAIAdministrator:"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignmentSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIAdministrator'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIAdministrator to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 AzureAIInferenceDeploymentOperator role to USER with OID  {0} for {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIInferenceDeploymentOperatorRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMLDataScientistRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('041 AzureMLDataScientist role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: Azure ML Data scientist: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('042 AzureMachineLearningWorkspaceConnectionSecretsReader role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: AzureMachineLearningWorkspaceConnectionSecretsReader: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('azureMLworkspaceName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('azureMLworkspaceName')), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('azureMLworkspaceName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "amlv2",
        "projectResourceGroup",
        "sa4AIsearch",
        "spAndMI2Array"
      ]
    },
    "aiFoundry": {
      "condition": "[and(not(variables('resourceExists').aif), parameters('serviceSettingEnableAIFoundryPreview'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('AIFoundryPrevview4{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('aifName')]"
          },
          "projectName": {
            "value": "[variables('aifPrjName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12553744537568059336"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "eastus2"
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "properties": {
                "publicNetworkAccess": "[if(parameters('enablePublicAccessWithPerimeter'), 'Enabled', 'Disabled')]",
                "allowProjectManagement": true,
                "customSubDomainName": "[parameters('name')]",
                "disableLocalAuth": true
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('projectName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2024-10-01",
              "name": "[format('{0}/{1}', parameters('name'), 'gpt-4o')]",
              "sku": {
                "capacity": 1,
                "name": "GlobalStandard"
              },
              "properties": {
                "model": {
                  "name": "gpt-4o",
                  "format": "OpenAI"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('name'), parameters('projectName')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            }
          }
        }
      }
    },
    "aiHub": {
      "condition": "[and(not(variables('resourceExists').aiHub), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', variables('aiHubNameShort'), variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('aiHubName')]"
          },
          "defaultProjectName": {
            "value": "[variables('aifProjectName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('projecttags')]"
          },
          "aifactorySuffix": {
            "value": "[parameters('aifactorySuffixRG')]"
          },
          "applicationInsightsName": "[if(variables('resourceExists').applicationInsight, createObject('value', variables('applicationInsightName')), createObject('value', reference('applicationInsightSWC').outputs.name.value))]",
          "acrName": "[if(parameters('useCommonACR'), createObject('value', reference('acrCommon2').outputs.containerRegistryName.value), if(variables('resourceExists').acrProject, createObject('value', variables('acrProjectName')), createObject('value', reference('acr').outputs.containerRegistryName.value)))]",
          "acrRGName": "[if(parameters('useCommonACR'), createObject('value', variables('commonResourceGroup')), createObject('value', variables('targetResourceGroup')))]",
          "env": {
            "value": "[parameters('env')]"
          },
          "keyVaultName": "[if(variables('resourceExists').keyvault, createObject('value', variables('keyvaultName')), createObject('value', reference('kv1').outputs.keyvaultName.value))]",
          "privateEndpointName": {
            "value": "[format('p-aihub-{0}{1}{2}{3}amlworkspace', variables('projectName'), parameters('locationSuffix'), parameters('env'), variables('genaiName'))]"
          },
          "aifactoryProjectNumber": {
            "value": "[parameters('projectNumber')]"
          },
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "subnetName": {
            "value": "[variables('defaultSubnet')]"
          },
          "vnetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "vnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "enablePublicAccessWithPerimeter": {
            "value": "[parameters('enablePublicAccessWithPerimeter')]"
          },
          "allowPublicAccessWhenBehindVnet": {
            "value": "[parameters('allowPublicAccessWhenBehindVnet')]"
          },
          "enablePublicGenAIAccess": {
            "value": "[parameters('enablePublicGenAIAccess')]"
          },
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "privateLinksDnsZones": {
            "value": "[variables('privateLinksDnsZones')]"
          },
          "centralDnsZoneByPolicyInHub": {
            "value": "[parameters('centralDnsZoneByPolicyInHub')]"
          },
          "kindAIHub": {
            "value": "Hub"
          },
          "aiServicesName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]",
          "logWorkspaceName": {
            "value": "[variables('laWorkspaceName')]"
          },
          "logWorkspaceResoureGroupName": {
            "value": "[variables('commonResourceGroup')]"
          },
          "locationSuffix": {
            "value": "[parameters('locationSuffix')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "aifactorySalt": {
            "value": "[variables('uniqueInAIFenv')]"
          },
          "ipRules": "[if(empty(variables('processedIpRulesAIHub')), createObject('value', createArray()), createObject('value', variables('processedIpRulesAIHub')))]",
          "ipWhitelist_array": "[if(empty(variables('ipWhitelist_remove_ending_32')), createObject('value', createArray()), createObject('value', variables('ipWhitelist_remove_ending_32')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1001646536434458417"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the new machine learning studio resources"
              }
            },
            "aifactorySuffix": {
              "type": "string"
            },
            "aifactoryProjectNumber": {
              "type": "string",
              "metadata": {
                "description": "Specifies the computer pool name"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location where the new machine learning studio resource should be deployed"
              }
            },
            "env": {
              "type": "string",
              "metadata": {
                "description": "ESML dev,test or prod. If DEV then AKS cluster is provisioned with 1 agent otherwise 3"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the storageaccount id used for the machine learning studio"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the keyvault id used for the machine learning studio"
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "description": "Specifies the tags that should be applied to machine learning studio resources"
              }
            },
            "privateEndpointName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the private endpoint name"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the virtual network id associated with private endpoint"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "(Required) Specifies the subnet name that will be associated with the private endpoint"
              }
            },
            "vnetResourceGroupName": {
              "type": "string"
            },
            "defaultProjectName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ESML can run in DEMO mode, which creates private DnsZones,DnsZoneGroups, and vNetLinks. You can turn this off, to use your HUB instead."
              }
            },
            "centralDnsZoneByPolicyInHub": {
              "type": "bool"
            },
            "allowPublicAccessWhenBehindVnet": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicGenAIAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "enablePublicAccessWithPerimeter": {
              "type": "bool",
              "defaultValue": false
            },
            "createPrivateEndpoint": {
              "type": "bool",
              "defaultValue": true
            },
            "aiSearchName": {
              "type": "string"
            },
            "aifactorySalt": {
              "type": "string"
            },
            "privateLinksDnsZones": {
              "type": "object"
            },
            "kindAIHub": {
              "type": "string",
              "defaultValue": "Hub",
              "allowedValues": [
                "Hub"
              ]
            },
            "ipRules": {
              "type": "array",
              "defaultValue": []
            },
            "aiServicesName": {
              "type": "string"
            },
            "logWorkspaceName": {
              "type": "string"
            },
            "logWorkspaceResoureGroupName": {
              "type": "string"
            },
            "locationSuffix": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string"
            },
            "ipWhitelist_array": {
              "type": "array",
              "defaultValue": []
            },
            "acrName": {
              "type": "string"
            },
            "acrRGName": {
              "type": "string"
            }
          },
          "variables": {
            "aiFactoryNumber": "[substring(parameters('aifactorySuffix'), 1, 3)]",
            "privateDnsZoneName": {
              "azureusgovernment": "privatelink.api.ml.azure.us",
              "azurechinacloud": "privatelink.api.ml.azure.cn",
              "azurecloud": "privatelink.api.azureml.ms"
            },
            "privateDnsZoneNameNotebooks": {
              "azureusgovernment": "privatelink.notebooks.usgovcloudapi.net",
              "azurechinacloud": "privatelink.notebooks.chinacloudapi.cn",
              "azurecloud": "privatelink.notebooks.azure.net"
            },
            "azureOpenAIConnectionName": "azureOpenAI",
            "azureAIServicesConnectionName": "azureAIServices",
            "azureAISearchConnectionName": "azureAISearch",
            "aiProjectDiagSettingName": "aiProjectDiagnosticSetting",
            "aiHubDiagSettingName": "aiHubDiagnosticSetting",
            "epDefaultName": "[format('ep-{0}-01-{1}-{2}-{3}{4}', parameters('aifactoryProjectNumber'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySalt'), parameters('resourceSuffix'))]",
            "epDefaultName2": "[format('ep-{0}-1-{1}-{2}-{3}{4}', parameters('aifactoryProjectNumber'), parameters('locationSuffix'), parameters('env'), parameters('aifactorySalt'), parameters('resourceSuffix'))]"
          },
          "resources": [
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureOpenAIConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AzureOpenAI",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAIServicesConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AIServices",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), and(not(empty(variables('azureAISearchConnectionName'))), equals(parameters('enablePublicAccessWithPerimeter'), true())))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAISearchConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "CognitiveSearch",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "Required",
                "peStatus": "Active",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchName'))]",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), true()), equals(parameters('enablePublicAccessWithPerimeter'), true()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/onlineEndpoints",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('defaultProjectName'), variables('epDefaultName2'))]",
              "location": "[parameters('location')]",
              "kind": "Managed",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "This is the default inference endpoint for the AI Factory project, prompt flow deployment. Called by the UI hosted in Web Apps.",
                "authMode": "Key",
                "publicNetworkAccess": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureOpenAIConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AzureOpenAI",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "peStatus": "[if(parameters('enablePublicGenAIAccess'), 'NotApplicable', 'Active')]",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoints['OpenAI Language Model Instance API']]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAIServicesConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "AIServices",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "peStatus": "[if(parameters('enablePublicGenAIAccess'), 'NotApplicable', 'Active')]",
                "sharedUserList": [],
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]"
                },
                "target": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), '2024-10-01').endpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), and(not(empty(variables('azureAISearchConnectionName'))), equals(parameters('enablePublicAccessWithPerimeter'), false())))]",
              "type": "Microsoft.MachineLearningServices/workspaces/connections",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), variables('azureAISearchConnectionName'))]",
              "properties": {
                "authType": "AAD",
                "category": "CognitiveSearch",
                "isSharedToAll": true,
                "useWorkspaceManagedIdentity": true,
                "peRequirement": "[if(parameters('enablePublicGenAIAccess'), 'NotRequired', 'Required')]",
                "target": "[format('https://{0}.search.windows.net/', parameters('aiSearchName'))]",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('enablePublicAccessWithPerimeter'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.MachineLearningServices/workspaces/onlineEndpoints",
              "apiVersion": "2024-10-01-preview",
              "name": "[format('{0}/{1}', parameters('defaultProjectName'), variables('epDefaultName'))]",
              "location": "[parameters('location')]",
              "kind": "Managed",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "This is the default inference endpoint for the AI Factory project, prompt flow deployment. Called by the UI hosted in Web Apps.",
                "authMode": "Key",
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePublicAccessWithPerimeter')]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kindAIHub')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "friendlyName": "[format('{0}-{1}-{2}', parameters('name'), parameters('env'), variables('aiFactoryNumber'))]",
                "description": "AI Hub with optional enablePublicAccessWithPerimeter. If using Azure Container Apps for UX and API. Create 2 deployments of your preffered GPT models GPT-4o, called gpt ,gpt-evals",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": "[if(parameters('enablePublicAccessWithPerimeter'), false(), true())]",
                "publicNetworkAccess": "Enabled",
                "allowPublicAccessWhenBehindVnet": "[if(parameters('enablePublicAccessWithPerimeter'), true(), parameters('allowPublicAccessWhenBehindVnet'))]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutbound",
                  "enableNetworkMonitor": false,
                  "outboundRules": "[union(createObject('OpenAI', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), 'subresourceTarget', 'account', 'sparkEnabled', false(), 'sparkStatus', 'Active'), 'status', 'Active'), 'SaBlob', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'subresourceTarget', 'blob', 'sparkEnabled', true(), 'sparkStatus', 'Active'), 'status', 'Active'), 'SaFile', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'subresourceTarget', 'file', 'sparkEnabled', true(), 'sparkStatus', 'Active'), 'status', 'Active')), if(not(empty(parameters('aiSearchName'))), createObject('search', createObject('type', 'PrivateEndpoint', 'destination', createObject('serviceResourceId', resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), 'subresourceTarget', 'searchService', 'sparkEnabled', false(), 'sparkStatus', 'Inactive'))), createObject()))]"
                }
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[variables('aiHubDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: Azure AI Foundry hub - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[variables('aiHubDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: Azure AI Foundry hub 2 - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('defaultProjectName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "Project",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('defaultProjectName')]",
                "description": "[format('Project for AI Factory project{0} in {1} environment in {2}', parameters('aifactoryProjectNumber'), parameters('env'), parameters('location'))]",
                "v1LegacyMode": false,
                "hbiWorkspace": false,
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "This is a container for the ai foundry project."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kindAIHub')]",
              "properties": {
                "allowRoleAssignmentOnRG": true,
                "friendlyName": "[format('{0}-{1}-{2}', parameters('name'), parameters('env'), variables('aiFactoryNumber'))]",
                "description": "AI Foundry hub requires an underlying Azure ML workspace. If using Azure Container Apps for UX and API. Create 2 deployments of your preffered GPT models GPT-4o, called gpt ,gpt-evals",
                "applicationInsights": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "containerRegistry": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('acrRGName')), 'Microsoft.ContainerRegistry/registries', parameters('acrName'))]",
                "keyVault": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "systemDatastoresAuthMode": "identity",
                "hbiWorkspace": false,
                "provisionNetworkNow": true,
                "enableDataIsolation": false,
                "v1LegacyMode": false,
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]",
                "allowPublicAccessWhenBehindVnet": "[parameters('allowPublicAccessWhenBehindVnet')]",
                "ipAllowlist": "[if(parameters('allowPublicAccessWhenBehindVnet'), parameters('ipWhitelist_array'), null())]",
                "networkAcls": "[if(parameters('allowPublicAccessWhenBehindVnet'), createObject('defaultAction', 'Deny', 'ipRules', parameters('ipRules')), null())]",
                "managedNetwork": {
                  "firewallSku": "Basic",
                  "isolationMode": "AllowInternetOutBound",
                  "enableNetworkMonitor": false,
                  "outboundRules": {
                    "search": {
                      "type": "PrivateEndpoint",
                      "destination": {
                        "serviceResourceId": "[resourceId('Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                        "subresourceTarget": "searchService",
                        "sparkEnabled": false,
                        "sparkStatus": "Inactive"
                      }
                    },
                    "OpenAI": {
                      "type": "PrivateEndpoint",
                      "destination": {
                        "serviceResourceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName'))]",
                        "subresourceTarget": "account",
                        "sparkEnabled": false,
                        "sparkStatus": "Active"
                      },
                      "status": "Active"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-10-01-preview",
              "name": "[parameters('defaultProjectName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "Project",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "friendlyName": "[parameters('defaultProjectName')]",
                "description": "[format('Project for AI Factory project{0} in {1} environment in {2}', parameters('aifactoryProjectNumber'), parameters('env'), parameters('location'))]",
                "v1LegacyMode": false,
                "hbiWorkspace": false,
                "publicNetworkAccess": "[if(parameters('enablePublicGenAIAccess'), 'Enabled', 'Disabled')]",
                "hubResourceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ],
              "metadata": {
                "description": "This is a container for the ai foundry project."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to interact with the secrets of the parent project. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to invoke models in Azure OpenAI. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[variables('aiProjectDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}/onlineEndpoints/{1}', parameters('defaultProjectName'), variables('epDefaultName'))]",
              "name": "chatProjectOnlineEndpointDiagSettingsDefault",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project online endpoint - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'aifactory-proj-ep-default-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName')), '2024-10-01-preview').primaryKey]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName'))]"
              ],
              "metadata": {
                "description": "Key Vault Secret: The Managed Online Endpoint key to be referenced from the Chat UI app."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), false())]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('pend-nic-aihub-{0}', parameters('name'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "groupIds": [
                        "amlworkspace"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('centralDnsZoneByPolicyInHub'), false()), equals(parameters('enablePublicAccessWithPerimeter'), false()))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}DnsZone', parameters('privateEndpointName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[variables('privateDnsZoneName')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').amlworkspace.id]"
                    }
                  },
                  {
                    "name": "[variables('privateDnsZoneNameNotebooks')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').notebooks.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ea01e6af-a1c1-4350-9563-ad00f8c72ec5')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]",
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to interact with the secrets of the parent project. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Assign the online endpoint the ability to invoke models in Azure OpenAI. This is needed to execute the prompt flow from the managed endpoint."
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('defaultProjectName'))]",
              "name": "[variables('aiProjectDiagSettingName')]",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}/onlineEndpoints/{1}', parameters('defaultProjectName'), variables('epDefaultName2'))]",
              "name": "chatProjectOnlineEndpointDiagSettingsDefault2",
              "properties": {
                "workspaceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('logWorkspaceResoureGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('logWorkspaceName'))]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true,
                    "retentionPolicy": {
                      "enabled": false,
                      "days": 0
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Azure Diagnostics: AI Foundry chat project online endpoint - allLogs"
              }
            },
            {
              "condition": "[equals(parameters('enablePublicAccessWithPerimeter'), true())]",
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'aifactory-proj-ep-default2-api-key')]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2')), '2024-10-01-preview').primaryKey]",
                "contentType": "text/plain",
                "attributes": {
                  "enabled": true
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces/onlineEndpoints', parameters('defaultProjectName'), variables('epDefaultName2'))]"
              ],
              "metadata": {
                "description": "Key Vault Secret: The Managed Online Endpoint key to be referenced from the Chat UI app."
              }
            },
            {
              "condition": "[and(parameters('enablePublicAccessWithPerimeter'), parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('pend-nic-aihub-{0}', parameters('name'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpointName')]",
                    "properties": {
                      "groupIds": [
                        "amlworkspace"
                      ],
                      "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]",
                      "privateLinkServiceConnectionState": {
                        "status": "Approved",
                        "description": "Auto-Approved",
                        "actionsRequired": "None"
                      }
                    }
                  }
                ],
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
              ]
            },
            {
              "condition": "[and(and(not(parameters('centralDnsZoneByPolicyInHub')), parameters('enablePublicAccessWithPerimeter')), parameters('createPrivateEndpoint'))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateEndpointName'), format('{0}DnsZone', parameters('privateEndpointName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[variables('privateDnsZoneName')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').amlworkspace.id]"
                    }
                  },
                  {
                    "name": "[variables('privateDnsZoneNameNotebooks')[environment().name]]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateLinksDnsZones').notebooks.id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('privateEndpointName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')))]"
            },
            "name": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), parameters('name'), parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), '2024-10-01-preview', 'full').identity.principalId, reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('defaultProjectName')), '2024-10-01-preview', 'full').identity.principalId)]"
            },
            "aiProjectName": {
              "type": "string",
              "value": "[if(equals(parameters('enablePublicAccessWithPerimeter'), false()), parameters('defaultProjectName'), parameters('defaultProjectName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "acr",
        "acrCommon2",
        "aiSearchService",
        "aiServices",
        "applicationInsightSWC",
        "kv1",
        "projectResourceGroup",
        "sacc",
        "subnet_aks_ref",
        "subnet_genai_ref"
      ]
    },
    "rbacAcrProjectspecific": {
      "condition": "[and(equals(parameters('useCommonACR'), false()), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacAcrProject{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acrName": "[if(variables('resourceExists').acrProject, createObject('value', variables('acrProjectName')), createObject('value', reference('acr').outputs.containerRegistryName.value))]",
          "aiHubName": "[if(parameters('enableAIFoundryHub'), if(variables('resourceExists').aiHub, createObject('value', variables('aiHubName')), createObject('value', reference('aiHub').outputs.name.value)), createObject('value', ''))]",
          "aiHubRgName": {
            "value": "[variables('targetResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "1851622493075134410"
            }
          },
          "parameters": {
            "aiHubName": {
              "type": "string"
            },
            "aiHubRgName": {
              "type": "string"
            },
            "acrName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('aiHubName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec'), parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('aiHubRgName')), 'Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "metadata": {
                "description": "Assign AML Workspace's ID: AcrPush to workload's container registry."
              }
            },
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('aiHubName'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d'), parameters('acrName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('aiHubRgName')), 'Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), '2024-10-01-preview', 'full').identity.principalId]"
              },
              "metadata": {
                "description": "Assign AML Workspace's Managed Online Endpoint: AcrPull to workload's container registry."
              }
            }
          ]
        }
      },
      "dependsOn": [
        "acr",
        "aiHub"
      ]
    },
    "rbackSPfromDBX2AMLSWC": {
      "condition": "[and(not(variables('resourceExists').aml), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacDBX2AMLGenAI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlName": {
            "value": "[variables('amlName')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "adfSP": "[if(variables('resourceExists').miPrj, createObject('value', reference('miPrjREF').principalId), createObject('value', reference('miForPrj').outputs.managedIdentityPrincipalId.value))]",
          "projectADuser": {
            "value": "[parameters('technicalContactId')]"
          },
          "additionalUserIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12414950222453870612"
            }
          },
          "parameters": {
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "adfSP": {
              "type": "string",
              "metadata": {
                "description": "Specifies the objectId of the Data factory managed identity"
              }
            },
            "projectADuser": {
              "type": "string",
              "metadata": {
                "description": "Specifies the objectId of the technical contact"
              }
            },
            "amlName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the azure machine learning resource"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "additionalUserIds": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "contributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor to service principal {0} for Azure ML {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('amlName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('adfSP')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('adfSP'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('adfSP')]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor to Azure datafactory {0} to run Azure ML pipelines {1}', parameters('adfSP'), parameters('amlName'))]"
              },
              "dependsOn": [
                "contributorSP"
              ]
            },
            {
              "copy": {
                "name": "contributorUserOrGroup",
                "count": "[length(range(0, length(parameters('additionalUserIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('amlName'))]",
              "name": "[guid(parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER or GROUP with OID  {0} for Azure ML {1}', parameters('additionalUserIds')[range(0, length(parameters('additionalUserIds')))[copyIndex()]], parameters('amlName'))]"
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName')), 'Microsoft.Authorization/roleAssignments', guid(parameters('adfSP'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('amlName'))))]",
                "contributorSP"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "amlv2",
        "kv1",
        "logAnalyticsWorkspaceOpInsight",
        "miForPrj",
        "miPrjREF",
        "spAndMI2Array"
      ]
    },
    "rbacKeyvaultCommon4Users": {
      "condition": "[and(empty(parameters('bastionResourceGroup')), parameters('addBastionHost'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac1GenAIReadUsersCmnKV{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "common_kv_name": {
            "value": "[format('kv-{0}{1}-{2}{3}', variables('cmnName'), parameters('env'), variables('uniqueInAIFenv'), parameters('commonResourceSuffix'))]"
          },
          "user_object_ids": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "bastion_service_name": "[if(empty(parameters('bastionName')), createObject('value', format('bastion-{0}-{1}{2}', parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix'))), createObject('value', parameters('bastionName')))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "9895493337093229926"
            }
          },
          "parameters": {
            "common_kv_name": {
              "type": "string"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "bastion_service_name": {
              "type": "string"
            },
            "addBastion": {
              "type": "bool",
              "defaultValue": false
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "copy": {
                "name": "readerUserCommonKv",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('common_kv_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_kv_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for keyvault: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_kv_name'))]"
              }
            },
            {
              "copy": {
                "name": "readerUserBastion",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "condition": "[parameters('addBastion')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('bastion_service_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for Bastion service: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "kv1",
        "rbacReadUsersToCmnVnetBastion"
      ]
    },
    "rbacExternalBastion": {
      "condition": "[and(not(empty(parameters('bastionResourceGroup'))), not(empty(parameters('bastionSubscription'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac2GenAIUsersBastionExt{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('bastionSubscription')]",
      "resourceGroup": "[parameters('bastionResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "bastion_service_name": "[if(empty(parameters('bastionName')), createObject('value', format('bastion-{0}-{1}{2}', parameters('locationSuffix'), parameters('env'), parameters('commonResourceSuffix'))), createObject('value', parameters('bastionName')))]",
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "8829912748312753645"
            }
          },
          "parameters": {
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "bastion_service_name": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
          },
          "resources": [
            {
              "copy": {
                "name": "readerUserBastion",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('bastion_service_name'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Reader to USER with OID  {0} for Bastion service: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('bastion_service_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "kv1",
        "rbacReadUsersToCmnVnetBastion"
      ]
    },
    "rbacForOpenAI": {
      "condition": "[and(parameters('serviceSettingDeployAzureOpenAI'), not(variables('resourceExists').openai))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac3OpenAI{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "openAIServicePrincipal": "[if(variables('resourceExists').openai, createObject('value', reference('openaiREF', '2024-10-01', 'full').identity.principalId), createObject('value', reference('csAzureOpenAI').outputs.principalId.value))]",
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "openAIName": "[if(variables('resourceExists').openai, createObject('value', variables('aoaiName')), if(parameters('serviceSettingDeployAzureOpenAI'), createObject('value', reference('csAzureOpenAI').outputs.cognitiveName.value), createObject('value', '')))]",
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "956532646074107392"
            }
          },
          "parameters": {
            "openAIServicePrincipal": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "openAIName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
            "cognitiveServicesUsagesReaderId": "bba48692-92b0-4667-a9ad-c31c7b334ac2"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "description": "010"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchIndexDataContributor for Azure OpenAI MI"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), '2024-04-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "description": "012"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchServiceContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage: StorageBlobDataContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: StorageBlobDataContributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019b"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage: File Data Privileged Contributor for Azure OpenAI MI"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]",
              "properties": {
                "principalId": "[parameters('openAIServicePrincipal')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019a"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: File Data Privileged Contributor for Azure OpenAI MI"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesContributor role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Contributor for users. All, except: Access quota, Make inference API call with Microsoft Entra ID"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributor role to project service principal/Mi OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesUsagesReaderId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesUsagesReaderId role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Usage Reader for users. Only Access quota (Minimal permission to view Cognitive Services usages)"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesUsagesReaderId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUsagesReader role to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: OpenAIContributorRole to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI Contributor for users. Full access including the ability to fine-tune, deploy and generate text"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIContributorRoleId'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-03-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', reference(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-03-01-preview', 'full').identity.principalId, parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAIUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('024: OpenAICognitiveServicesUSer to USER with OID  {0} for : {1} to list API keys', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('openAIName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI User:Read access to view files, models, deployments. The ability to create completion and embedding calls."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAISP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('openAIName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('openAIName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIUserRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('openAIName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentSearchIndexDataContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('openAIServicePrincipal')), '')]"
            },
            "roleAssignmentSearchServiceContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('openAIServicePrincipal')), '')]"
            },
            "roleAssignmentStorageBlobDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('openAIServicePrincipal'))]"
            }
          }
        }
      },
      "dependsOn": [
        "aiSearchService",
        "csAzureOpenAI",
        "kv1",
        "openaiREF",
        "rbacReadUsersToCmnVnetBastion",
        "sa4AIsearch",
        "sacc",
        "spAndMI2Array"
      ]
    },
    "rbacModuleAIServices": {
      "condition": "[and(not(variables('resourceExists').aiServices), parameters('enableAIServices'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac4AIServices{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "aiServicesPrincipalId": "[if(parameters('enableAIServices'), if(variables('resourceExists').aiServices, createObject('value', reference('aiServicesREF', '2024-10-01', 'full').identity.principalId), createObject('value', reference('aiServices').outputs.aiServicesPrincipalId.value)), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2090004415983565691"
            }
          },
          "parameters": {
            "aiServicesPrincipalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "cognitiveServicesCustomVisionContributorRoleId": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
            "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "description": "010"
              }
            },
            {
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "description": "012"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]",
              "properties": {
                "principalId": "[parameters('aiServicesPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "description": "019a"
              }
            }
          ],
          "outputs": {
            "roleAssignmentSearchIndexDataContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('aiServicesPrincipalId')), '')]"
            },
            "roleAssignmentSearchServiceContributorGUID": {
              "type": "string",
              "value": "[if(not(empty(parameters('aiSearchName'))), guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('aiServicesPrincipalId')), '')]"
            },
            "roleAssignmentStorageBlobDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID1": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            },
            "roleAssignmentStorageFileDataContributorGUID2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('aiServicesPrincipalId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "aiSearchService",
        "aiServices",
        "aiServicesREF",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "rbacModuleAISearch": {
      "condition": "[and(not(variables('resourceExists').aiSearch), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac5Search{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiServicesName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]",
          "aiSearchMIObjectId": "[if(parameters('enableAISearch'), if(variables('resourceExists').aiSearch, createObject('value', reference('aiSearchREF', '2024-03-01-preview', 'full').identity.principalId), createObject('value', reference('aiSearchService').outputs.principalId.value)), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "6954951461031366830"
            }
          },
          "parameters": {
            "aiSearchMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "aiServicesName": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "description": "018"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSearchMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSearchMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentCognitiveServicesOpenAIContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorGUID": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            },
            "roleAssignmentCognitiveServicesOpenAIContributorGUID": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('aiSearchMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "aiSearchREF",
        "aiSearchService",
        "aiServices",
        "sa4AIsearch",
        "sacc"
      ]
    },
    "rbacAihubRbacAmlRG": {
      "condition": "[and(and(not(variables('resourceExists').aiHub), not(empty(parameters('azureMachineLearningObjectId')))), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac6Aml2RG{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureMachineLearningObjectId": {
            "value": "[parameters('azureMachineLearningObjectId')]"
          },
          "aiHubName": {
            "value": "[variables('aiHubName')]"
          },
          "aiHubPrincipalId": "[if(and(not(variables('resourceExists').aiHub), parameters('enableAIFoundryHub')), createObject('value', reference('aiHub').outputs.principalId.value), createObject('value', reference('aiHubREF', '2024-10-01-preview', 'full').identity.principalId))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "16042463666382824884"
            }
          },
          "parameters": {
            "azureMachineLearningObjectId": {
              "type": "string"
            },
            "aiHubName": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "aml_appId": "0736f41a-0425-4b46-bdb5-1563eff02385",
            "contributorRole": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('contributorRole'), parameters('azureMachineLearningObjectId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRole'))]",
                "principalId": "[parameters('azureMachineLearningObjectId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('Contributor on RG for AML SP on RG: {0}', resourceGroup().id)]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: AzureML OID for Contributor"
              }
            },
            {
              "condition": "[not(empty(parameters('aiHubName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(resourceGroup().id, variables('contributorRoleId'), parameters('aiHubPrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('aiHubPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('contributorRoleId role to AI Hub for : {0}', parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "AI Hub: azureAIAdministrator:"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiHub",
        "aiHubREF"
      ]
    },
    "rbacModuleUsers": {
      "condition": "[and(not(variables('resourceExists').aiHub), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac7UsersAIHub{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiServicesName": "[if(variables('resourceExists').aiServices, createObject('value', variables('aiServicesName')), if(parameters('enableAIServices'), createObject('value', reference('aiServices').outputs.name.value), createObject('value', '')))]",
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "resourceGroupId": {
            "value": "[reference('projectResourceGroup').outputs.rgId.value]"
          },
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "aiHubName": {
            "value": "[variables('aiHubName')]"
          },
          "aiHubProjectName": "[if(and(parameters('enableAIFoundryHub'), not(variables('resourceExists').aiHubProject)), createObject('value', reference('aiHub').outputs.aiProjectName.value), createObject('value', variables('aifProjectName')))]",
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "disableContributorAccessForUsers": {
            "value": "[parameters('disableContributorAccessForUsers')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "5100998829289083952"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "resourceGroupId": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "aiServicesName": {
              "type": "string"
            },
            "aiHubName": {
              "type": "string"
            },
            "aiHubProjectName": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "disableContributorAccessForUsers": {
              "type": "bool",
              "defaultValue": false
            },
            "idempotency": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "roleBasedAccessControlAdministratorRG": "f58310d9-a9f6-439a-9e8d-f62e7b41a168",
            "aiUserRoleId": "53ca6127-db72-4b80-b1b0-d745d6d5456d",
            "azureMLDataScientistRoleId": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
            "azureAIDeveloperRoleId": "64702f94-c441-49e6-a78b-ef80e0188fee",
            "azureAIInferenceDeploymentOperatorRoleId": "3afb7f49-54cb-416e-8c09-6dc049efa503",
            "azureAIAdministrator": "b78c5d69-af96-48a3-bf8d-a8b4d589de94",
            "azureMachineLearningWorkspaceConnectionSecretsReaderRoleId": "ea01e6af-a1c1-4350-9563-ad00f8c72ec5",
            "azureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
            "cognitiveServicesCustomVisionContributorRoleId": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesOpenAIUserRoleId": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd",
            "cognitiveServicesOpenAIContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "cognitiveServicesContributorRoleId": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
            "cognitiveServicesUsagesReaderId": "bba48692-92b0-4667-a9ad-c31c7b334ac2",
            "cognitiveServicesUserRoleId": "a97b65f3-24c7-4388-baec-2e87135dc908"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('azureAIDeveloperRoleId'), resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), '2024-10-01-preview', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "description": "[format('Azure AI Developer On AIServices From AIProject MI OID of: {0} to {1}', parameters('aiHubProjectName'), parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderU",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesUsagesReaderId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesUsagesReaderId role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services Usage Reader for users. Only Access quota (Minimal permission to view Cognitive Services usages)"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesUsagesReaderSPU",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesUsagesReaderId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUsagesReaderId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUsagesReader role to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorUsersU",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: OpenAIContributorRole to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI Contributor for users. Full access including the ability to fine-tune, deploy and generate text"
              }
            },
            {
              "copy": {
                "name": "cognitiveServicesOpenAIContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAIUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('024: OpenAICognitiveServicesUSer to USER with OID  {0} for : {1} to list API keys', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "Users to Azure AI Services: Cognitive Services OpenAI User:Read access to view files, models, deployments. The ability to create completion and embedding calls."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentCognitiveServicesOpenAISP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesOpenAIUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesOpenAIUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesOpenAIUserRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027a: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 1: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028a: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName'))]"
              },
              "metadata": {
                "description": "Azure Storage 1: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName'))]"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole2",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('027b: StorageBlobDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName2'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure Storage 2: StorageBlobDataContributor for users. Grants read/write/delete permissions to Blob storage resources"
              }
            },
            {
              "copy": {
                "name": "userStorageBlobDataContributorRole2SP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName2'))]"
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor2",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('028b: FileDataPrivilegedContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('storageAccountName2'))]"
              },
              "metadata": {
                "description": "Azure Storage 2: FileDataPrivilegedContributor. Allows for read, write, delete, and modify ACLs on files/directories in Azure file shares by overriding existing ACLs/NTFS permissions. This role has no built-in equivalent on Windows file servers."
              }
            },
            {
              "copy": {
                "name": "roleAssignmentStorageUserFileDataPrivilegedContributor2SP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageFileDataContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('storageAccountName2'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('043 AzureAIDeveloper role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": ""
              }
            },
            {
              "copy": {
                "name": "azureAIDeveloperRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignment",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIAdministrator'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 azureAIAdministrator role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubProjectName'))]"
              },
              "metadata": {
                "description": "AI Project: azureAIAdministrator:"
              }
            },
            {
              "copy": {
                "name": "azureAIAdministratorAssignmentSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIAdministrator'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIAdministrator'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIAdministrator to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubProjectName'))]"
              }
            },
            {
              "copy": {
                "name": "aiDevOnAIProject",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIDeveloperRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('azureAIDeveloperRoleId role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubProjectName'))]"
              },
              "metadata": {
                "description": "AI Project: Azure AI Developer:"
              }
            },
            {
              "copy": {
                "name": "aiDevOnAIProjectSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('aiHubProjectName'))]",
              "name": "[guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('aiHubProjectName')), variables('azureAIDeveloperRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIDeveloperRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIDeveloperRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubProjectName'))]"
              }
            },
            {
              "copy": {
                "name": "cogServiceContribOnAIProjectUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('cognitiveServicesContributorRoleId role to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "AI Services: Azure Cognitive services contributor"
              }
            },
            {
              "copy": {
                "name": "cogServiceContribOnAIProjectSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('aiServicesName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('aiServicesName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiServicesName'))]"
              },
              "metadata": {
                "description": "AI Services: Azure Cognitive services contributor"
              }
            },
            {
              "copy": {
                "name": "aiUserUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Azure AI User role to USER with OID  {0} for RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "aiUserSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('aiUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('aiUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Azure AI User to project service principal OID:{0} to RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]"
              }
            },
            {
              "copy": {
                "name": "cogServicesUser",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('cognitiveServicesUserRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUserRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 cognitiveServicesUserRoleId role to USER with OID  {0} for RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "cogServicesUserSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('cognitiveServicesUserRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesUserRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesUserRoleId to project service principal OID:{0} to RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]"
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('044 AzureAIInferenceDeploymentOperator role to USER with OID  {0} for {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Project: AzureAIInferenceDeploymentOperator:Can perform all actions required to create a resource deployment within a resource group. "
              }
            },
            {
              "copy": {
                "name": "azureAIInferenceDeploymentOperatorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureAIInferenceDeploymentOperatorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureAIInferenceDeploymentOperatorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureAIInferenceDeploymentOperatorRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMLDataScientistRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('041 AzureMLDataScientist role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: Azure ML Data scientist: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "azureMLDataScientistRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMLDataScientistRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMLDataScientistRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMLDataScientistRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReader",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('042 AzureMachineLearningWorkspaceConnectionSecretsReader role to USER with OID  {0} for : {1} on RG level', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiHubName'))]"
              },
              "metadata": {
                "description": "RG:AI Hub, AI Project: AzureMachineLearningWorkspaceConnectionSecretsReader: Can perform all actions within an AML workspace, except for creating or deleting compute resources and modifying the workspace itself."
              }
            },
            {
              "copy": {
                "name": "amlWorkspaceConnectionSecretsReaderSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('azureMachineLearningWorkspaceConnectionSecretsReaderRoleId to project service principal OID:{0} to {1} on RG level', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiHubName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(parameters('disableContributorAccessForUsers'))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('contributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('029: CONTRIBUTOR on RG to USER with OID  {0} for {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: CONTRIBUTOR for users."
              }
            },
            {
              "copy": {
                "name": "contributorRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('contributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('contributorRoleId to project service principal OID:{0} for {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            },
            {
              "copy": {
                "name": "roleBasedAccessControlAdminRGRole",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('roleBasedAccessControlAdministratorRG'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleBasedAccessControlAdministratorRG'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: RoleBasedAccessControlAdministrator on RG to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: RoleBasedAccessControlAdministrator for users."
              }
            },
            {
              "copy": {
                "name": "roleBasedAccessControlAdminRGRoleSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('roleBasedAccessControlAdministratorRG'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleBasedAccessControlAdministratorRG'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('roleBasedAccessControlAdministrator to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            },
            {
              "copy": {
                "name": "acrPush",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('acrPushRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: acrPush role on RG to USER with OID  {0} for RG: {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('resourceGroupId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: acrPushRoleId for users."
              }
            },
            {
              "copy": {
                "name": "acrPushSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('resourceGroupId'), variables('acrPushRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('acrPush role to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('resourceGroupId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiHub",
        "aiServices",
        "csAzureOpenAI",
        "kv1",
        "projectResourceGroup",
        "sa4AIsearch",
        "sacc",
        "spAndMI2Array"
      ]
    },
    "rbacModuleUsersToSearch": {
      "condition": "[and(not(variables('resourceExists').aiSearch), parameters('enableAISearch'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac7Users2AISearch{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": "[if(variables('resourceExists').aiSearch, createObject('value', variables('safeNameAISearch')), if(parameters('enableAISearch'), createObject('value', reference('aiSearchService').outputs.aiSearchName.value), createObject('value', '')))]",
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "17996995908680566119"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "searchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
            "searchIndexDataContributorRoleId": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
            "searchServiceContributorRoleId": "7ca78c08-252a-4471-8644-bb5ff32d4ba0"
          },
          "resources": [
            {
              "copy": {
                "name": "searchIndexDataContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('020: SearchIndexUserDataContributor to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: SearchIndexDataContributor for users. \tGrants full access to Azure Cognitive Search index data"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataReaderAssign",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataReader'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataReader'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('021: searchIndexDataReader to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchIndexDataContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchIndexDataContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchIndexDataContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            },
            {
              "copy": {
                "name": "searchServiceContributor",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('022: CONTRIBUTOR to USER with OID  {0} for : {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('aiSearchName'))]"
              },
              "metadata": {
                "description": "Role Assignment for Azure AI Search: Search Service Contributor for users. Lets you manage Search services, but not access to them."
              }
            },
            {
              "copy": {
                "name": "searchServiceContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "condition": "[not(empty(parameters('aiSearchName')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')), variables('searchServiceContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('searchServiceContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('searchServiceContributorRoleId to project service principal OID:{0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('aiSearchName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "aiSearchService",
        "kv1",
        "spAndMI2Array"
      ]
    },
    "rbacVision": {
      "condition": "[equals(parameters('serviceSettingDeployAzureAIVision'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac8Vision{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiVisionMIObjectId": {
            "value": "[reference('csVision').outputs.principalId.value]"
          },
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "visonServiceName": {
            "value": "[reference('csVision').outputs.name.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "3746189495030053250"
            }
          },
          "parameters": {
            "aiVisionMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "visonServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiVisionMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiVisionMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            },
            {
              "copy": {
                "name": "visionServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('visonServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('visonServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: CognitiveServicesUser to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('visonServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('visonServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('visonServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('visonServiceName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiVisionMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorName2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiVisionMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "csVision",
        "kv1",
        "sa4AIsearch",
        "sacc",
        "spAndMI2Array"
      ]
    },
    "rbacSpeech": {
      "condition": "[equals(parameters('serviceSettingDeployAzureSpeech'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac9Speech{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "aiSpeechMIObjectId": {
            "value": "[reference('csSpeech').outputs.principalId.value]"
          },
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "speechServiceName": {
            "value": "[reference('csSpeech').outputs.name.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4272164495390143512"
            }
          },
          "parameters": {
            "aiSpeechMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "speechServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiSpeechMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiSpeechMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "copy": {
                "name": "speechServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('speechServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: CognitiveServicesUser to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('speechServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('speechServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('speechServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('speechServiceName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "csSpeech",
        "kv1",
        "sa4AIsearch",
        "sacc",
        "spAndMI2Array"
      ]
    },
    "rbacDocs": {
      "condition": "[equals(parameters('serviceSettingDeployAIDocIntelligence'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac10Docs{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('targetResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": "[if(variables('resourceExists').storageAccount1001, createObject('value', variables('storageAccount1001Name')), createObject('value', reference('sacc').outputs.storageAccountName.value))]",
          "storageAccountName2": "[if(variables('resourceExists').storageAccount2001, createObject('value', variables('storageAccount2001Name')), createObject('value', reference('sa4AIsearch').outputs.storageAccountName.value))]",
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "aiDocsIntelMIObjectId": {
            "value": "[reference('csDocIntelligence').outputs.principalId.value]"
          },
          "docsServiceName": {
            "value": "[reference('csDocIntelligence').outputs.name.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "2371144325820084205"
            }
          },
          "parameters": {
            "aiDocsIntelMIObjectId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountName2": {
              "type": "string"
            },
            "docsServiceName": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
            "storageFileDataPrivilegedContributorRoleId": "69566ab7-960f-475b-8e7c-b3118f30c6bd",
            "cognitiveServicesContributorRoleId": "a001fd3d-188f-4b5d-821b-7da978bf7442",
            "storageBlobDataOwnerRoleId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "description": "013"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleId'))]",
                "description": "014"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019b"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName2'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageFileDataPrivilegedContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]",
              "properties": {
                "principalId": "[parameters('aiDocsIntelMIObjectId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageFileDataPrivilegedContributorRoleId'))]",
                "description": "019a"
              }
            },
            {
              "copy": {
                "name": "docsServiceOpenAICotributorUsers",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('docsServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('docsServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('023: cognitiveServicesContributor role to USER with OID  {0} for : {1} to call data on data plane', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('docsServiceName'))]"
              }
            },
            {
              "copy": {
                "name": "searchIndexDataContributorSP",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('docsServiceName'))]",
              "name": "[guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('docsServiceName')), variables('cognitiveServicesContributorRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('cognitiveServicesContributorRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('cognitiveServicesContributorRoleId to project service principal OID: {0} to {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('docsServiceName'))]"
              }
            }
          ],
          "outputs": {
            "roleAssignmentStorageBlobDataContributorName": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), variables('storageBlobDataContributorRoleId'), parameters('aiDocsIntelMIObjectId'))]"
            },
            "roleAssignmentStorageBlobDataContributorName2": {
              "type": "string",
              "value": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName2')), variables('storageBlobDataOwnerRoleId'), parameters('aiDocsIntelMIObjectId'))]"
            }
          }
        }
      },
      "dependsOn": [
        "csDocIntelligence",
        "kv1",
        "sa4AIsearch",
        "sacc",
        "spAndMI2Array"
      ]
    },
    "rbacReadUsersToCmnVnetBastion": {
      "condition": "[and(parameters('addBastionHost'), empty(parameters('bastionSubscription')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac12GenAIRUsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('vnetResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "vNetName": {
            "value": "[variables('vnetNameFull')]"
          },
          "common_bastion_subnet_name": {
            "value": "AzureBastionSubnet"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12912332237226903380"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the datafactory resource"
              }
            },
            "common_bastion_subnet_name": {
              "type": "string"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "networkContributorUserVnet",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Network Contributor to USER with OID  {0} for vNet: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "networkContributorSPVnet",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContribSP-{1}-{2}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Network Contributor to SERVICE PRINCIPLE with OID  {0} for vNet: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorUserBastionNSG",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}', parameters('common_bastion_subnet_name')))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER with OID  {0} for Bastion NSG: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "rbacModuleUsers",
        "spAndMI2Array"
      ]
    },
    "rbacReadUsersToCmnVnetBastionExt": {
      "condition": "[and(parameters('addBastionHost'), not(empty(parameters('bastionSubscription'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac13UsersVnet{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[parameters('bastionSubscription')]",
      "resourceGroup": "[parameters('bastionResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "user_object_ids": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "vNetName": {
            "value": "[parameters('vnetNameFullBastion')]"
          },
          "common_bastion_subnet_name": {
            "value": "AzureBastionSubnet"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "12912332237226903380"
            }
          },
          "parameters": {
            "vNetName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name the datafactory resource"
              }
            },
            "common_bastion_subnet_name": {
              "type": "string"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "user_object_ids": {
              "type": "array",
              "metadata": {
                "description": "Additional optional Object ID of more people to access Resource group"
              }
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "copy": {
                "name": "networkContributorUserVnet",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Network Contributor to USER with OID  {0} for vNet: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "networkContributorSPVnet",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('vNetName'))]",
              "name": "[guid(format('{0}-nwContribSP-{1}-{2}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('Network Contributor to SERVICE PRINCIPLE with OID  {0} for vNet: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('vNetName'))]"
              }
            },
            {
              "copy": {
                "name": "contributorUserBastionNSG",
                "count": "[length(range(0, length(parameters('user_object_ids'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}', parameters('common_bastion_subnet_name')))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('Contributor to USER with OID  {0} for Bastion NSG: {1}', parameters('user_object_ids')[range(0, length(parameters('user_object_ids')))[copyIndex()]], parameters('common_bastion_subnet_name'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "rbacModuleUsers",
        "spAndMI2Array"
      ]
    },
    "cmnRbacACR": {
      "condition": "[parameters('useCommonACR')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac14UsersToCmnACR{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "commonRGId": {
            "value": "[resourceId(variables('subscriptionIdDevTestProd'), 'Microsoft.Resources/resourceGroups', variables('commonResourceGroup'))]"
          },
          "servicePrincipleAndMIArray": {
            "value": "[reference('spAndMI2Array').outputs.spAndMiArray.value]"
          },
          "userObjectIds": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "10636290043371289123"
            }
          },
          "parameters": {
            "commonRGId": {
              "type": "string"
            },
            "userObjectIds": {
              "type": "array"
            },
            "servicePrincipleAndMIArray": {
              "type": "array"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "acrPushRoleId": "8311e382-0749-4cb8-b61a-304f252e45ec",
            "acrPullRoleId": "7f951dda-4ed3-4680-a7ca-43fe172d538d"
          },
          "resources": [
            {
              "copy": {
                "name": "acrPushCmn",
                "count": "[length(range(0, length(parameters('userObjectIds'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('commonRGId'), variables('acrPushRoleId'), parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('030: acrPush role on RG to USER with OID  {0} for RG: {1}', parameters('userObjectIds')[range(0, length(parameters('userObjectIds')))[copyIndex()]], parameters('commonRGId'))]"
              },
              "metadata": {
                "description": "Role Assignment for ResoureGroup: acrPushRoleId for users."
              }
            },
            {
              "copy": {
                "name": "acrPushSPCmn",
                "count": "[length(range(0, length(parameters('servicePrincipleAndMIArray'))))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('commonRGId'), variables('acrPushRoleId'), parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]])]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('acrPushRoleId'))]",
                "principalId": "[parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]]]",
                "principalType": "ServicePrincipal",
                "description": "[format('acrPush role to project service principal OID:{0} for RG: {1}', parameters('servicePrincipleAndMIArray')[range(0, length(parameters('servicePrincipleAndMIArray')))[copyIndex()]], parameters('commonRGId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "rbacModuleUsers",
        "spAndMI2Array"
      ]
    },
    "rbacLakeFirstTime": {
      "condition": "[and(not(variables('resourceExists').aiHub), parameters('enableAIFoundryHub'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacLake4PrjFoundry{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlPrincipalId": {
            "value": ""
          },
          "aiHubPrincipleId": "[if(and(not(variables('resourceExists').aiHub), parameters('enableAIFoundryHub')), createObject('value', reference('aiHub').outputs.principalId.value), createObject('value', reference('aiHubREF', '2024-10-01-preview', 'full').identity.principalId))]",
          "projectTeamGroupOrUser": {
            "value": "[variables('p011_genai_team_lead_array')]"
          },
          "adfPrincipalId": {
            "value": ""
          },
          "datalakeName": {
            "value": "[variables('datalakeName')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4566676250626908128"
            }
          },
          "parameters": {
            "amlPrincipalId": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipleId": {
              "type": "string",
              "defaultValue": ""
            },
            "projectTeamGroupOrUser": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "adfPrincipalId": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "datalakeName": {
              "type": "string"
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": {
            "datalakeFromCommon": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('datalakeName')]"
            },
            "readerAML": {
              "condition": "[not(empty(parameters('amlPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('readerRoleDefinitionId'), parameters('amlPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('amlPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to AML Managed Identity: {0} for Azure ML Studio to get access to datalake: {1}', parameters('amlPrincipalId'), parameters('datalakeName'))]"
              }
            },
            "lakeAIFoundry": {
              "condition": "[not(empty(parameters('aiHubPrincipleId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', variables('storageBlobDataContributor'), parameters('aiHubPrincipleId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('aiHubPrincipleId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributor to Managed Identity: {0} for Azure AI Foundry to get access to datalake: {1}', parameters('aiHubPrincipleId'), parameters('datalakeName'))]"
              }
            },
            "readerUserGroup": {
              "copy": {
                "name": "readerUserGroup",
                "count": "[length(range(0, length(parameters('projectTeamGroupOrUser'))))]"
              },
              "condition": "[greater(length(parameters('projectTeamGroupOrUser')), 0)]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], variables('readerRoleDefinitionId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('READER to USER or Group with OID  {0} for lake: {1}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], parameters('datalakeName'))]"
              }
            },
            "storageBlobDataContributorADF": {
              "condition": "[not(empty(parameters('adfPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('storageBlobDataContributor'), parameters('adfPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('adfPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to ADF Managed Identity: {0} for Azure Datafactory to get accesst to datalake: {1}', parameters('adfPrincipalId'), parameters('datalakeName'))]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "aiHub",
        "aiHubREF",
        "amlv2",
        "esmlCommonLake"
      ]
    },
    "rbacLakeAml": {
      "condition": "[and(not(variables('resourceExists').aml), parameters('enableAzureMachineLearning'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbacLake4Amlv2{0}', variables('deploymentProjSpecificUniqueSuffix'))]",
      "subscriptionId": "[variables('subscriptionIdDevTestProd')]",
      "resourceGroup": "[variables('commonResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "amlPrincipalId": "[if(and(not(variables('resourceExists').aml), parameters('enableAzureMachineLearning')), createObject('value', reference('amlv2').outputs.principalId.value), if(and(parameters('enableAzureMachineLearning'), variables('resourceExists').aml), createObject('value', reference('amlREF', '2024-10-01-preview', 'full').identity.principalId), createObject('value', '')))]",
          "aiHubPrincipleId": {
            "value": ""
          },
          "projectTeamGroupOrUser": {
            "value": []
          },
          "adfPrincipalId": {
            "value": ""
          },
          "datalakeName": {
            "value": "[variables('datalakeName')]"
          },
          "useAdGroups": {
            "value": "[parameters('useAdGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.37.4.10188",
              "templateHash": "4566676250626908128"
            }
          },
          "parameters": {
            "amlPrincipalId": {
              "type": "string",
              "defaultValue": ""
            },
            "aiHubPrincipleId": {
              "type": "string",
              "defaultValue": ""
            },
            "projectTeamGroupOrUser": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": []
            },
            "adfPrincipalId": {
              "type": "string"
            },
            "useAdGroups": {
              "type": "bool",
              "defaultValue": false
            },
            "datalakeName": {
              "type": "string"
            }
          },
          "variables": {
            "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
            "storageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": {
            "datalakeFromCommon": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[parameters('datalakeName')]"
            },
            "readerAML": {
              "condition": "[not(empty(parameters('amlPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('readerRoleDefinitionId'), parameters('amlPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('amlPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to AML Managed Identity: {0} for Azure ML Studio to get access to datalake: {1}', parameters('amlPrincipalId'), parameters('datalakeName'))]"
              }
            },
            "lakeAIFoundry": {
              "condition": "[not(empty(parameters('aiHubPrincipleId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-contributor-{1}-{2}', variables('storageBlobDataContributor'), parameters('aiHubPrincipleId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('aiHubPrincipleId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('storageBlobDataContributor to Managed Identity: {0} for Azure AI Foundry to get access to datalake: {1}', parameters('aiHubPrincipleId'), parameters('datalakeName'))]"
              }
            },
            "readerUserGroup": {
              "copy": {
                "name": "readerUserGroup",
                "count": "[length(range(0, length(parameters('projectTeamGroupOrUser'))))]"
              },
              "condition": "[greater(length(parameters('projectTeamGroupOrUser')), 0)]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], variables('readerRoleDefinitionId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
                "principalId": "[parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]]]",
                "principalType": "[if(parameters('useAdGroups'), 'Group', 'User')]",
                "description": "[format('READER to USER or Group with OID  {0} for lake: {1}', parameters('projectTeamGroupOrUser')[range(0, length(parameters('projectTeamGroupOrUser')))[copyIndex()]], parameters('datalakeName'))]"
              }
            },
            "storageBlobDataContributorADF": {
              "condition": "[not(empty(parameters('adfPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('datalakeName'))]",
              "name": "[guid(format('{0}-reader-{1}-{2}', variables('storageBlobDataContributor'), parameters('adfPrincipalId'), resourceGroup().id))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributor'))]",
                "principalId": "[parameters('adfPrincipalId')]",
                "principalType": "ServicePrincipal",
                "description": "[format('READER to ADF Managed Identity: {0} for Azure Datafactory to get accesst to datalake: {1}', parameters('adfPrincipalId'), parameters('datalakeName'))]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "amlREF",
        "amlv2",
        "esmlCommonLake"
      ]
    }
  },
  "outputs": {
    "privateLinksDnsZones": {
      "type": "object",
      "value": "[variables('privateLinksDnsZones')]"
    },
    "debug_vnetId": {
      "type": "string",
      "value": "[variables('vnetId')]"
    },
    "debug_common_subnet_name_local": {
      "type": "string",
      "value": "[variables('common_subnet_name_local')]"
    },
    "debug_genaiSubnetId": {
      "type": "string",
      "value": "[parameters('genaiSubnetId')]"
    },
    "debug_genaiSubnetName": {
      "type": "string",
      "value": "[variables('genaiSubnetName')]"
    },
    "debug_defaultSubnet": {
      "type": "string",
      "value": "[variables('defaultSubnet')]"
    },
    "debug_aksSubnetId": {
      "type": "string",
      "value": "[parameters('aksSubnetId')]"
    },
    "debug_aksSubnetName": {
      "type": "string",
      "value": "[variables('aksSubnetName')]"
    }
  }
}