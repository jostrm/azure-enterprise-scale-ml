parameters:
  - name: serviceConnection
    type: string
  - name: serviceConnectionSeeding
    type: string

steps:
- task: PowerShell@2
  displayName: '00_check_for_submodule'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "=== MANUAL SUBMODULE INITIALIZATION ==="
      Write-Host "Current directory: $(Get-Location)"
      Write-Host "Working directory: $(System.DefaultWorkingDirectory)"
      
      # Change to the repository root
      Set-Location "$(System.DefaultWorkingDirectory)"
      Write-Host "Changed to: $(Get-Location)"
      
      # Check if .gitmodules exists
      if (Test-Path ".gitmodules") {
        Write-Host "✅ .gitmodules file found"
        Write-Host "Contents of .gitmodules:"
        Get-Content ".gitmodules"
        
        # Initialize and update submodules manually
        Write-Host "Running: git submodule init"
        git submodule init
        
        Write-Host "Running: git submodule update --recursive"
        git submodule update --recursive
        
        Write-Host "Submodule branch information:"
        cd azure-enterprise-scale-ml
        $currentBranch = git branch --show-current
        if ($currentBranch) {
          Write-Host "✅ Current branch: $currentBranch"
        } else {
          Write-Host "✅ Detached HEAD - checking commit info:"
          $commitInfo = git log --oneline -1
          Write-Host "   Current commit: $commitInfo"
        }
        
        Write-Host "Available branches:"
        git branch -a | ForEach-Object { 
          $branch = $_.Trim()
          if ($branch -match "remotes/origin/(main|release/.*)") {
            Write-Host "   $branch"
          }
        }
        cd ..
      } else {
        Write-Host "❌ .gitmodules file NOT found"
      }
      
      Write-Host "Final directory contents:"
      Get-ChildItem | Format-Table Name, IsDirectory
      Write-Host "=== END MANUAL SUBMODULE INIT ==="

- task: AzureCLI@2
  displayName: '00_generate_deployment_random_value'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      # Generate a random deployment ID for this entire pipeline run
      $randomValue = [System.Guid]::NewGuid().ToString("N").Substring(0, 10)
      Write-Host "Generated deployment random value: $randomValue"
      echo "##vso[task.setvariable variable=deployment_random_value]$randomValue"

- task: AzureCLI@2
  displayName: '00_pwsh_print_info'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      Write-Host "project_number_000 is: $(project_number_000)"
      Write-Host "admin_projectType is: $(admin_projectType)"
      Write-Host "dev_test_prod is: $(dev_test_prod)"
      Write-Host "service_connection is:  ${{ parameters.serviceConnection }}"
      Write-Host "dev_service_connection is: $(dev_service_connection)"
      Write-Host "deployment_random_value is: $(deployment_random_value)"
- task: AzureCLI@2
  displayName: '01_pwsh_get_IP_for_ADO_agent'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      # Get primary IP
      PRIMARY_IP=$(curl -s http://ipinfo.io/ip)
      echo "Primary IP: $PRIMARY_IP"
      echo "##vso[task.setvariable variable=admin_ip_fw]$PRIMARY_IP"
      
      # Get all possible IPs that might be used
      echo "All network interfaces:"
      ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1
      
      # Try alternative IP detection services
      ALT_IP1=$(curl -s https://api.ipify.org)
      ALT_IP2=$(curl -s https://checkip.amazonaws.com)
      
      echo "Alternative IP 1: $ALT_IP1"
      echo "Alternative IP 2: $ALT_IP2"
      
      # Set variables for all IPs
      echo "##vso[task.setvariable variable=admin_ip_fw_alt1]$ALT_IP1"
      echo "##vso[task.setvariable variable=admin_ip_fw_alt2]$ALT_IP2"

- task: AzureCLI@2
  displayName: '02_az_set_ip_to_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: | 
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     
     az keyvault update --name "$(admin_bicep_kv_fw)" --resource-group "$(admin_bicep_kv_fw_rg)" --public-network-access Enabled --default-action Deny
     echo "Waiting for network rules to propagate..."
     sleep 10
     
     az keyvault network-rule add --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
- task: AzureKeyVault@2
  displayName: '03_az_download_seeding_keyvault'
  inputs:
    azureSubscription: ${{ parameters.serviceConnectionSeeding }}
    KeyVaultName: '$(admin_bicep_kv_fw)'
- task: AzureCLI@2
  displayName: '03b_create_temp_json_files'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      # Create temporary JSON files from YAML variables with correct filenames expected by task 04
      $tempDir = "$(System.DefaultWorkingDirectory)/aifactory/parameters/"
      New-Item -ItemType Directory -Force -Path $tempDir
      
      # 10-esml-globals-1.json (bicepPar1)
      $globals1 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          aifactorySuffixRG = @{ value = "$(admin_aifactorySuffixRG)" }
          commonRGNamePrefix = @{ value = "$(admin_aifactoryPrefixRG)" }
          locationSuffix = @{ value = "$(admin_locationSuffix)" }
          location = @{ value = "$(admin_location)" }
        }
      }
      $globals1 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/10-esml-globals-1.json" -Encoding UTF8
      
      # 10-esml-globals-2-12_13_21_22.json (bicepPar2)
      $globals2 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          commonResourceSuffix = @{ value = "$(admin_commonResourceSuffix)" }
          vnetNameBase = @{ value = "$(vnetNameBase)" }
        }
      }
      $globals2 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/10-esml-globals-2-12_13_21_22.json" -Encoding UTF8
      
      # 10-esml-globals-4-13_21_22.json (bicepPar3) - Add more parameters that are commonly needed
      $globals4 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          resourceSuffix = @{ value = "$(admin_prjResourceSuffix)" }
          tenantId = @{ value = "$(tenantId)" }
        }
      }
      $globals4 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/10-esml-globals-4-13_21_22.json" -Encoding UTF8
      
      # 21-22-esml-prj-parameters.json (bicepPar4)
      $project = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          vnetResourceGroupBase = @{ value = "$(vnetResourceGroupBase)" }
        }
      }
      $project | ConvertTo-Json -Depth 5 | Out-File "$tempDir/21-22-esml-prj-parameters.json" -Encoding UTF8
      
      # 10-esml-globals-override.json (bicepPar5)
      $override = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          vnetResourceGroup_param = @{ value = "$(vnetResourceGroup_param)" }
          vnetNameFull_param = @{ value = "$(vnetNameFull_param)" }
        }
      }
      $override | ConvertTo-Json -Depth 5 | Out-File "$tempDir/10-esml-globals-override.json" -Encoding UTF8
      
      Write-Host "Parameter JSON files created successfully with correct filenames:"
      Write-Host "- 10-esml-globals-1.json"
      Write-Host "- 10-esml-globals-2-12_13_21_22.json" 
      Write-Host "- 10-esml-globals-4-13_21_22.json"
      Write-Host "- 21-22-esml-prj-parameters.json"
      Write-Host "- 10-esml-globals-override.json"
      
      # Debug: Show actual paths and verify files exist
      Write-Host "Files created in directory: $tempDir"
      Write-Host "Current working directory: $(Get-Location)"
      Write-Host "Verifying files exist:"
      Get-ChildItem -Path $tempDir -Filter "*.json" | ForEach-Object { Write-Host "  Found: $($_.FullName)" }
- task: PowerShell@2
  displayName: '04_debug_check_files_and_paths'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "=== DEBUG: Checking file paths and submodule checkout ==="
      Write-Host "Current working directory: $(Get-Location)"
      Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
      Write-Host "Contents of $(System.DefaultWorkingDirectory):"
      Get-ChildItem "$(System.DefaultWorkingDirectory)" | Format-Table Name, IsDirectory
      
      if (Test-Path "$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml") {
        Write-Host "✅ azure-enterprise-scale-ml submodule exists"
        Write-Host "Contents of azure-enterprise-scale-ml:"
        Get-ChildItem "$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml" | Format-Table Name, IsDirectory
        
        $scriptPath = "$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts"
        if (Test-Path $scriptPath) {
          Write-Host "✅ Scripts directory exists: $scriptPath"
          Write-Host "Contents of scripts directory:"
          Get-ChildItem $scriptPath | Format-Table Name
          
          $fullScriptPath = "$scriptPath/genDynamicNetworkParamFile.ps1"
          if (Test-Path $fullScriptPath) {
            Write-Host "✅ Script file exists: $fullScriptPath"
          } else {
            Write-Host "❌ Script file NOT found: $fullScriptPath"
          }
        } else {
          Write-Host "❌ Scripts directory NOT found: $scriptPath"
        }
      } else {
        Write-Host "❌ azure-enterprise-scale-ml submodule NOT found"
      }
      Write-Host "=== END DEBUG ==="

- task: AzureCLI@2
  displayName: '04_pwsh_fetch_network_parameters'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    # scriptPath: 'azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts/genDynamicNetworkParamFile.ps1'
    ScriptPath: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts/genDynamicNetworkParamFile.ps1'
    arguments: '-spObjId "$(esml-common-bicep-sp-id)" -spSecret "$(esml-common-bicep-sp-secret)" -BYO_subnets "$(BYO_subnets)" -network_env "$(network_env)" -useServicePrincipal -bicepPar1 "../../../../../aifactory/parameters/10-esml-globals-1.json" -bicepPar2 "../../../../../aifactory/parameters/10-esml-globals-2-12_13_21_22.json" -bicepPar3 "../../../../../aifactory/parameters/10-esml-globals-4-13_21_22.json" -bicepPar4 "../../../../../aifactory/parameters/21-22-esml-prj-parameters.json" -bicepPar5 "../../../../../aifactory/parameters/10-esml-globals-override.json" -filePath "../../../../../aifactory/parameters/" -env "$(dev_test_prod)" -locationSuffixADO "$(admin_locationSuffix)" -aifactorySuffixRGADO "$(admin_aifactorySuffixRG)" -projectNumber "$(project_number_000)" -subscriptionId "$(dev_test_prod_sub_id)" -commonRGNamePrefixVar "$(admin_aifactoryPrefixRG)" -projectTypeADO "$(admin_projectType)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts'
- task: AzureCLI@2
  displayName: '05_Build default image offline, to private registry (ACR) if not exists'
  condition: and(eq(variables['serviceSettingDeployContainerApps'], 'true'), ne(variables['debug_disable_05_build_acr_image'], 'true'))
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Configuration flags
      use_public_image=true  # Set to true to use public image instead of building image
      mcr_ms_hello='mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
      
      # Create registry name from variables
      registryNameOrg="acrcommon$(aifactory_salt)$(admin_locationSuffix)$(admin_commonResourceSuffix)$(dev_test_prod)"
      registryName=$(echo "${registryNameOrg}" | tr -d '-')
      echo "Registry name: $registryName"
      
      # Set registry name for cleanup task
      echo "##vso[task.setvariable variable=acr_registry_name]$registryName"

      # Configure ACR for selective network access first
      echo "Configuring ACR for selective network access"
      az acr update --name $registryName --public-network-enabled true --default-action Deny

      # Wait for network rules to propagate
      echo "Waiting for network rules to propagate..."
      sleep 15
      
      # Get current IP addresses
      echo "Getting current IP addresses right before ACR operations..."
      CURRENT_IP1=$(curl -s http://ipinfo.io/ip 2>/dev/null || echo "")
      CURRENT_IP2=$(curl -s https://api.ipify.org 2>/dev/null || echo "")
      CURRENT_IP3=$(curl -s https://checkip.amazonaws.com 2>/dev/null || echo "")
      CURRENT_IP4=$(curl -s https://icanhazip.com 2>/dev/null || echo "")
      
      echo "Current IPs detected: $CURRENT_IP1, $CURRENT_IP2, $CURRENT_IP3, $CURRENT_IP4"
      
      # Store IPs that we actually add for cleanup - using pipeline variables
      ADDED_IPS_LIST=""
      SUCCESSFULLY_ADDED_IPS=""
      
      # Helper function to add IP with duplicate check
      add_ip_to_acr() {
        local ip="$1"
        local description="$2"
        
        echo "Adding $description: $ip"
        
        # Try to add the IP and capture both output and exit code
        local result
        result=$(az acr network-rule add --name $registryName --ip-address "$ip" 2>&1)
        local exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          echo "Successfully added: $ip"
          SUCCESSFULLY_ADDED_IPS="$SUCCESSFULLY_ADDED_IPS,$ip"
          return 0
        elif echo "$result" | grep -q "duplicate"; then
          echo "IP $ip already exists in ACR rules (duplicate) - skipping"
          return 0
        else
          echo "Failed to add $ip: $result"
          return 1
        fi
      }
      
      # Add broader IP ranges for Azure DevOps agents
      echo "Adding Azure DevOps service IP ranges (more permissive approach)"
      
      PRIMARY_IP=$(curl -s http://ipinfo.io/ip 2>/dev/null)
      if [ -n "$PRIMARY_IP" ]; then
        IP_BASE_16=$(echo $PRIMARY_IP | cut -d'.' -f1-2)
        BROAD_RANGE_16="${IP_BASE_16}.0.0/16"
        add_ip_to_acr "$BROAD_RANGE_16" "very broad IP range"
        
        IP_BASE_24=$(echo $PRIMARY_IP | cut -d'.' -f1-3)
        BROAD_RANGE_24="${IP_BASE_24}.0/24"
        add_ip_to_acr "$BROAD_RANGE_24" "broad IP range"
      fi
      
      # Add common Azure DevOps IP ranges
      AZURE_DEVOPS_RANGES=(
        "13.107.6.0/24"
        "13.107.9.0/24"
        "13.107.42.0/24"
        "13.107.43.0/24"
        "104.208.0.0/16"
        "52.0.0.0/8"
        "13.0.0.0/8"
        "150.171.22.0/24"
        "150.171.23.0/24"
        "150.171.73.0/24"
        "150.171.74.0/24"
        "150.171.75.0/24"
        "150.171.76.0/24"
      )
      
      for range in "${AZURE_DEVOPS_RANGES[@]}"; do
        add_ip_to_acr "$range" "Azure DevOps IP range"
      done
      
      # Add individual detected IPs as backup (with duplicate detection)
      CURRENT_IPS=("$CURRENT_IP1" "$CURRENT_IP2" "$CURRENT_IP3" "$CURRENT_IP4")
      PROCESSED_IPS=()
      
      for current_ip in "${CURRENT_IPS[@]}"; do
        if [ -n "$current_ip" ]; then
          # Check if we've already processed this IP
          if [[ " ${PROCESSED_IPS[@]} " =~ " ${current_ip} " ]]; then
            echo "IP $current_ip already processed - skipping duplicate"
            continue
          fi
          
          add_ip_to_acr "$current_ip" "detected IP"
          PROCESSED_IPS+=("$current_ip")
        fi
      done
      
      # Store only the successfully added IPs for cleanup (remove leading comma)
      SUCCESSFULLY_ADDED_IPS=$(echo "$SUCCESSFULLY_ADDED_IPS" | sed 's/^,//')
      echo "##vso[task.setvariable variable=acr_added_ips]$SUCCESSFULLY_ADDED_IPS"
      echo "Successfully added IPs for cleanup: $SUCCESSFULLY_ADDED_IPS"
      
      # Wait for network rules to propagate
      echo "Waiting for network rules to propagate..."
      sleep 30
      
      # Now check if image already exists (after network access is configured)
      echo "Checking if image containerapps-default:latest already exists in ACR..."
      if az acr repository show --name $registryName --image containerapps-default:latest &> /dev/null; then
        echo "✅ Image containerapps-default:latest already exists in ACR. Skipping image creation but keeping IP rules for cleanup."
        # Note: We keep the SUCCESSFULLY_ADDED_IPS for cleanup, don't exit early
      else
        echo "❌ Image containerapps-default:latest does not exist. Proceeding with image creation..."
        
        # Create the image
        echo "Creating new image containerapps-default:latest..."
        
        if [ "$use_public_image" = true ]; then
          echo "Using public image: $mcr_ms_hello"
          timestamp=$(date +%Y%m%d-%H%M%S)
          
          echo "Importing public image to ACR with latest tag..."
          az acr import --name $registryName \
                        --source $mcr_ms_hello \
                        --image containerapps-default:latest \
                        --force
          
          echo "Importing public image to ACR with timestamp tag..."
          az acr import --name $registryName \
                        --source $mcr_ms_hello \
                        --image containerapps-default:$timestamp \
                        --force
          
          echo "Public image imported to ACR successfully!"
        else
          echo "Building custom image using ACR build..."
          az acr build --registry $registryName \
                       --image containerapps-default:latest \
                       --file azure-enterprise-scale-ml/environment_setup/aifactory/dockerfiles/acaDefault/Dockerfile \
                       azure-enterprise-scale-ml/environment_setup/aifactory/dockerfiles/acaDefault/
        fi
      fi

      # Verify image exists (whether it was already there or just created)
      sleep 30
      if az acr repository show --name $registryName --image containerapps-default:latest &> /dev/null; then
        echo "✅ Image verified successfully in ACR."
      else
        echo "❌ Failed to verify image in ACR"
        exit 1
      fi
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: AzureCLI@2
  displayName: '05a_Check if Private DNS Zones exist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Input parameters
      privDnsSubscription="$(dev_test_prod_sub_id)"
      privDnsResourceGroupName="$(admin_aifactoryPrefixRG)esml-common-$(admin_locationSuffix)-$(dev_test_prod)$(admin_aifactorySuffixRG)"
      location="$(admin_location)"

      # Define key-value pairs for DNS Zones
      declare -A dnsZones=(
        [zoneazurecontainerapps]="privatelink.${location}.azurecontainerapps.io"
        [zoneredis]="privatelink.redis.cache.windows.net"
        [zonepostgres]="privatelink.postgres.database.azure.com"
        [zonesql]="privatelink.database.windows.net"
        [zoneMongo]="privatelink.mongo.cosmos.azure.com"
        [zoneServicesAi]="privatelink.services.ai.azure.com"
      )

      # Helper function to check if a Private DNS Zone exists
      dns_zone_exists() {
        local subscription="$1"
        local resourceGroup="$2"
        local dnsZoneName="$3"

        # Run the az network private-dns zone show command and capture its output and exit status
        local output
        output=$(az network private-dns zone show --subscription "$subscription" --resource-group "$resourceGroup" --name "$dnsZoneName" 2>&1)
        local status=$?

        # Check if the command succeeded
        if [ $status -ne 0 ]; then
          echo "false"
        else
          echo "true"
        fi
      }

      # Check each DNS Zone
      for key in "${!dnsZones[@]}"; do
        dnsZoneName="${dnsZones[$key]}"
        exists=$(dns_zone_exists "$privDnsSubscription" "$privDnsResourceGroupName" "$dnsZoneName")
        echo "##vso[task.setvariable variable=${key}Exists]${exists}"
        echo "Checked DNS Zone: $dnsZoneName, Exists: $exists"
      done

      # Print variables for debugging
      echo "Private DNS Subscription: $privDnsSubscription"
      echo "Private DNS Resource Group: $privDnsResourceGroupName"
      echo "Location: $location"
- task: AzureCLI@2
  displayName: '05b_Check if resource exists'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Input parameters
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      # uniqueInAIFenv="$(aifactory_salt)" # not used in this script. fuzzy match is used instead.
      resourceSuffix="$(admin_prjResourceSuffix)"
      prjResourceSuffixNoDash="${resourceSuffix#-}"
      twoNumbers="${resourceSuffix:2:2}"

      # Construct resource group name
      projectNameReplaced="${projectName/prj/project}"
      targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"

      # Check if target resource group exists
      echo "Checking if resource group exists: $targetResourceGroup"
      if ! az group show --name "$targetResourceGroup" &> /dev/null; then
        echo "Resource group '$targetResourceGroup' does not exist."
        return 1
        
        # Set all resource existence variables to false
        echo "##vso[task.setvariable variable=aiHubExists]false"
        echo "##vso[task.setvariable variable=aifProjectExists]false"
        echo "##vso[task.setvariable variable=amlExists]false"
        echo "##vso[task.setvariable variable=openaiExists]false"
        echo "##vso[task.setvariable variable=aiSearchExists]false"
        echo "##vso[task.setvariable variable=dashboardInsightsExists]false"
        echo "##vso[task.setvariable variable=applicationInsightExists]false"
        echo "##vso[task.setvariable variable=aiServicesExists]false"
        echo "##vso[task.setvariable variable=bingExists]false"
        echo "##vso[task.setvariable variable=containerAppsEnvExists]false"
        echo "##vso[task.setvariable variable=containerAppAExists]false"
        echo "##vso[task.setvariable variable=containerAppWExists]false"
        echo "##vso[task.setvariable variable=cosmosDBExists]false"
        echo "##vso[task.setvariable variable=functionAppExists]false"
        echo "##vso[task.setvariable variable=webAppExists]false"
        echo "##vso[task.setvariable variable=funcAppServicePlanExists]false"
        echo "##vso[task.setvariable variable=webAppServicePlanExists]false"
        echo "##vso[task.setvariable variable=keyvaultExists]false"
        echo "##vso[task.setvariable variable=miACAExists]false"
        echo "##vso[task.setvariable variable=miPrjExists]false"
        echo "##vso[task.setvariable variable=storageAccount1001Exists]false"
        echo "##vso[task.setvariable variable=storageAccount2001Exists]false"
        echo "##vso[task.setvariable variable=aifExists]false"
        echo "##vso[task.setvariable variable=redisExists]false"
        echo "##vso[task.setvariable variable=postgreSQLExists]false"
        echo "##vso[task.setvariable variable=sqlServerExists]false"
        echo "##vso[task.setvariable variable=sqlDBExists]false"
        echo "##vso[task.setvariable variable=acrProjectExists]false"
        echo "##vso[task.setvariable variable=vmExists]false"
        
        exit 0
      fi

      echo "Resource group '$targetResourceGroup' exists. Proceeding with resource checks."

      # Helper function for fuzzy resource existence check
      resource_exists_fuzzy() {
        local rg="$1"
        local type="$2"
        local prefix="$3"
        local suffix="$4"

        # Run the az resource list command and capture its output and exit status
        local output
        output=$(az resource list --resource-group "$rg" --resource-type "$type" --query "[?starts_with(name, '$prefix') && ends_with(name, '$suffix') ]" 2>&1)
        local status=$?

        # Check if the command succeeded
        if [ $status -ne 0 ]; then
          echo "Error: Failed to list resources in resource group '$rg' with type '$type'."
          echo "Details: $output"
          return 1
        fi

        # Check if the resource exists
        if echo "$output" | grep -q "$prefix"; then
          echo "true"
        else
          echo "false"
        fi
      }

      # Helper function for exact resource existence check
      resource_exists_exact() {
        local rg="$1"
        local type="$2"
        local name="$3"
        if az resource show --resource-group "$rg" --name "$name" --resource-type "$type" &> /dev/null; then
          echo "true"
        else
          echo "false"
        fi
      }

      # ...existing code...

      # Resource name variables
      noSuffix=""
      suffixStandard="${resourceSuffix}"
      suffixStandardNoDash="${prjResourceSuffixNoDash}"
      suffixStorage1=$(echo "1${prjResourceSuffixNoDash}${envName}" | tr -d '-')
      suffixStorage2=$(echo "2${prjResourceSuffixNoDash}${envName}" | tr -d '-')
      suffixAppServicePlan="${resourceSuffix}-plan"
      suffixAcr="${prjResourceSuffixNoDash}"
      suffixKeyvault="${twoNumbers}"

      aiHubName="aif-hub-${projectNumber}-${locationSuffix}-${envName}"
      aifProjectName="aif-p-${projectNumber}-1-${locationSuffix}-${envName}"
      aiFoundryV2Name="aif2"
      
      amlName="aml-${projectName}-${locationSuffix}-${envName}"
      openaiName="aoai-${projectName}-${locationSuffix}-${envName}"
      safeNameAISearch="aisearch${projectName}${locationSuffix}${envName}"
      dashboardInsightsName="AIFactory${aifactorySuffixRG}-${projectName}-insights-${envName}"
      applicationInsightName="ain-${projectName}-${locationSuffix}-${envName}"
      aiServicesPrefix="aiservices${projectName}${locationSuffix}${envName}"
      bingName="bing-${projectName}-${locationSuffix}-${envName}"
      containerAppsEnvName="aca-env-${projectName}-${locationSuffix}-${envName}"
      containerAppAName="aca-a-${projectName}${locationSuffix}${envName}"
      containerAppWName="aca-w-${projectName}${locationSuffix}${envName}"
      cosmosDBName="cosmos-${projectName}-${locationSuffix}-${envName}"
      functionAppName="func-${projectName}-${locationSuffix}-${envName}"
      webAppName="webapp-${projectName}-${locationSuffix}-${envName}"
      funcAppServicePlanName="func-${projectName}-${locationSuffix}-${envName}"
      webbAppServicePlanName="webapp-${projectName}-${locationSuffix}-${envName}"
      keyvaultName="kv-p${projectNumber}-${locationSuffix}-${envName}"
      miACAPrefix="mi-aca-${projectName}-${locationSuffix}-${envName}"
      miPrjPrefix="mi-${projectName}-${locationSuffix}-${envName}"
      storageAccount1001Name="sa${projectName}${locationSuffix}"
      storageAccount2001Name="sa${projectName}${locationSuffix}"
      aifName="aif-hub-${projectName}-${locationSuffix}-${envName}"
      redisName="redis-${projectName}-${locationSuffix}-${envName}"
      postgreSQLName="pg-flex-${projectName}-${locationSuffix}-${envName}"
      sqlServerName="sql-${projectName}-${locationSuffix}-${envName}"
      sqlDBName="sqldb-${projectName}-${locationSuffix}-${envName}"
      acrProjectName="acr${projectName}genai${locationSuffix}"
      vmName="dsvm-${projectName}-${locationSuffix}-${envName}"

      # Check resources (fuzzy for those with randomSalt,unique, exact for others)
      echo "##vso[task.setvariable variable=aiHubExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aiHubName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aifProjectExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aifProjectName" "$suffixStandard")"
      
      # echo "##vso[task.setvariable variable=aiFoundryV2Exists]$(resource_exists_exact "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$aiFoundryV2Name")"
      # echo "##vso[task.setvariable variable=aiFoundryV2Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$aiFoundryV2Name" "$suffixStandardNoDash")"
      echo "##vso[task.setvariable variable=aiFoundryV2Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$aiFoundryV2Name" "$noSuffix")"
      
      echo "##vso[task.setvariable variable=amlExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$amlName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=openaiExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$openaiName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aiSearchExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Search/searchServices" "$safeNameAISearch" "$suffixStandardNoDash")"
      echo "##vso[task.setvariable variable=dashboardInsightsExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Insights/components" "$dashboardInsightsName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=applicationInsightExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Insights/components" "$applicationInsightName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aiServicesExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$aiServicesPrefix" "$suffixStandardNoDash")"
      echo "##vso[task.setvariable variable=bingExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$bingName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppsEnvExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/managedEnvironments" "$containerAppsEnvName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppAExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/containerApps" "$containerAppAName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppWExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/containerApps" "$containerAppWName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=cosmosDBExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.DocumentDB/databaseAccounts" "$cosmosDBName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=functionAppExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/sites" "$functionAppName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=webAppExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/sites" "$webAppName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=funcAppServicePlanExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/serverfarms" "$funcAppServicePlanName" "$suffixAppServicePlan")"
      echo "##vso[task.setvariable variable=webAppServicePlanExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/serverfarms" "$webbAppServicePlanName" "$suffixAppServicePlan")"
      echo "##vso[task.setvariable variable=keyvaultExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.KeyVault/vaults" "$keyvaultName" "$suffixKeyvault")"
      echo "##vso[task.setvariable variable=miACAExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ManagedIdentity/userAssignedIdentities" "$miACAPrefix" "$suffixStandard")"
      echo "##vso[task.setvariable variable=miPrjExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ManagedIdentity/userAssignedIdentities" "$miPrjPrefix" "$suffixStandard")"
      echo "##vso[task.setvariable variable=storageAccount1001Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Storage/storageAccounts" "$storageAccount1001Name" "$suffixStorage1")"
      echo "##vso[task.setvariable variable=storageAccount2001Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Storage/storageAccounts" "$storageAccount2001Name" "$suffixStorage2")"
      echo "##vso[task.setvariable variable=aifExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aifName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=redisExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Cache/Redis" "$redisName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=postgreSQLExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.DBforPostgreSQL/flexibleServers" "$postgreSQLName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=sqlServerExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Sql/servers" "$sqlServerName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=sqlDBExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Sql/servers/databases" "$sqlDBName" "*")"
      echo "##vso[task.setvariable variable=acrProjectExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ContainerRegistry/registries" "$acrProjectName" "$suffixAcr")"
      echo "##vso[task.setvariable variable=vmExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Compute/virtualMachines" "$vmName" "$suffixStandard")"

      # Print variables for debugging
      echo "Target Resource Group: $targetResourceGroup"
      echo "Key Vault Name: $keyvaultName"
- task: AzureCLI@2
  displayName: '05c_Validate Required Parameters'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      # List of required variables with their Azure DevOps variable references
      declare -A required_vars=(
        ["aiHubExists"]="$(aiHubExists)"
        ["aifProjectExists"]="$(aifProjectExists)"
        ["aiFoundryV2Exists"]="$(aiFoundryV2Exists)"
        ["amlExists"]="$(amlExists)"
        ["aiSearchExists"]="$(aiSearchExists)"
        ["dashboardInsightsExists"]="$(dashboardInsightsExists)"
        ["applicationInsightExists"]="$(applicationInsightExists)"
        ["aiServicesExists"]="$(aiServicesExists)"
        ["bingExists"]="$(bingExists)"
        ["containerAppsEnvExists"]="$(containerAppsEnvExists)"
        ["containerAppWExists"]="$(containerAppWExists)"
        ["cosmosDBExists"]="$(cosmosDBExists)"
        ["functionAppExists"]="$(functionAppExists)"
        ["webAppExists"]="$(webAppExists)"
        ["funcAppServicePlanExists"]="$(funcAppServicePlanExists)"
        ["webAppServicePlanExists"]="$(webAppServicePlanExists)"
        ["keyvaultExists"]="$(keyvaultExists)"
        ["miACAExists"]="$(miACAExists)"
        ["miPrjExists"]="$(miPrjExists)"
        ["storageAccount1001Exists"]="$(storageAccount1001Exists)"
        ["storageAccount2001Exists"]="$(storageAccount2001Exists)"
        ["aifExists"]="$(aifExists)"
        ["redisExists"]="$(redisExists)"
        ["postgreSQLExists"]="$(postgreSQLExists)"
        ["sqlServerExists"]="$(sqlServerExists)"
        ["sqlDBExists"]="$(sqlDBExists)"
        ["acrProjectExists"]="$(acrProjectExists)"
        ["vmExists"]="$(vmExists)"
        ["zoneazurecontainerappsExists"]="$(zoneazurecontainerappsExists)"
        ["zoneredisExists"]="$(zoneredisExists)"
        ["zonepostgresExists"]="$(zonepostgresExists)"
        ["zonesqlExists"]="$(zonesqlExists)"
        ["zoneMongoExists"]="$(zoneMongoExists)"
        ["zoneServicesAiExists"]="$(zoneServicesAiExists)"
        ["aifactory_salt_random"]="$(aifactory_salt_random)"
      )

      # Validate each variable
      for var_name in "${!required_vars[@]}"; do
        value="${required_vars[$var_name]}"
        echo "Checking variable: $var_name, Value: $value"
        if [ -z "$value" ] || [ "$value" = "\$(${var_name})" ]; then
          if [ "$var_name" = "aifactory_salt_random" ]; then
            echo "Warning: Variable $var_name is not set or empty  (It should be 10 characters), but continuing execution. aifactory_salt_random needs to be set if UPDATING an existing project - adding services. But not att init."
          else
            echo "Warning: Required variable $var_name is not set or empty."
            exit 0
          fi
        fi
      done

      echo "All required parameters are set and valid."

- task: AzureCLI@2
  displayName: '05d_Extract_and_set_aifactory_salt_random'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      az account set --subscription "$(dev_test_prod_sub_id)"
      
      # Check if miPrjExists is true
      miPrjExists="$(miPrjExists)"
      echo "miPrjExists value: $miPrjExists"
      
      if [ "$miPrjExists" = "true" ]; then
        echo "Managed Identity exists, extracting aifactory_salt_random..."
        
        # Input parameters
        commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
        projectNumber="$(project_number_000)"
        projectName="prj${projectNumber}"
        locationSuffix="$(admin_locationSuffix)"
        envName="$(dev_test_prod)"
        aifactorySuffixRG="$(admin_aifactorySuffixRG)"
        miPrjPrefix="mi-${projectName}-${locationSuffix}-${envName}"
        
        # Construct resource group name
        projectNameReplaced="${projectName/prj/project}"
        targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"
        
        echo "Looking for managed identity with prefix: $miPrjPrefix"
        echo "In resource group: $targetResourceGroup"
        
        # Find the managed identity resource
        miResourceName=$(az resource list \
          --resource-group "$targetResourceGroup" \
          --resource-type "Microsoft.ManagedIdentity/userAssignedIdentities" \
          --query "[?starts_with(name, '$miPrjPrefix')].name" \
          --output tsv)
        
        if [ -n "$miResourceName" ]; then
          echo "Found managed identity: $miResourceName"
          
          # Extract 10 characters starting from the end minus 4 characters
          # Example: mi-prj001-eus2-dev-qoygyf7d0ac126c-001 -> f7d0ac126c
          saltValue="${miResourceName: -14:10}"
          
          echo "Extracted salt value: $saltValue"
          echo "##vso[task.setvariable variable=aifactory_salt_random]$saltValue"
          
        else
          echo "Warning: Could not find managed identity resource with prefix '$miPrjPrefix'"
          echo "##vso[task.setvariable variable=aifactory_salt_random]"
        fi
        
      else
        echo "miPrjExists is false, skipping salt extraction"
        echo "##vso[task.setvariable variable=aifactory_salt_random]"
      fi

- task: AzureCLI@2
  displayName: '61-foundation'
  condition: and(ne(variables['debug_disable_61_foundation'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-61-foundation" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/01-foundation.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroupBase="$(vnetResourceGroupBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privateDnsAndVnetLinkAllGlobalLocation="false" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters miACAExists="$(miACAExists)" \
     --parameters miPrjExists="$(miPrjExists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters zoneAzurecontainerappsExists="$(zoneazurecontainerappsExists)" \
     --parameters zoneRedisExists="$(zoneredisExists)" \
     --parameters zonePostgresExists="$(zonepostgresExists)" \
     --parameters zoneSqlExists="$(zonesqlExists)" \
     --parameters zoneMongoExists="$(zoneMongoExists)" \
     --parameters zoneServicesAiExists="$(zoneServicesAiExists)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --parameters enableDebugging="true" \
     --parameters DEBUG_enableAIServices="$(enableAIServices)" \
     --parameters DEBUG_enableAIFoundryHub="$(enableAIFoundryHub)" \
     --parameters DEBUG_enableAISearch="$(enableAISearch)" \
     --parameters DEBUG_enableAzureMachineLearning="$(enableAzureMachineLearning)" \
     --parameters DEBUG_serviceSettingDeployFunction="$(serviceSettingDeployFunction)" \
     --parameters DEBUG_functionRuntime="$(functionRuntime)" \
     --parameters DEBUG_functionVersion="$(functionVersion)" \
     --parameters DEBUG_serviceSettingDeployWebApp="$(serviceSettingDeployWebApp)" \
     --parameters DEBUG_webAppRuntime="$(webAppRuntime)" \
     --parameters DEBUG_webAppRuntimeVersion="$(webAppRuntimeVersion)" \
     --parameters DEBUG_aseSku="$(aseSku)" \
     --parameters DEBUG_aseSkuCode="$(aseSkuCode)" \
     --parameters DEBUG_aseSkuWorkers="$(aseSkuWorkers)" \
     --parameters DEBUG_serviceSettingDeployContainerApps="$(serviceSettingDeployContainerApps)" \
     --parameters DEBUG_serviceSettingDeployAppInsightsDashboard="$(serviceSettingDeployAppInsightsDashboard)" \
     --parameters DEBUG_aca_a_registry_image="$(aca_a_registry_image)" \
     --parameters DEBUG_aca_w_registry_image="$(aca_w_registry_image)" \
     --parameters DEBUG_serviceSettingDeployBingSearch="$(serviceSettingDeployBingSearch)" \
     --parameters DEBUG_serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters DEBUG_serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters DEBUG_serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters DEBUG_serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters DEBUG_serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters DEBUG_disableContributorAccessForUsers="$(disableContributorAccessForUsers)" \
     --parameters DEBUG_serviceSettingDeployPostgreSQL="$(serviceSettingDeployPostgreSQL)" \
     --parameters DEBUG_serviceSettingDeployRedisCache="$(serviceSettingDeployRedisCache)" \
     --parameters DEBUG_serviceSettingDeploySQLDatabase="$(serviceSettingDeploySQLDatabase)" \
     --parameters DEBUG_BYO_subnets="$(BYO_subnets)" \
     --parameters DEBUG_network_env_dev="$(network_env_dev)" \
     --parameters DEBUG_network_env_stage="$(network_env_stage)" \
     --parameters DEBUG_network_env_prod="$(network_env_prod)" \
     --parameters DEBUG_vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters DEBUG_vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters DEBUG_commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters DEBUG_datalakeName_param="$(datalakeName_param)" \
     --parameters DEBUG_kvNameFromCOMMON_param="$(kvNameFromCOMMON_param)" \
     --parameters DEBUG_useCommonACR_override="$(useCommonACR_override)" \
     --parameters DEBUG_subnetCommon="$(subnetCommon)" \
     --parameters DEBUG_subnetCommonScoring="$(subnetCommonScoring)" \
     --parameters DEBUG_subnetCommonPowerbiGw="$(subnetCommonPowerbiGw)" \
     --parameters DEBUG_subnetProjGenAI="$(subnetProjGenAI)" \
     --parameters DEBUG_subnetProjAKS="$(subnetProjAKS)" \
     --parameters DEBUG_subnetProjACA="$(subnetProjACA)" \
     --parameters DEBUG_subnetProjDatabricksPublic="$(subnetProjDatabricksPublic)" \
     --parameters DEBUG_subnetProjDatabricksPrivate="$(subnetProjDatabricksPrivate)" \
     --parameters DEBUG_byoASEv3="$(byoASEv3)" \
     --parameters DEBUG_byoAseFullResourceId="$(byoAseFullResourceId)" \
     --parameters DEBUG_byoAseAppServicePlanResourceId="$(byoAseAppServicePlanResourceId)" \
     --parameters DEBUG_enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters DEBUG_allowPublicAccessWhenBehindVnet="$(allowPublicAccessWhenBehindVnet)" \
     --parameters DEBUG_enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters DEBUG_admin_aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters DEBUG_admin_commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters DEBUG_admin_prjResourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters DEBUG_aifactory_salt="$(aifactory_salt)" \
     --parameters DEBUG_admin_projectType="$(admin_projectType)" \
     --parameters DEBUG_project_number_000="$(project_number_000)" \
     --parameters DEBUG_project_service_principal_AppID_seeding_kv_name="$(project_service_principal_AppID_seeding_kv_name)" \
     --parameters DEBUG_project_service_principal_OID_seeding_kv_name="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters DEBUG_project_service_principal_Secret_seeding_kv_name="$(project_service_principal_Secret_seeding_kv_name)" \
     --parameters DEBUG_project_IP_whitelist="$(project_IP_whitelist)" \
     --parameters DEBUG_deployModel_gpt_4="$(deployModel_gpt_4)" \
     --parameters DEBUG_deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters DEBUG_deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters DEBUG_deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters DEBUG_deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '62-core-infrastructure'
  condition: and(ne(variables['debug_disable_62_core_infrastructure'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     # Generate admin password first
     ADMIN_PASSWORD=$(date +%s | sha256sum | base64 | head -c 32)
     echo "Generated admin password"
     
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-62-core-infrastructure" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/02-core-infrastructure.bicep" \
     --parameters adminPassword="$ADMIN_PASSWORD" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters useCommonACR="$(useCommonACR_override)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters common_subnet_name="$(common_subnet_name)" \
     --parameters subnetCommon="$(subnetCommon)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters projectServicePrincipleAppID_SeedingKeyvaultName="$(project_service_principal_AppID_seeding_kv_name)" \
     --parameters projectServicePrincipleSecret_SeedingKeyvaultName="$(project_service_principal_Secret_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters storageAccount2001Exists="$(storageAccount2001Exists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters applicationInsightExists="$(applicationInsightsExists)" \
     --parameters acrProjectExists="$(acrProjectExists)" \
     --parameters miACAExists="$(miACAExists)" \
     --parameters miPrjExists="$(miPrjExists)" \
     --parameters vmExists="$(vmExists)" \
     --parameters bingExists="$(bingExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters keyvaultSoftDeleteDays="$(admin_keyvaultSoftDeleteDays)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployBingSearch="$(serviceSettingDeployBingSearch)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters allowPublicAccessWhenBehindVnet="$(allowPublicAccessWhenBehindVnet)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --parameters acr_adminUserEnabled="$(acr_adminUserEnabled)" \
     --parameters acr_dedicated="$(acr_dedicated)" \
     --parameters containerRegistrySkuName="$(acr_SKU)" \
     --parameters serviceSettingDeployProjectVM="$(serviceSettingDeployProjectVM)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '63-cognitive-services'
  condition: and(ne(variables['debug_disable_63_cognitive_services'], 'true'), succeeded())
  retryCountOnTaskFailure: 2
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-62-cognitive-services" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/03-cognitive-services.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters openaiExists="$(openaiExists)" \
     --parameters aiSearchExists="$(aiSearchExists)" \
     --parameters aiServicesExists="$(aiServicesExists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters storageAccount2001Exists="$(storageAccount2001Exists)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters keyvaultSoftDeleteDays="$(admin_keyvaultSoftDeleteDays)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters enableAIServices="$(enableAIServices)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters aiSearchSKUName="$(admin_aiSearchTier)" \
     --parameters semanticSearchTier="$(admin_semanticSearchTier)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters serviceSettingDeployContentSafety="$(serviceSettingDeployContentSafety)" \
     --parameters serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --parameters default_gpt_capacity="$(default_gpt_capacity)" \
     --parameters default_model_sku="$(default_model_sku)" \
     --parameters modelGPTXName="$(modelGPTXName)" \
     --parameters modelGPTXVersion="$(modelGPTXVersion)" \
     --parameters modelGPTXSku="$(modelGPTXSku)" \
     --parameters modelGPTXCapacity="$(modelGPTXCapacity)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --parameters miACAExists="$(miACAExists)" \
     --parameters miPrjExists="$(miPrjExists)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '64-databases'
  condition: and(ne(variables['debug_disable_64_databases'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-64-databases" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/04-databases.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters cosmosDBExists="$(cosmosDBExists)" \
     --parameters redisExists="$(redisExists)" \
     --parameters postgreSQLExists="$(postgreSQLExists)" \
     --parameters sqlServerExists="$(sqlServerExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters cosmosKind="$(cosmosKind)" \
     --parameters serviceSettingDeployPostgreSQL="$(serviceSettingDeployPostgreSQL)" \
     --parameters serviceSettingDeployRedisCache="$(serviceSettingDeployRedisCache)" \
     --parameters serviceSettingDeploySQLDatabase="$(serviceSettingDeploySQLDatabase)" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '65-compute-services'
  condition: and(ne(variables['debug_disable_65_compute_services'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-65-compute-services" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/05-compute-services.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters useCommonACR="$(useCommonACR_override)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters containerAppsEnvExists="$(containerAppsEnvExists)" \
     --parameters containerAppAExists="$(containerAppAExists)" \
     --parameters containerAppWExists="$(containerAppWExists)" \
     --parameters functionAppExists="$(functionAppExists)" \
     --parameters bingExists="$(bingExists)" \
     --parameters webAppExists="$(webAppExists)" \
     --parameters funcAppServicePlanExists="$(funcAppServicePlanExists)" \
     --parameters webAppServicePlanExists="$(webAppServicePlanExists)" \
     --parameters applicationInsightExists="$(applicationInsightExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployContainerApps="$(serviceSettingDeployContainerApps)" \
     --parameters serviceSettingDeployFunction="$(serviceSettingDeployFunction)" \
     --parameters serviceSettingDeployWebApp="$(serviceSettingDeployWebApp)" \
     --parameters serviceSettingDeployBingSearch="$(serviceSettingDeployBingSearch)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters enableAIServices="$(enableAIServices)" \
     --parameters functionRuntime="$(functionRuntime)" \
     --parameters functionVersion="$(functionVersion)" \
     --parameters webAppRuntime="$(webAppRuntime)" \
     --parameters webAppRuntimeVersion="$(webAppRuntimeVersion)" \
     --parameters aseSku="$(aseSku)" \
     --parameters aseSkuCode="$(aseSkuCode)" \
     --parameters aseSkuWorkers="$(aseSkuWorkers)" \
     --parameters serviceSettingDeployAppInsightsDashboard="$(serviceSettingDeployAppInsightsDashboard)" \
     --parameters aca_a_registry_image="$(aca_a_registry_image)" \
     --parameters aca_w_registry_image="$(aca_w_registry_image)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --parameters aiFoundryV2Exists="$(aiFoundryV2Exists)" \
     --parameters enableAIFoundryV21="$(enableAIFoundryV21)" \
     --parameters disableAgentNetworkInjection="$(disableAgentNetworkInjection)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '66-ai-platform'
  condition: and(ne(variables['debug_disable_66_ai_platform'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-66-ai-platform" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/06-ai-platform.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters useCommonACR="$(useCommonACR_override)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters aiHubExists="$(aiHubExists)" \
     --parameters amlExists="$(amlExists)" \
     --parameters aifProjectExists="$(aifProjectExists)" \
     --parameters aksExists="$(aksExists)" \
     --parameters miPrjExists="$(miPrjExists)" \
     --parameters aiFoundryV2Exists="$(aiFoundryV2Exists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters enableAzureMachineLearning="$(enableAzureMachineLearning)" \
     --parameters enableAIFoundryHub="$(enableAIFoundryHub)" \
     --parameters enableAIFoundryV2="$(enableAIFoundryV2)" \
     --parameters AMLStudioUIPrivate="$(AMLStudioUIPrivate)" \
     --parameters serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters enableAIServices="$(enableAIServices)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters default_embedding_capacity="$(default_embedding_capacity)" \
     --parameters deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --parameters default_gpt_capacity="$(default_gpt_capacity)" \
     --parameters default_model_sku="$(default_model_sku)" \
     --parameters deployModel_gpt_4o="$(deployModel_gpt_4o)" \
     --parameters deployModel_gpt_X="$(deployModel_gpt_X)" \
     --parameters modelGPTXName="$(modelGPTXName)" \
     --parameters modelGPTXVersion="$(modelGPTXVersion)" \
     --parameters modelGPTXSku="$(modelGPTXSku)" \
     --parameters modelGPTXCapacity="$(modelGPTXCapacity)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters allowPublicAccessWhenBehindVnet="$(allowPublicAccessWhenBehindVnet)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters common_subnet_name="$(common_subnet_name)" \
     --parameters subnetCommon="$(subnetCommon)" \
     --parameters subnetCommonScoring="$(subnetCommonScoring)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '68-rbac-security'
  condition: and(ne(variables['debug_disable_68_rbac_security'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-67-rbac-security" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/08-rbac-security.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters useCommonACR="$(useCommonACR_override)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters azureMachineLearningObjectId="$(azure_machinelearning_sp_oid)" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters enableAzureMachineLearning="$(enableAzureMachineLearning)" \
     --parameters enableAIFoundryHub="$(enableAIFoundryHub)" \
     --parameters enableAIServices="$(enableAIServices)" \
     --parameters enableAIFoundryV2="$(enableAIFoundryV2)" \
     --parameters enableAIFoundryV21="$(enableAIFoundryV21)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters serviceSettingDeployFunction="$(serviceSettingDeployFunction)" \
     --parameters serviceSettingDeployWebApp="$(serviceSettingDeployWebApp)" \
     --parameters serviceSettingDeployContainerApps="$(serviceSettingDeployContainerApps)" \
     --parameters serviceSettingDeployAppInsightsDashboard="$(serviceSettingDeployAppInsightsDashboard)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters disableContributorAccessForUsers="$(disableContributorAccessForUsers)" \
     --parameters disableRBACAdminOnRGForUsers="$(disableRBACAdminOnRGForUsers)" \
     --parameters serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters serviceSettingDeployPostgreSQL="$(serviceSettingDeployPostgreSQL)" \
     --parameters serviceSettingDeployRedisCache="$(serviceSettingDeployRedisCache)" \
     --parameters serviceSettingDeploySQLDatabase="$(serviceSettingDeploySQLDatabase)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters commonLakeNamePrefixMax8chars="$(commonLakeNamePrefixMax8chars)" \
     --parameters tags='$(tags)' \
     --parameters tagsProject='$(tagsProject)' \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '69-aifoundry-2025'
  condition: and(ne(variables['debug_disable_69_aifoundry_2025'], 'true'), succeeded())
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-69-aifoundry-2025" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1/09-ai-foundry-2025.bicep" \
     --parameters "@../../../../aifactory/parameters/dynamicNetworkParams.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters enableAIFoundryV2="$(enableAIFoundryV2)" \
     --parameters enableAIFoundryV21="$(enableAIFoundryV21)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters deployModel_gpt_X="$(deployModel_gpt_X)" \
     --parameters modelGPTXName="$(modelGPTXName)" \
     --parameters modelGPTXVersion="$(modelGPTXVersion)" \
     --parameters modelGPTXSku="$(modelGPTXSku)" \
     --parameters modelGPTXCapacity="$(modelGPTXCapacity)" \
     --parameters deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters default_embedding_capacity="$(default_embedding_capacity)" \
     --parameters default_gpt_capacity="$(default_gpt_capacity)" \
     --parameters deployModel_gpt_4o="$(deployModel_gpt_4o)" \
     --parameters default_gpt_4o_version="$(default_gpt_4o_version)" \
     --parameters deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --parameters default_gpt_4o_mini_version="$(default_gpt_4o_mini_version)" \
     --parameters default_model_sku="$(default_model_sku)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters allowPublicAccessWhenBehindVnet="$(allowPublicAccessWhenBehindVnet)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env)" \
     --parameters common_subnet_name="$(common_subnet_name)" \
     --parameters subnetCommon="$(subnetCommon)" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters tagsProject='$(tagsProject)' \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters subscriptionIdDevTestProd="$(dev_test_prod_sub_id)" \
     --parameters projectPrefix="$(projectPrefix)" \
     --parameters projectSuffix="$(projectSuffix)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters disableAgentNetworkInjection="$(disableAgentNetworkInjection)" \
     --parameters enableAIFactoryCreatedDefaultProjectForAIFv2="$(enableAIFactoryCreatedDefaultProjectForAIFv2)" \
     --parameters aiFoundryV2Exists="$(aiFoundryV2Exists)" \
     --parameters containerAppsEnvExists="$(containerAppsEnvExists)" \
     --parameters updateAIFoundryV21="$(updateAIFoundryV21)" \
     --parameters enableCaphost="$(enableAFoundryCaphost)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '71_If_Error_AIFoundryHubAndProject_DeleteIt'
  condition: and(failed(), eq(variables['debugEnableCleaning'], 'true'), or(contains(variables['Agent.JobStatus'], '66-ai-platform'), eq(variables['System.StageResult'], 'Failed')))
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      echo "=== AI Foundry Hub and Project Error Cleanup ==="
      echo "This task runs only when 66-ai-platform task failed with AIFoundry Hub/Project related errors"
      
      az account set --subscription "$(dev_test_prod_sub_id)"
      
      # Input parameters - replicating the same logic from 05b_Check if resource exists
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      resourceSuffix="$(admin_prjResourceSuffix)"
      
      # Construct resource group name
      projectNameReplaced="${projectName/prj/project}"
      targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"
      
      # Resource names (same as in 05b task)
      aiHubName="aif-hub-${projectNumber}-${locationSuffix}-${envName}"
      aifProjectName="aif-p-${projectNumber}-1-${locationSuffix}-${envName}"
      
      echo "Target Resource Group: $targetResourceGroup"
      echo "AI Hub Name Pattern: $aiHubName"
      echo "AI Project Name Pattern: $aifProjectName"
      
      # Check if this is specifically an AI Platform (66-ai-platform) related error
      echo "Checking if error is related to AI Platform deployment (66-ai-platform)..."
      
      # Get the error details from recent deployments
      DEPLOYMENT_NAME_PATTERN="06-aiHubModule"
      AI_HUB_RESOURCE_PATTERN="$aiHubName"
      AIF_PROJECT_RESOURCE_PATTERN="$aifProjectName"
      
      echo "Looking for deployment errors containing: $DEPLOYMENT_NAME_PATTERN"
      echo "Looking for resource errors mentioning: $AI_HUB_RESOURCE_PATTERN or $AIF_PROJECT_RESOURCE_PATTERN"
      
      # Check recent deployment failures for AI Platform related patterns
      echo "Checking recent deployments for AI Platform (66-ai-platform) related failures..."
      recent_deployments=$(az deployment sub list \
        --subscription "$(dev_test_prod_sub_id)" \
        --query "[?starts_with(name, 'esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)') && contains(name, '66-ai-platform')].{name:name, provisioningState:properties.provisioningState, error:properties.error}" \
        --output json 2>/dev/null || echo "[]")
      
      echo "Recent AI Platform deployments: $recent_deployments"
      
      # Check if we should proceed with cleanup based on error patterns
      should_cleanup="false"
      
      if echo "$recent_deployments" | grep -qi "06-aiHubModule\|$aiHubName\|$aifProjectName"; then
        echo "Found AI Platform (66-ai-platform) related deployment errors"
        should_cleanup="true"
      fi
      
      # Alternative check: look for AI Hub/Project resources that might exist but be in error state
      ai_hub_resources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.MachineLearningServices/workspaces" \
        --query "[?starts_with(name, '$aiHubName') || starts_with(name, '$aifProjectName')].name" \
        --output tsv 2>/dev/null || echo "")
      
      if [ -n "$ai_hub_resources" ]; then
        echo "Found existing AI Hub/Project resources that may need cleanup"
        should_cleanup="true"
      fi
      
      if [ "$should_cleanup" = "true" ]; then
        echo "=== Proceeding with AI Foundry Hub and Project resource cleanup ==="
      
      # Function to delete resource and its related components with fuzzy endpoint matching
      delete_ai_resource_and_endpoints() {
        local resourceName="$1"
        local resourceType="$2"
        
        echo "=== Processing resource: $resourceName ==="
        
        # Check if the resource exists
        if az resource show --resource-group "$targetResourceGroup" --name "$resourceName" --resource-type "$resourceType" &> /dev/null; then
          echo "Found resource: $resourceName"
          
          # Delete private endpoints and NICs using fuzzy matching (since they have random salt)
          echo "Searching for private endpoints matching pattern: ${resourceName}*-pend"
          privateEndpoints=$(az network private-endpoint list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}') && contains(name, '-pend')].name" --output tsv)
          
          if [ -n "$privateEndpoints" ]; then
            while IFS= read -r pendName; do
              if [ -n "$pendName" ]; then
                echo "Deleting private endpoint: $pendName"
                az network private-endpoint delete \
                  --resource-group "$targetResourceGroup" \
                  --name "$pendName" \
                  --yes || echo "Failed to delete private endpoint $pendName"
              fi
            done <<< "$privateEndpoints"
          else
            echo "No private endpoints found for resource $resourceName"
          fi
          
          echo "Searching for NICs matching pattern: ${resourceName}*-pend-nic"
          nics=$(az network nic list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}') && contains(name, '-pend-nic')].name" --output tsv)
          
          if [ -n "$nics" ]; then
            while IFS= read -r nicName; do
              if [ -n "$nicName" ]; then
                echo "Deleting NIC: $nicName"
                az network nic delete \
                  --resource-group "$targetResourceGroup" \
                  --name "$nicName" \
                  --yes || echo "Failed to delete NIC $nicName"
              fi
            done <<< "$nics"
          else
            echo "No NICs found for resource $resourceName"
          fi
          
          # Delete the main resource
          echo "Deleting main resource: $resourceName"
          az resource delete \
            --resource-group "$targetResourceGroup" \
            --name "$resourceName" \
            --resource-type "$resourceType" \
            --yes || echo "Failed to delete resource $resourceName"
            
          echo "Cleanup completed for resource: $resourceName"
        else
          echo "Resource $resourceName not found, skipping"
        fi
      }
      
      # Look for AI Hub resources that match the pattern
      echo "=== Searching for AI Hub resources ==="
      aiHubResources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.MachineLearningServices/workspaces" \
        --query "[?starts_with(name, '$aiHubName')].name" \
        --output tsv)
      
      if [ -n "$aiHubResources" ]; then
        echo "Found AI Hub resources to clean up:"
        echo "$aiHubResources"
        while IFS= read -r hubName; do
          if [ -n "$hubName" ]; then
            delete_ai_resource_and_endpoints "$hubName" "Microsoft.MachineLearningServices/workspaces"
          fi
        done <<< "$aiHubResources"
      else
        echo "No AI Hub resources found matching pattern: $aiHubName"
      fi
      
      # Look for AI Project resources that match the pattern
      echo "=== Searching for AI Project resources ==="
      aifProjectResources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.MachineLearningServices/workspaces" \
        --query "[?starts_with(name, '$aifProjectName')].name" \
        --output tsv)
      
      if [ -n "$aifProjectResources" ]; then
        echo "Found AI Project resources to clean up:"
        echo "$aifProjectResources"
        while IFS= read -r projectName; do
          if [ -n "$projectName" ]; then
            delete_ai_resource_and_endpoints "$projectName" "Microsoft.MachineLearningServices/workspaces"
          fi
        done <<< "$aifProjectResources"
      else
        echo "No AI Project resources found matching pattern: $aifProjectName"
      fi
      
      else
        echo "No AI Platform (66-ai-platform) related errors detected. Skipping cleanup."
        echo "This cleanup only runs for errors related to:"
        echo "- Resources mentioning '$aiHubName' or '$aifProjectName'"
        echo "- Deployments containing '06-aiHubModule'"
        echo "- Task '66-ai-platform' failures"
      fi
      
      # Set variable to indicate task 71 performed deletions
      if [ "$should_cleanup" = "true" ]; then
        echo "##vso[task.setvariable variable=71_deleted]true"
        echo "Set variable 71_deleted=true for purge task"
      else
        echo "##vso[task.setvariable variable=71_deleted]false"
        echo "Set variable 71_deleted=false (no deletions performed)"
      fi
      
      echo "=== AI Foundry Hub and Project Error Cleanup Completed ==="
- task: AzureCLI@2
  displayName: '72_If_Error_AIServices_DeleteIt'
  condition: and(failed(), eq(variables['debugEnableCleaning'], 'true'), or(contains(variables['Agent.JobStatus'], '63-cognitive-services'), eq(variables['System.StageResult'], 'Failed')))
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      echo "=== AI Services Error Cleanup ==="
      echo "This task runs only when 63-cognitive-services task failed with AI Services related errors"
      
      az account set --subscription "$(dev_test_prod_sub_id)"
      
      # Input parameters - replicating the same logic from 05b_Check if resource exists
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      
      # Construct resource group name
      projectNameReplaced="${projectName/prj/project}"
      targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"
      
      # AI Services name pattern (same as in 05b task)
      aiServicesPrefix="aiservices${projectName}${locationSuffix}${envName}"
      
      echo "Target Resource Group: $targetResourceGroup"
      echo "AI Services Name Pattern: $aiServicesPrefix"
      
      # Check if this is specifically a Cognitive Services (63-cognitive-services) related error
      echo "Checking if error is related to Cognitive Services deployment (63-cognitive-services)..."
      
      # Get the error details from recent deployments
      DEPLOYMENT_NAME_PATTERN="03-AIServices"
      AI_SERVICES_RESOURCE_PATTERN="$aiServicesPrefix"
      
      echo "Looking for deployment errors containing: $DEPLOYMENT_NAME_PATTERN"
      echo "Looking for resource errors mentioning: $AI_SERVICES_RESOURCE_PATTERN"
      
      # Check recent deployment failures for Cognitive Services related patterns
      echo "Checking recent deployments for Cognitive Services (63-cognitive-services) related failures..."
      recent_deployments=$(az deployment sub list \
        --subscription "$(dev_test_prod_sub_id)" \
        --query "[?starts_with(name, 'esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)') && contains(name, '63-cognitive-services')].{name:name, provisioningState:properties.provisioningState, error:properties.error}" \
        --output json 2>/dev/null || echo "[]")
      
      echo "Recent Cognitive Services deployments: $recent_deployments"
      
      # Check if we should proceed with cleanup based on error patterns
      should_cleanup="false"
      
      if echo "$recent_deployments" | grep -qi "03-AIServices\|$aiServicesPrefix"; then
        echo "Found Cognitive Services (63-cognitive-services) related deployment errors"
        should_cleanup="true"
      fi
      
      # Alternative check: look for AI Services resources that might exist but be in error state
      ai_services_resources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.CognitiveServices/accounts" \
        --query "[?starts_with(name, '$aiServicesPrefix')].name" \
        --output tsv 2>/dev/null || echo "")
      
      if [ -n "$ai_services_resources" ]; then
        echo "Found existing AI Services resources that may need cleanup"
        should_cleanup="true"
      fi
      
      if [ "$should_cleanup" = "true" ]; then
        echo "=== Proceeding with AI Services resource cleanup ==="
      
      # Function to delete AI Services resource and its related components with fuzzy endpoint matching
      delete_ai_services_and_endpoints() {
        local resourceName="$1"
        local resourceType="$2"
        
        echo "=== Processing AI Services resource: $resourceName ==="
        
        # Check if the resource exists
        if az resource show --resource-group "$targetResourceGroup" --name "$resourceName" --resource-type "$resourceType" &> /dev/null; then
          echo "Found AI Services resource: $resourceName"
          
          # Delete private endpoints and NICs using fuzzy matching (since they have random salt)
          echo "Searching for private endpoints matching pattern: ${resourceName}*-pend"
          privateEndpoints=$(az network private-endpoint list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}') && contains(name, '-pend')].name" --output tsv)
          
          if [ -n "$privateEndpoints" ]; then
            while IFS= read -r pendName; do
              if [ -n "$pendName" ]; then
                echo "Deleting private endpoint: $pendName"
                az network private-endpoint delete \
                  --resource-group "$targetResourceGroup" \
                  --name "$pendName" \
                  --yes || echo "Failed to delete private endpoint $pendName"
              fi
            done <<< "$privateEndpoints"
          else
            echo "No private endpoints found for AI Services resource $resourceName"
          fi
          
          echo "Searching for NICs matching pattern: ${resourceName}*-pend-nic"
          nics=$(az network nic list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}') && contains(name, '-pend-nic')].name" --output tsv)
          
          if [ -n "$nics" ]; then
            while IFS= read -r nicName; do
              if [ -n "$nicName" ]; then
                echo "Deleting NIC: $nicName"
                az network nic delete \
                  --resource-group "$targetResourceGroup" \
                  --name "$nicName" \
                  --yes || echo "Failed to delete NIC $nicName"
              fi
            done <<< "$nics"
          else
            echo "No NICs found for AI Services resource $resourceName"
          fi
          
          # Delete the main AI Services resource
          echo "Deleting AI Services resource: $resourceName"
          az resource delete \
            --resource-group "$targetResourceGroup" \
            --name "$resourceName" \
            --resource-type "$resourceType" \
            --yes || echo "Failed to delete AI Services resource $resourceName"
            
          echo "Cleanup completed for AI Services resource: $resourceName"
        else
          echo "AI Services resource $resourceName not found, skipping"
        fi
      }
      
      # Look for AI Services resources that match the pattern
      echo "=== Searching for AI Services resources ==="
      aiServicesResources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.CognitiveServices/accounts" \
        --query "[?starts_with(name, '$aiServicesPrefix')].name" \
        --output tsv)
      
      if [ -n "$aiServicesResources" ]; then
        echo "Found AI Services resources to clean up:"
        echo "$aiServicesResources"
        while IFS= read -r serviceName; do
          if [ -n "$serviceName" ]; then
            delete_ai_services_and_endpoints "$serviceName" "Microsoft.CognitiveServices/accounts"
          fi
        done <<< "$aiServicesResources"
      else
        echo "No AI Services resources found matching pattern: $aiServicesPrefix"
      fi
      
      else
        echo "No Cognitive Services (63-cognitive-services) related errors detected. Skipping cleanup."
        echo "This cleanup only runs for errors related to:"
        echo "- Resources starting with '$aiServicesPrefix'"
        echo "- Deployments containing '03-AIServices'"
        echo "- Task '63-cognitive-services' failures"
      fi
      
      # Set variable to indicate task 72 performed deletions
      if [ "$should_cleanup" = "true" ]; then
        echo "##vso[task.setvariable variable=72_deleted]true"
        echo "Set variable 72_deleted=true for purge task"
      else
        echo "##vso[task.setvariable variable=72_deleted]false"
        echo "Set variable 72_deleted=false (no deletions performed)"
      fi
      
      echo "=== AI Services Error Cleanup Completed ==="
- task: AzureCLI@2
  displayName: '73_If_Error_AIFoundryProject_DeleteIt'
  condition: and(failed(), eq(variables['debugEnableCleaning'], 'true'), or(contains(variables['Agent.JobStatus'], '69-aifoundry-2025'), eq(variables['System.StageResult'], 'Failed')))
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      echo "=== AI Foundry Project Error Cleanup ==="
      echo "This task runs only when 69-aifoundry-2025 task failed with AIFoundry V2 related errors"
      
      az account set --subscription "$(dev_test_prod_sub_id)"
      
      # Input parameters - replicating the same logic from 05b_Check if resource exists
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      
      # Construct resource group name
      projectNameReplaced="${projectName/prj/project}"
      targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"
      
      # AI Foundry V2 name pattern (same as in 05b task)
      aiFoundryV2Name="aif2"
      
      echo "Target Resource Group: $targetResourceGroup"
      echo "AI Foundry V2 Name Pattern: $aiFoundryV2Name"
      
      # Check if this is specifically an AIFoundry V2 related error
      echo "Checking if error is related to AIFoundry V2 resources..."
      
      # Get the error details from the pipeline (this will help identify if it's aif2 related)
      DEPLOYMENT_NAME_PATTERN="09-AifV2-NoAvm_"
      AIF2_RESOURCE_PATTERN="aif2"
      
      echo "Looking for deployment errors containing: $DEPLOYMENT_NAME_PATTERN"
      echo "Looking for resource errors starting with: $AIF2_RESOURCE_PATTERN"
      
      # Check recent deployment failures for AIFoundry V2 patterns
      echo "Checking recent deployments for AIFoundry V2 related failures..."
      recent_deployments=$(az deployment sub list \
        --subscription "$(dev_test_prod_sub_id)" \
        --query "[?starts_with(name, 'esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)') && contains(name, '69-aifoundry-2025')].{name:name, provisioningState:properties.provisioningState, error:properties.error}" \
        --output json 2>/dev/null || echo "[]")
      
      echo "Recent deployments: $recent_deployments"
      
      # Check if we should proceed with cleanup based on error patterns
      should_cleanup="false"
      
      if echo "$recent_deployments" | grep -qi "09-AifV2-NoAvm_\|aif2"; then
        echo "Found AIFoundry V2 related deployment errors"
        should_cleanup="true"
      fi
      
      # Alternative check: look for AIFoundry V2 resources that might exist but be in error state
      aif2_resources=$(az resource list \
        --resource-group "$targetResourceGroup" \
        --resource-type "Microsoft.CognitiveServices/accounts" \
        --query "[?starts_with(name, '$aiFoundryV2Name')].name" \
        --output tsv 2>/dev/null || echo "")
      
      if [ -n "$aif2_resources" ]; then
        echo "Found existing AIFoundry V2 resources that may need cleanup"
        should_cleanup="true"
      fi
      
      if [ "$should_cleanup" = "true" ]; then
        echo "=== Proceeding with AIFoundry V2 resource cleanup ==="
        
        # Function to delete AIFoundry V2 resource and its related components with fuzzy endpoint matching
        delete_aifoundry_v2_and_endpoints() {
          local resourceName="$1"
          local resourceType="$2"
          
          echo "=== Processing AIFoundry V2 resource: $resourceName ==="
          
          # Check if the resource exists
          if az resource show --resource-group "$targetResourceGroup" --name "$resourceName" --resource-type "$resourceType" &> /dev/null; then
            echo "Found AIFoundry V2 resource: $resourceName"
            
            # Delete private endpoints and NICs using fuzzy matching (since they have random salt)
            echo "Searching for private endpoints matching pattern: ${resourceName}-pend"
            privateEndpoints=$(az network private-endpoint list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}-pend')].name" --output tsv)
            
            if [ -n "$privateEndpoints" ]; then
              while IFS= read -r pendName; do
                if [ -n "$pendName" ]; then
                  echo "Deleting private endpoint: $pendName"
                  az network private-endpoint delete \
                    --resource-group "$targetResourceGroup" \
                    --name "$pendName" \
                    --yes || echo "Failed to delete private endpoint $pendName"
                fi
              done <<< "$privateEndpoints"
            else
              echo "No private endpoints found for AIFoundry V2 resource $resourceName"
            fi
            
            echo "Searching for NICs matching pattern: ${resourceName}-pend-nic"
            nics=$(az network nic list --resource-group "$targetResourceGroup" --query "[?starts_with(name, '${resourceName}-pend-nic')].name" --output tsv)
            
            if [ -n "$nics" ]; then
              while IFS= read -r nicName; do
                if [ -n "$nicName" ]; then
                  echo "Deleting NIC: $nicName"
                  az network nic delete \
                    --resource-group "$targetResourceGroup" \
                    --name "$nicName" \
                    --yes || echo "Failed to delete NIC $nicName"
                fi
              done <<< "$nics"
            else
              echo "No NICs found for AIFoundry V2 resource $resourceName"
            fi
            
            # Delete the main AIFoundry V2 resource
            echo "Deleting AIFoundry V2 resource: $resourceName"
            az resource delete \
              --resource-group "$targetResourceGroup" \
              --name "$resourceName" \
              --resource-type "$resourceType" \
              --yes || echo "Failed to delete AIFoundry V2 resource $resourceName"
              
            echo "Cleanup completed for AIFoundry V2 resource: $resourceName"
          else
            echo "AIFoundry V2 resource $resourceName not found, skipping"
          fi
        }
        
        # Look for AIFoundry V2 resources that match the pattern
        echo "=== Searching for AIFoundry V2 resources ==="
        aifoundryV2Resources=$(az resource list \
          --resource-group "$targetResourceGroup" \
          --resource-type "Microsoft.CognitiveServices/accounts" \
          --query "[?starts_with(name, '$aiFoundryV2Name')].name" \
          --output tsv)
        
        if [ -n "$aifoundryV2Resources" ]; then
          echo "Found AIFoundry V2 resources to clean up:"
          echo "$aifoundryV2Resources"
          while IFS= read -r serviceName; do
            if [ -n "$serviceName" ]; then
              delete_aifoundry_v2_and_endpoints "$serviceName" "Microsoft.CognitiveServices/accounts"
            fi
          done <<< "$aifoundryV2Resources"
        else
          echo "No AIFoundry V2 resources found matching pattern: $aiFoundryV2Name"
        fi
        
      else
        echo "No AIFoundry V2 related errors detected. Skipping cleanup."
        echo "This cleanup only runs for errors related to:"
        echo "- Resources starting with 'aif2'"
        echo "- Deployments containing '09-AifV2-NoAvm_'"
      fi
      
      echo "=== AI Foundry Project Error Cleanup Completed ==="
- task: AzureCLI@2
  displayName: '79_Purge_If_SoftDeleted_71_72_After5minutes'
  condition: and(eq(variables['debugEnableCleaning'], 'true'), or(eq(variables['71_deleted'], 'true'), eq(variables['72_deleted'], 'true')))
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      echo "=== Purge Soft-Deleted Resources After 5 Minutes ==="
      echo "This task purges soft-deleted resources from tasks 71-72 if they successfully deleted resources"
      
      az account set --subscription "$(dev_test_prod_sub_id)"
      
      # Check which tasks performed deletions
      task_71_deleted="$(71_deleted)"
      task_72_deleted="$(72_deleted)"
      
      echo "Task 71 deleted resources: $task_71_deleted"
      echo "Task 72 deleted resources: $task_72_deleted"
      
      # Wait 5 minutes before attempting purge (soft-delete retention period)
      echo "Waiting 5 minutes before attempting to purge soft-deleted resources..."
      sleep 300
      
      # Input parameters - replicating the same logic from previous tasks
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      location="$(admin_location)"
      
      echo "Location: $location"
      echo "Project: $projectName"
      
      # Function to purge soft-deleted Cognitive Services accounts
      purge_cognitive_services() {
        echo "=== Checking for soft-deleted Cognitive Services accounts to purge ==="
        
        # List soft-deleted accounts in the location
        soft_deleted_accounts=$(az cognitiveservices account list-deleted \
          --location "$location" \
          --query "[].{name:name, location:location, deletionDate:deletionDate}" \
          --output json 2>/dev/null || echo "[]")
        
        if [ "$soft_deleted_accounts" != "[]" ] && [ -n "$soft_deleted_accounts" ]; then
          echo "Found soft-deleted Cognitive Services accounts:"
          echo "$soft_deleted_accounts"
          
          # Extract account names and attempt to purge them
          account_names=$(echo "$soft_deleted_accounts" | jq -r '.[].name' 2>/dev/null || echo "")
          
          if [ -n "$account_names" ]; then
            while IFS= read -r account_name; do
              if [ -n "$account_name" ]; then
                echo "Attempting to purge soft-deleted Cognitive Services account: $account_name"
                az cognitiveservices account purge \
                  --location "$location" \
                  --resource-group-name "deleted" \
                  --account-name "$account_name" \
                  --yes || echo "Failed to purge $account_name (may not exist or already purged)"
              fi
            done <<< "$account_names"
          fi
        else
          echo "No soft-deleted Cognitive Services accounts found in location $location"
        fi
      }
      
      # Function to purge soft-deleted Machine Learning workspaces
      purge_ml_workspaces() {
        echo "=== Checking for soft-deleted Machine Learning workspaces to purge ==="
        
        # Construct resource group name for searching deleted workspaces
        projectNameReplaced="${projectName/prj/project}"
        targetResourceGroup="${commonRGNamePrefix}${projectPrefix}${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}${projectSuffix}"
        
        # List deleted ML workspaces in the subscription and location
        deleted_workspaces=$(az ml workspace list-deleted \
          --location "$location" \
          --query "[?contains(name, '$projectName') || contains(name, 'aif-hub') || contains(name, 'aif-p')].{name:name, location:location, resourceGroup:resourceGroup}" \
          --output json 2>/dev/null || echo "[]")
        
        if [ "$deleted_workspaces" != "[]" ] && [ -n "$deleted_workspaces" ]; then
          echo "Found soft-deleted ML workspaces:"
          echo "$deleted_workspaces"
          
          # Extract workspace details and attempt to purge them
          echo "$deleted_workspaces" | jq -c '.[]' 2>/dev/null | while read -r workspace; do
            workspace_name=$(echo "$workspace" | jq -r '.name' 2>/dev/null)
            workspace_rg=$(echo "$workspace" | jq -r '.resourceGroup' 2>/dev/null)
            
            if [ -n "$workspace_name" ] && [ -n "$workspace_rg" ]; then
              echo "Attempting to purge soft-deleted ML workspace: $workspace_name in RG: $workspace_rg"
              az ml workspace delete \
                --name "$workspace_name" \
                --resource-group "$workspace_rg" \
                --permanently-delete \
                --yes || echo "Failed to purge $workspace_name (may not exist or already purged)"
            fi
          done
        else
          echo "No soft-deleted ML workspaces found for project $projectName in location $location"
        fi
      }
      
      # Purge resources based on which tasks performed deletions
      if [ "$task_72_deleted" = "true" ]; then
        echo "Task 72 deleted AI Services - attempting to purge soft-deleted Cognitive Services"
        purge_cognitive_services
      else
        echo "Task 72 did not delete any resources - skipping Cognitive Services purge"
      fi
      
      if [ "$task_71_deleted" = "true" ]; then
        echo "Task 71 deleted AI Foundry Hub/Project - attempting to purge soft-deleted ML workspaces"
        purge_ml_workspaces
      else
        echo "Task 71 did not delete any resources - skipping ML workspace purge"
      fi
      
      echo "=== Purge Soft-Deleted Resources Completed ==="
- task: AzureCLI@2
  displayName: '07_az_remove_ip_from_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptLocation: inlineScript
    scriptType: bash
    inlineScript: | 
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     az keyvault network-rule remove --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
  condition: always()
- task: AzureCLI@2
  displayName: '08_az_remove_ips_from_ACR_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      # Get the registry name and IPs from previous task
      registryName="$(acr_registry_name)"
      added_ips_string="$(acr_added_ips)"

      echo "Registry name: $registryName"
      echo "IPs to remove: $added_ips_string"

      # Check if we have IPs to remove
      if [ -n "$added_ips_string" ]; then
        echo "Cleaning up: Removing IPs and ranges that were added during ACR operations"

        # Convert comma-separated string to array
        IFS=',' read -ra ADDED_IPS <<< "$added_ips_string"

        for ip in "${ADDED_IPS[@]}"; do
          if [ -n "$ip" ]; then
            echo "Removing IP/range from ACR whitelist: $ip"
            az acr network-rule remove --name "$registryName" --ip-address "$ip" || echo "Failed to remove $ip or it was already removed"
          fi
        done

        echo "ACR firewall cleanup completed."
      else
        echo "No IPs to remove from ACR"
      fi

      # Secure the ACR by disabling public network access
      if [ -n "$registryName" ]; then
        echo "Disabling public network access for ACR: $registryName"
        az acr update --name "$registryName" --public-network-enabled false || echo "Failed to disable public access for $registryName"
        echo "ACR public network access disabled for security."
      else
        echo "No registry name found - skipping public access disable"
      fi
    condition: always()
