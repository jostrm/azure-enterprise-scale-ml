parameters:
  - name: serviceConnection
    type: string
  - name: serviceConnectionSeeding
    type: string
steps:
- checkout: self # Required as first property. Alias of the repository resource to check out or 'none'. 
  submodules: true # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules. Default is not to fetch submodules.
  continueOnError: false # Continue running even on failure?.  (false,n,no,off,on,true,y,yes)
  displayName: GIT # Human-readable name for the task. 
  enabled: true # Run this task when the job runs?.  (false,n,no,off,on,true,y,yes)
  name: GIT # ID of the step.  ([-_A-Za-z0-9]*)

- task: AzureCLI@2
  displayName: '00_pwsh_print_info'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      Write-Host "project_number_000 is: $(project_number_000)"
      Write-Host "admin_projectType is: $(admin_projectType)"
      Write-Host "dev_test_prod is: $(dev_test_prod)"
      Write-Host "service_connection is: ${{ parameters.serviceConnection }}"
      Write-Host "dev_service_connection is: $(dev_service_connection)"
      Write-Output "PowerShell Version: $($PSVersionTable.PSVersion)"
- task: AzureCLI@2
  displayName: '01_pwsh_get_IP_for_ADO_agent'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: ps
    scriptLocation: 'inlineScript'
    inlineScript: |
      $resp = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip
      Write-Host $resp
      Write-Host "##vso[task.setvariable variable=admin_ip_fw]$resp"
      $ipAddr = $resp
      Write-Host "ipAddr is: $(admin_ip_fw) or $ipAddr"

- task: AzureCLI@2
  displayName: '02_az_set_ip_to_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: 'inlineScript'
    inlineScript: |
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     az keyvault network-rule add --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
- task: AzureKeyVault@2  
  displayName: '03_az_download_seeding_keyvault'
  inputs:
    azureSubscription: ${{ parameters.serviceConnectionSeeding }}
    KeyVaultName: '$(admin_bicep_kv_fw)'
    
- task: AzureCLI@2
  displayName: '03b_create_temp_json_files'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      # Create temporary JSON files from YAML variables
      $tempDir = "../../../../../aifactory/parameters/"
      New-Item -ItemType Directory -Force -Path $tempDir
      
      # temp-globals-1.json (bicepPar1)
      $globals1 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          aifactorySuffixRG = @{ value = "$(admin_aifactorySuffixRG)" }
          commonRGNamePrefix = @{ value = "$(admin_aifactoryPrefixRG)" }
          locationSuffix = @{ value = "$(admin_locationSuffix)" }
          location = @{ value = "$(admin_location)" }
        }
      }
      $globals1 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/temp-globals-1.json" -Encoding UTF8
      
      # temp-globals-2.json (bicepPar2)
      $globals2 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          commonResourceSuffix = @{ value = "$(admin_commonResourceSuffix)" }
          vnetNameBase = @{ value = "$(vnetNameBase)" }
        }
      }
      $globals2 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/temp-globals-2.json" -Encoding UTF8
      
      # temp-globals-3.json (bicepPar3) - Only include parameters actually used by subnetCalc_v2.ps1
      $globals3 = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          tenantId = @{ value = "$(tenantId)" }
        }
      }
      $globals3 | ConvertTo-Json -Depth 5 | Out-File "$tempDir/temp-globals-3.json" -Encoding UTF8
      
      # temp-project.json (bicepPar4)
      $project = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          vnetResourceGroupBase = @{ value = "$(vnetResourceGroupBase)" }
        }
      }
      $project | ConvertTo-Json -Depth 5 | Out-File "$tempDir/temp-project.json" -Encoding UTF8
      
      # temp-override.json (bicepPar5) - Only include parameters actually used by subnetCalc_v2.ps1
      $override = @{
        '$schema' = "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#"
        contentVersion = "1.0.0.0"
        parameters = @{
          vnetResourceGroup_param = @{ value = "$(vnetResourceGroup_param)" }
          vnetNameFull_param = @{ value = "$(vnetNameFull_param)" }
        }
      }
      $override | ConvertTo-Json -Depth 5 | Out-File "$tempDir/temp-override.json" -Encoding UTF8
      
      Write-Host "Temporary JSON files created successfully"
- task: AzurePowerShell@4
  displayName: '04_pwsh_calculate_subnet_allocations'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    ScriptPath: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts/subnetCalc_v2.ps1'
    ScriptArguments: '-filePath "../../../../../aifactory/parameters/" -spObjId "$(esml-common-bicep-sp-id)" -spSecret "$(esml-common-bicep-sp-secret)" -env "$(dev_test_prod)" -subscriptionId "$(dev_test_prod_sub_id)" -prjResourceSuffix "$(admin_prjResourceSuffix)" -commonRGNamePrefixVar "$(admin_aifactoryPrefixRG)" -aifactorySuffixRGADO "$(admin_aifactorySuffixRG)" -commonResourceSuffixADO "$(admin_commonResourceSuffix)" -locationADO "$(admin_location)" -locationSuffixADO "$(admin_locationSuffix)" -projectTypeADO "$(admin_projectType)" -useServicePrincipal -aifactorySuffixRG "$(admin_aifactorySuffixRG)" -commonRGNamePrefix "$(admin_aifactoryPrefixRG)" -locationSuffix "$(admin_locationSuffix)" -location "$(admin_location)" -commonResourceSuffix "$(admin_commonResourceSuffix)" -vnetNameBase "$(vnetNameBase)" -tenantId "$(tenantId)" -vnetResourceGroupBase "$(vnetResourceGroupBase)" -vnetResourceGroup_param "$(vnetResourceGroup_param)" -vnetNameFull_param "$(vnetNameFull_param)"'
    pwsh: true
    azurePowerShellVersion: 'LatestVersion' # 'LatestVersion' | 'OtherVersion' 
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts'
- task: AzureCLI@2
  displayName: '05_az_bicep_deploy_subnets_and_NSGs'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: 'inlineScript'
    inlineScript: |
     echo "Deploying subnets and NSG to subscription: $(dev_test_prod_sub_id)"
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment group create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)$(admin_aifactorySuffixRG)SubnetDeplProj" \
     --subscription "$(dev_test_prod_sub_id)" \
     --resource-group "$(admin_aifactoryPrefixRG)$(vnetResourceGroupBase)-$(admin_locationSuffix)-$(dev_test_prod)$(admin_aifactorySuffixRG)" \
     --template-file "esml-genai-1\31-network.bicep" \
     --parameters @"..\..\..\..\aifactory\parameters\subnetParameters.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters tags='$(tags)' \
     --parameters vnetResourceGroup="$(admin_aifactoryPrefixRG)$(vnetResourceGroupBase)-$(admin_locationSuffix)-$(dev_test_prod)$(admin_aifactorySuffixRG)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters datalakeName_param="$(datalakeName_param)" \
     --parameters kvNameFromCOMMON_param="$(kvNameFromCOMMON_param)" \
     --parameters useCommonACR="$(useCommonACR_override)" \
     --parameters subnetCommon="$(subnetCommon)" \
     --parameters subnetCommonScoring="$(subnetCommonScoring)" \
     --parameters subnetCommonPowerbiGw="$(subnetCommonPowerbiGw)" \
     --parameters subnetProjGenAI="$(subnetProjGenAI)" \
     --parameters subnetProjAKS="$(subnetProjAKS)" \
     --parameters subnetProjACA="$(subnetProjACA)" \
     --parameters subnetProjDatabricksPublic="$(subnetProjDatabricksPublic)" \
     --parameters subnetProjDatabricksPrivate="$(subnetProjDatabricksPrivate)" \
     --parameters byoASEv3="$(byoASEv3)" \
     --parameters byoAseFullResourceId="$(byoAseFullResourceId)" \
     --parameters byoAseAppServicePlanResourceId="$(byoAseAppServicePlanResourceId)" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)"
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'

- task: AzureCLI@1
  displayName: '08_az_remove_ip_from_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptLocation: 'inlineScript'
    inlineScript: | 
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     az keyvault network-rule remove --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
  condition: always()