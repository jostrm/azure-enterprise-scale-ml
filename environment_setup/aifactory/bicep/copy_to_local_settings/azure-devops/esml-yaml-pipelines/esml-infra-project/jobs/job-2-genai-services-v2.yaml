steps:

- checkout: self # Required as first property. Alias of the repository resource to check out or 'none'. 
  submodules: true # set to 'true' for a single level of submodules or 'recursive' to get submodules of submodules. Default is not to fetch submodules.
  continueOnError: false # Continue running even on failure?.  (false,n,no,off,on,true,y,yes)
  displayName: GIT # Human-readable name for the task. 
  enabled: true # Run this task when the job runs?.  (false,n,no,off,on,true,y,yes)
  name: GIT # ID of the step.  ([-_A-Za-z0-9]*)

- task: AzureCLI@2
  displayName: '00_generate_deployment_random_value'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      # Generate a random deployment ID for this entire pipeline run
      $randomValue = [System.Guid]::NewGuid().ToString("N").Substring(0, 10)
      Write-Host "Generated deployment random value: $randomValue"
      echo "##vso[task.setvariable variable=deployment_random_value]$randomValue"

- task: AzureCLI@2
  displayName: '00_pwsh_print_info'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      Write-Host "project_number_000 is: $(project_number_000)"
      Write-Host "admin_projectType is: $(admin_projectType)"
      Write-Host "dev_test_prod is: $(dev_test_prod)"
      Write-Host "service_connection is:  ${{ parameters.serviceConnection }}"
      Write-Host "dev_service_connection is: $(dev_service_connection)"
      Write-Host "deployment_random_value is: $(deployment_random_value)"
- task: AzureCLI@2
  displayName: '01_pwsh_get_IP_for_ADO_agent'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      # Get primary IP
      PRIMARY_IP=$(curl -s http://ipinfo.io/ip)
      echo "Primary IP: $PRIMARY_IP"
      echo "##vso[task.setvariable variable=admin_ip_fw]$PRIMARY_IP"
      
      # Get all possible IPs that might be used
      echo "All network interfaces:"
      ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d'/' -f1
      
      # Try alternative IP detection services
      ALT_IP1=$(curl -s https://api.ipify.org)
      ALT_IP2=$(curl -s https://checkip.amazonaws.com)
      
      echo "Alternative IP 1: $ALT_IP1"
      echo "Alternative IP 2: $ALT_IP2"
      
      # Set variables for all IPs
      echo "##vso[task.setvariable variable=admin_ip_fw_alt1]$ALT_IP1"
      echo "##vso[task.setvariable variable=admin_ip_fw_alt2]$ALT_IP2"

- task: AzureCLI@2
  displayName: '02_az_set_ip_to_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: | 
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     
     az keyvault update --name "$(admin_bicep_kv_fw)" --resource-group "$(admin_bicep_kv_fw_rg)" --public-network-access Enabled --default-action Deny
     echo "Waiting for network rules to propagate..."
     sleep 10
     
     az keyvault network-rule add --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
- task: AzureKeyVault@2
  displayName: '03_az_download_seeding_keyvault'
  inputs:
    azureSubscription: ${{ parameters.serviceConnectionSeeding }}
    KeyVaultName: '$(admin_bicep_kv_fw)'

- task: AzureCLI@2
  displayName: '04_pwsh_fetch_network_parameters'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: pscore
    scriptPath: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts/genDynamicNetworkParamFile.ps1'
    arguments: '-spObjId "$(esml-common-bicep-sp-id)" -spSecret "$(esml-common-bicep-sp-secret)" -BYO_subnets "$(BYO_subnets)" -network_env "$(network_env)" -useServicePrincipal -bicepPar1 "../../../../../aifactory/parameters/10-esml-globals-1.json" -bicepPar2 "../../../../../aifactory/parameters/10-esml-globals-2-12_13_21_22.json" -bicepPar3 "../../../../../aifactory/parameters/10-esml-globals-4-13_21_22.json" -bicepPar4 "../../../../../aifactory/parameters/21-22-esml-prj-parameters.json" -bicepPar5 "../../../../../aifactory/parameters/10-esml-globals-override.json" -filePath "../../../../../aifactory/parameters/" -env "$(dev_test_prod)" -locationSuffixADO "$(admin_locationSuffix)" -aifactorySuffixRGADO "$(admin_aifactorySuffixRG)" -projectNumber "$(project_number_000)" -subscriptionId "$(dev_test_prod_sub_id)" -commonRGNamePrefixVar "$(admin_aifactoryPrefixRG)" -projectTypeADO "$(admin_projectType)"'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep/scripts'
- task: AzureCLI@2
  displayName: '05_Build default image offline, to private registry (ACR) if not exists'
  condition: eq(variables['serviceSettingDeployContainerApps'], 'true')
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Configuration flags
      use_public_image=true  # Set to true to use public image instead of building image
      mcr_ms_hello='mcr.microsoft.com/azuredocs/containerapps-helloworld:latest'
      
      # Create registry name from variables
      registryNameOrg="acrcommon$(aifactory_salt)$(admin_locationSuffix)$(admin_commonResourceSuffix)$(dev_test_prod)"
      registryName=$(echo "${registryNameOrg}" | tr -d '-')
      echo "Registry name: $registryName"
      
      # Set registry name for cleanup task
      echo "##vso[task.setvariable variable=acr_registry_name]$registryName"

      # Check if image already exists first
      echo "Checking if image containerapps-default:latest already exists in ACR..."
      if az acr repository show --name $registryName --image containerapps-default:latest &> /dev/null; then
        echo "✅ Image containerapps-default:latest already exists in ACR. Skipping all build operations."
        echo "##vso[task.setvariable variable=acr_added_ips]"  # Set empty for cleanup
        exit 0
      else
        echo "❌ Image containerapps-default:latest does not exist. Proceeding with ACR setup and image creation..."
      fi

      # Configure ACR for selective network access
      echo "Configuring ACR for selective network access"
      az acr update --name $registryName --public-network-enabled true --default-action Deny

      # Wait for network rules to propagate
      echo "Waiting for network rules to propagate..."
      sleep 30
      
      # Get current IP addresses
      echo "Getting current IP addresses right before ACR operations..."
      CURRENT_IP1=$(curl -s http://ipinfo.io/ip 2>/dev/null || echo "")
      CURRENT_IP2=$(curl -s https://api.ipify.org 2>/dev/null || echo "")
      CURRENT_IP3=$(curl -s https://checkip.amazonaws.com 2>/dev/null || echo "")
      CURRENT_IP4=$(curl -s https://icanhazip.com 2>/dev/null || echo "")
      
      echo "Current IPs detected: $CURRENT_IP1, $CURRENT_IP2, $CURRENT_IP3, $CURRENT_IP4"
      
      # Store IPs that we actually add for cleanup - using pipeline variables
      ADDED_IPS_LIST=""
      SUCCESSFULLY_ADDED_IPS=""
      
      # Helper function to add IP with duplicate check
      add_ip_to_acr() {
        local ip="$1"
        local description="$2"
        
        echo "Adding $description: $ip"
        
        # Try to add the IP and capture both output and exit code
        local result
        result=$(az acr network-rule add --name $registryName --ip-address "$ip" 2>&1)
        local exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          echo "Successfully added: $ip"
          SUCCESSFULLY_ADDED_IPS="$SUCCESSFULLY_ADDED_IPS,$ip"
          return 0
        elif echo "$result" | grep -q "duplicate"; then
          echo "IP $ip already exists in ACR rules (duplicate) - skipping"
          return 0
        else
          echo "Failed to add $ip: $result"
          return 1
        fi
      }
      
      # Add broader IP ranges for Azure DevOps agents
      echo "Adding Azure DevOps service IP ranges (more permissive approach)"
      
      PRIMARY_IP=$(curl -s http://ipinfo.io/ip 2>/dev/null)
      if [ -n "$PRIMARY_IP" ]; then
        IP_BASE_16=$(echo $PRIMARY_IP | cut -d'.' -f1-2)
        BROAD_RANGE_16="${IP_BASE_16}.0.0/16"
        add_ip_to_acr "$BROAD_RANGE_16" "very broad IP range"
        
        IP_BASE_24=$(echo $PRIMARY_IP | cut -d'.' -f1-3)
        BROAD_RANGE_24="${IP_BASE_24}.0/24"
        add_ip_to_acr "$BROAD_RANGE_24" "broad IP range"
      fi
      
      # Add common Azure DevOps IP ranges
      AZURE_DEVOPS_RANGES=(
        "13.107.6.0/24"
        "13.107.9.0/24"
        "13.107.42.0/24"
        "13.107.43.0/24"
        "104.208.0.0/16"
        "52.0.0.0/8"
        "13.0.0.0/8"
        "150.171.22.0/24"
        "150.171.23.0/24"
        "150.171.73.0/24"
        "150.171.74.0/24"
        "150.171.75.0/24"
        "150.171.76.0/24"
      )
      
      for range in "${AZURE_DEVOPS_RANGES[@]}"; do
        add_ip_to_acr "$range" "Azure DevOps IP range"
      done
      
      # Add individual detected IPs as backup (with duplicate detection)
      CURRENT_IPS=("$CURRENT_IP1" "$CURRENT_IP2" "$CURRENT_IP3" "$CURRENT_IP4")
      PROCESSED_IPS=()
      
      for current_ip in "${CURRENT_IPS[@]}"; do
        if [ -n "$current_ip" ]; then
          # Check if we've already processed this IP
          if [[ " ${PROCESSED_IPS[@]} " =~ " ${current_ip} " ]]; then
            echo "IP $current_ip already processed - skipping duplicate"
            continue
          fi
          
          add_ip_to_acr "$current_ip" "detected IP"
          PROCESSED_IPS+=("$current_ip")
        fi
      done
      
      # Store only the successfully added IPs for cleanup (remove leading comma)
      SUCCESSFULLY_ADDED_IPS=$(echo "$SUCCESSFULLY_ADDED_IPS" | sed 's/^,//')
      echo "##vso[task.setvariable variable=acr_added_ips]$SUCCESSFULLY_ADDED_IPS"
      echo "Successfully added IPs for cleanup: $SUCCESSFULLY_ADDED_IPS"
      
      # Wait for network rules to propagate
      echo "Waiting for network rules to propagate..."
      sleep 30
      
      # Create the image (we already checked it doesn't exist)
      echo "Creating new image containerapps-default:latest..."
      
      if [ "$use_public_image" = true ]; then
        echo "Using public image: $mcr_ms_hello"
        timestamp=$(date +%Y%m%d-%H%M%S)
        
        echo "Importing public image to ACR with latest tag..."
        az acr import --name $registryName \
                      --source $mcr_ms_hello \
                      --image containerapps-default:latest \
                      --force
        
        echo "Importing public image to ACR with timestamp tag..."
        az acr import --name $registryName \
                      --source $mcr_ms_hello \
                      --image containerapps-default:$timestamp \
                      --force
        
        echo "Public image imported to ACR successfully!"
      else
        echo "Building custom image using ACR build..."
        az acr build --registry $registryName \
                     --image containerapps-default:latest \
                     --file azure-enterprise-scale-ml/environment_setup/aifactory/dockerfiles/acaDefault/Dockerfile \
                     azure-enterprise-scale-ml/environment_setup/aifactory/dockerfiles/acaDefault/
      fi

      # Verify image was created successfully
      sleep 30
      if az acr repository show --name $registryName --image containerapps-default:latest &> /dev/null; then
        echo "✅ Image created and verified successfully."
      else
        echo "❌ Failed to create/verify image"
        exit 1
      fi
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: AzureCLI@2
  displayName: '05a_Check if Private DNS Zones exist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Input parameters
      privDnsSubscription="$(dev_test_prod_sub_id)"
      privDnsResourceGroupName="$(admin_aifactoryPrefixRG)esml-common-$(admin_locationSuffix)-$(dev_test_prod)$(admin_aifactorySuffixRG)"
      location="$(admin_location)"

      # Define key-value pairs for DNS Zones
      declare -A dnsZones=(
        [zoneazurecontainerapps]="privatelink.${location}.azurecontainerapps.io"
        [zoneredis]="privatelink.redis.cache.windows.net"
        [zonepostgres]="privatelink.postgres.database.azure.com"
        [zonesql]="privatelink.database.windows.net"
        [zoneMongo]="privatelink.mongo.cosmos.azure.com"
      )

      # Helper function to check if a Private DNS Zone exists
      dns_zone_exists() {
        local subscription="$1"
        local resourceGroup="$2"
        local dnsZoneName="$3"

        # Run the az network private-dns zone show command and capture its output and exit status
        local output
        output=$(az network private-dns zone show --subscription "$subscription" --resource-group "$resourceGroup" --name "$dnsZoneName" 2>&1)
        local status=$?

        # Check if the command succeeded
        if [ $status -ne 0 ]; then
          echo "false"
        else
          echo "true"
        fi
      }

      # Check each DNS Zone
      for key in "${!dnsZones[@]}"; do
        dnsZoneName="${dnsZones[$key]}"
        exists=$(dns_zone_exists "$privDnsSubscription" "$privDnsResourceGroupName" "$dnsZoneName")
        echo "##vso[task.setvariable variable=${key}Exists]${exists}"
        echo "Checked DNS Zone: $dnsZoneName, Exists: $exists"
      done

      # Print variables for debugging
      echo "Private DNS Subscription: $privDnsSubscription"
      echo "Private DNS Resource Group: $privDnsResourceGroupName"
      echo "Location: $location"
- task: AzureCLI@2
  displayName: '05b_Check if resource exists'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash

      az account set --subscription "$(dev_test_prod_sub_id)"

      # Input parameters
      commonRGNamePrefix="$(admin_aifactoryPrefixRG)"
      projectNumber="$(project_number_000)"
      projectName="prj${projectNumber}"
      locationSuffix="$(admin_locationSuffix)"
      envName="$(dev_test_prod)"
      aifactorySuffixRG="$(admin_aifactorySuffixRG)"
      # uniqueInAIFenv="$(aifactory_salt)" # not used in this script. fuzzy match is used instead.
      resourceSuffix="$(admin_prjResourceSuffix)"
      prjResourceSuffixNoDash="${resourceSuffix#-}"
      twoNumbers="${resourceSuffix:2:2}"

      # Construct resource group name
      projectNameReplaced="${projectName/prj/project}"
      targetResourceGroup="${commonRGNamePrefix}esml-${projectNameReplaced}-${locationSuffix}-${envName}${aifactorySuffixRG}-rg"

      # Check if target resource group exists
      echo "Checking if resource group exists: $targetResourceGroup"
      if ! az group show --name "$targetResourceGroup" &> /dev/null; then
        echo "Resource group '$targetResourceGroup' does not exist. Skipping resource checks and setting all existence variables to false."
        
        # Set all resource existence variables to false
        echo "##vso[task.setvariable variable=aiHubExists]false"
        echo "##vso[task.setvariable variable=aifProjectExists]false"
        echo "##vso[task.setvariable variable=amlExists]false"
        echo "##vso[task.setvariable variable=openaiExists]false"
        echo "##vso[task.setvariable variable=aiSearchExists]false"
        echo "##vso[task.setvariable variable=dashboardInsightsExists]false"
        echo "##vso[task.setvariable variable=applicationInsightExists]false"
        echo "##vso[task.setvariable variable=aiServicesExists]false"
        echo "##vso[task.setvariable variable=bingExists]false"
        echo "##vso[task.setvariable variable=containerAppsEnvExists]false"
        echo "##vso[task.setvariable variable=containerAppAExists]false"
        echo "##vso[task.setvariable variable=containerAppWExists]false"
        echo "##vso[task.setvariable variable=cosmosDBExists]false"
        echo "##vso[task.setvariable variable=functionAppExists]false"
        echo "##vso[task.setvariable variable=webAppExists]false"
        echo "##vso[task.setvariable variable=funcAppServicePlanExists]false"
        echo "##vso[task.setvariable variable=webAppServicePlanExists]false"
        echo "##vso[task.setvariable variable=keyvaultExists]false"
        echo "##vso[task.setvariable variable=miACAExists]false"
        echo "##vso[task.setvariable variable=miPrjExists]false"
        echo "##vso[task.setvariable variable=storageAccount1001Exists]false"
        echo "##vso[task.setvariable variable=storageAccount2001Exists]false"
        echo "##vso[task.setvariable variable=aifExists]false"
        echo "##vso[task.setvariable variable=redisExists]false"
        echo "##vso[task.setvariable variable=postgreSQLExists]false"
        echo "##vso[task.setvariable variable=sqlServerExists]false"
        echo "##vso[task.setvariable variable=sqlDBExists]false"
        echo "##vso[task.setvariable variable=acrProjectExists]false"
        echo "##vso[task.setvariable variable=vmExists]false"
        
        exit 0
      fi

      echo "Resource group '$targetResourceGroup' exists. Proceeding with resource checks."

      # Helper function for fuzzy resource existence check
      resource_exists_fuzzy() {
        local rg="$1"
        local type="$2"
        local prefix="$3"
        local suffix="$4"

        # Run the az resource list command and capture its output and exit status
        local output
        output=$(az resource list --resource-group "$rg" --resource-type "$type" --query "[?starts_with(name, '$prefix') && ends_with(name, '$suffix') ]" 2>&1)
        local status=$?

        # Check if the command succeeded
        if [ $status -ne 0 ]; then
          echo "Error: Failed to list resources in resource group '$rg' with type '$type'."
          echo "Details: $output"
          return 1
        fi

        # Check if the resource exists
        if echo "$output" | grep -q "$prefix"; then
          echo "true"
        else
          echo "false"
        fi
      }

      # Helper function for exact resource existence check
      resource_exists_exact() {
        local rg="$1"
        local type="$2"
        local name="$3"
        if az resource show --resource-group "$rg" --name "$name" --resource-type "$type" &> /dev/null; then
          echo "true"
        else
          echo "false"
        fi
      }

      # ...existing code...

      # Resource name variables
      suffixStandard="${resourceSuffix}"
      suffixStandardNoDash="${prjResourceSuffixNoDash}"
      suffixStorage1=$(echo "1${prjResourceSuffixNoDash}${envName}" | tr -d '-')
      suffixStorage2=$(echo "2${prjResourceSuffixNoDash}${envName}" | tr -d '-')
      suffixAppServicePlan="${resourceSuffix}-plan"
      suffixAcr="${prjResourceSuffixNoDash}"
      suffixKeyvault="${twoNumbers}"

      aiHubName="ai-hub-${projectName}-${locationSuffix}-${envName}"
      aifProjectName="ai-prj${projectNumber}-01-${locationSuffix}-${envName}"
      amlName="aml-${projectName}-${locationSuffix}-${envName}"
      openaiName="aoai-${projectName}-${locationSuffix}-${envName}"
      safeNameAISearch="aisearch${projectName}${locationSuffix}${envName}"
      dashboardInsightsName="AIFactory${aifactorySuffixRG}-${projectName}-insights-${envName}"
      applicationInsightName="ain-${projectName}-${locationSuffix}-${envName}"
      aiServicesPrefix="aiservices${projectName}${locationSuffix}${envName}"
      bingName="bing-${projectName}-${locationSuffix}-${envName}"
      containerAppsEnvName="aca-env-${projectName}-${locationSuffix}-${envName}"
      containerAppAName="aca-a-${projectName}${locationSuffix}${envName}"
      containerAppWName="aca-w-${projectName}${locationSuffix}${envName}"
      cosmosDBName="cosmos-${projectName}-${locationSuffix}-${envName}"
      functionAppName="func-${projectName}-${locationSuffix}-${envName}"
      webAppName="webapp-${projectName}-${locationSuffix}-${envName}"
      funcAppServicePlanName="func-${projectName}-${locationSuffix}-${envName}"
      webbAppServicePlanName="webapp-${projectName}-${locationSuffix}-${envName}"
      keyvaultName="kv-p${projectNumber}-${locationSuffix}-${envName}"
      miACAPrefix="mi-aca-${projectName}-${locationSuffix}-${envName}"
      miPrjPrefix="mi-${projectName}-${locationSuffix}-${envName}"
      storageAccount1001Name="sa${projectName}${locationSuffix}"
      storageAccount2001Name="sa${projectName}${locationSuffix}"
      aifName="aif-hub-${projectName}-${locationSuffix}-${envName}"
      redisName="redis-${projectName}-${locationSuffix}-${envName}"
      postgreSQLName="pg-flex-${projectName}-${locationSuffix}-${envName}"
      sqlServerName="sql-${projectName}-${locationSuffix}-${envName}"
      sqlDBName="sqldb-${projectName}-${locationSuffix}-${envName}"
      acrProjectName="acr${projectName}genai${locationSuffix}"
      vmName="dsvm-${projectName}-${locationSuffix}-${envName}"

      # Check resources (fuzzy for those with randomSalt,unique, exact for others)
      echo "##vso[task.setvariable variable=aiHubExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aiHubName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aifProjectExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aifProjectName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=amlExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$amlName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=openaiExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$openaiName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aiSearchExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Search/searchServices" "$safeNameAISearch" "$suffixStandardNoDash")"
      echo "##vso[task.setvariable variable=dashboardInsightsExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Insights/components" "$dashboardInsightsName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=applicationInsightExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Insights/components" "$applicationInsightName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=aiServicesExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$aiServicesPrefix" "$suffixStandardNoDash")"
      echo "##vso[task.setvariable variable=bingExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.CognitiveServices/accounts" "$bingName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppsEnvExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/managedEnvironments" "$containerAppsEnvName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppAExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/containerApps" "$containerAppAName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=containerAppWExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.App/containerApps" "$containerAppWName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=cosmosDBExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.DocumentDB/databaseAccounts" "$cosmosDBName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=functionAppExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/sites" "$functionAppName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=webAppExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/sites" "$webAppName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=funcAppServicePlanExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/serverfarms" "$funcAppServicePlanName" "$suffixAppServicePlan")"
      echo "##vso[task.setvariable variable=webAppServicePlanExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Web/serverfarms" "$webbAppServicePlanName" "$suffixAppServicePlan")"
      echo "##vso[task.setvariable variable=keyvaultExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.KeyVault/vaults" "$keyvaultName" "$suffixKeyvault")"
      echo "##vso[task.setvariable variable=miACAExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ManagedIdentity/userAssignedIdentities" "$miACAPrefix" "$suffixStandard")"
      echo "##vso[task.setvariable variable=miPrjExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ManagedIdentity/userAssignedIdentities" "$miPrjPrefix" "$suffixStandard")"
      echo "##vso[task.setvariable variable=storageAccount1001Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Storage/storageAccounts" "$storageAccount1001Name" "$suffixStorage1")"
      echo "##vso[task.setvariable variable=storageAccount2001Exists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Storage/storageAccounts" "$storageAccount2001Name" "$suffixStorage2")"
      echo "##vso[task.setvariable variable=aifExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.MachineLearningServices/workspaces" "$aifName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=redisExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Cache/Redis" "$redisName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=postgreSQLExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.DBforPostgreSQL/flexibleServers" "$postgreSQLName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=sqlServerExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Sql/servers" "$sqlServerName" "$suffixStandard")"
      echo "##vso[task.setvariable variable=sqlDBExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Sql/servers/databases" "$sqlDBName" "*")"
      echo "##vso[task.setvariable variable=acrProjectExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.ContainerRegistry/registries" "$acrProjectName" "$suffixAcr")"
      echo "##vso[task.setvariable variable=vmExists]$(resource_exists_fuzzy "$targetResourceGroup" "Microsoft.Compute/virtualMachines" "$vmName" "$suffixStandard")"

      # Print variables for debugging
      echo "Target Resource Group: $targetResourceGroup"
      echo "Key Vault Name: $keyvaultName"
- task: AzureCLI@2
  displayName: '05c_Validate Required Parameters'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      #!/bin/bash
      
      # List of required variables with their Azure DevOps variable references
      declare -A required_vars=(
        ["aiHubExists"]="$(aiHubExists)"
        ["aifProjectExists"]="$(aifProjectExists)"
        ["amlExists"]="$(amlExists)"
        ["aiSearchExists"]="$(aiSearchExists)"
        ["dashboardInsightsExists"]="$(dashboardInsightsExists)"
        ["applicationInsightExists"]="$(applicationInsightExists)"
        ["aiServicesExists"]="$(aiServicesExists)"
        ["bingExists"]="$(bingExists)"
        ["containerAppsEnvExists"]="$(containerAppsEnvExists)"
        ["containerAppWExists"]="$(containerAppWExists)"
        ["cosmosDBExists"]="$(cosmosDBExists)"
        ["functionAppExists"]="$(functionAppExists)"
        ["webAppExists"]="$(webAppExists)"
        ["funcAppServicePlanExists"]="$(funcAppServicePlanExists)"
        ["webAppServicePlanExists"]="$(webAppServicePlanExists)"
        ["keyvaultExists"]="$(keyvaultExists)"
        ["miACAExists"]="$(miACAExists)"
        ["miPrjExists"]="$(miPrjExists)"
        ["storageAccount1001Exists"]="$(storageAccount1001Exists)"
        ["storageAccount2001Exists"]="$(storageAccount2001Exists)"
        ["aifExists"]="$(aifExists)"
        ["redisExists"]="$(redisExists)"
        ["postgreSQLExists"]="$(postgreSQLExists)"
        ["sqlServerExists"]="$(sqlServerExists)"
        ["sqlDBExists"]="$(sqlDBExists)"
        ["acrProjectExists"]="$(acrProjectExists)"
        ["vmExists"]="$(vmExists)"
        ["zoneazurecontainerappsExists"]="$(zoneazurecontainerappsExists)"
        ["zoneredisExists"]="$(zoneredisExists)"
        ["zonepostgresExists"]="$(zonepostgresExists)"
        ["zonesqlExists"]="$(zonesqlExists)"
        ["zoneMongoExists"]="$(zoneMongoExists)"
        ["aifactory_salt_random"]="$(aifactory_salt_random)"
      )

      # Validate each variable
      for var_name in "${!required_vars[@]}"; do
        value="${required_vars[$var_name]}"
        echo "Checking variable: $var_name, Value: $value"
        if [ -z "$value" ] || [ "$value" = "\$(${var_name})" ]; then
          if [ "$var_name" = "aifactory_salt_random" ]; then
            echo "Warning: Variable $var_name is not set or empty  (It should be 10 characters), but continuing execution. aifactory_salt_random needs to be set if UPDATING an existing project - adding services. But not att init."
          else
            echo "Warning: Required variable $var_name is not set or empty."
            exit 0
          fi
        fi
      done

      echo "All required parameters are set and valid."

# --- REPLACED SINGLE DEPLOY TASK WITH SEVEN SEQUENTIAL PHASE TASKS ---

- task: AzureCLI@2
  displayName: '61-foundation'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-61-foundation" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\01-foundation.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters vnetNameBase="$(vnetNameBase)" \
     --parameters vnetResourceGroupBase="$(vnetResourceGroupBase)" \
     --parameters vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters network_env="$(network_env_$(dev_test_prod))" \
     --parameters centralDnsZoneByPolicyInHub="$(centralDnsZoneByPolicyInHub)" \
     --parameters privateDnsAndVnetLinkAllGlobalLocation="false" \
     --parameters privDnsSubscription_param="$(privDnsSubscription_param)" \
     --parameters privDnsResourceGroup_param="$(privDnsResourceGroup_param)" \
     --parameters commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters technicalContactId="$(technical_admins_ad_object_id)" \
     --parameters technicalContactEmail="$(technical_admins_email)" \
     --parameters miACAExists="$(miACAExists)" \
     --parameters miPrjExists="$(miPrjExists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters zoneAzurecontainerappsExists="$(zoneazurecontainerappsExists)" \
     --parameters zoneRedisExists="$(zoneredisExists)" \
     --parameters zonePostgresExists="$(zonepostgresExists)" \
     --parameters zoneSqlExists="$(zonesqlExists)" \
     --parameters zoneMongoExists="$(zoneMongoExists)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters enableDebugging="false" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters DEBUG_enableAIServices="$(enableAIServices)" \
     --parameters DEBUG_enableAIFoundryHub="$(enableAIFoundryHub)" \
     --parameters DEBUG_enableAISearch="$(enableAISearch)" \
     --parameters DEBUG_enableAzureMachineLearning="$(enableAzureMachineLearning)" \
     --parameters DEBUG_serviceSettingDeployFunction="$(serviceSettingDeployFunction)" \
     --parameters DEBUG_functionRuntime="$(functionRuntime)" \
     --parameters DEBUG_functionVersion="$(functionVersion)" \
     --parameters DEBUG_serviceSettingDeployWebApp="$(serviceSettingDeployWebApp)" \
     --parameters DEBUG_webAppRuntime="$(webAppRuntime)" \
     --parameters DEBUG_webAppRuntimeVersion="$(webAppRuntimeVersion)" \
     --parameters DEBUG_aseSku="$(aseSku)" \
     --parameters DEBUG_aseSkuCode="$(aseSkuCode)" \
     --parameters DEBUG_aseSkuWorkers="$(aseSkuWorkers)" \
     --parameters DEBUG_serviceSettingDeployContainerApps="$(serviceSettingDeployContainerApps)" \
     --parameters DEBUG_serviceSettingDeployAppInsightsDashboard="$(serviceSettingDeployAppInsightsDashboard)" \
     --parameters DEBUG_aca_a_registry_image="$(aca_a_registry_image)" \
     --parameters DEBUG_aca_w_registry_image="$(aca_w_registry_image)" \
     --parameters DEBUG_serviceSettingDeployBingSearch="$(serviceSettingDeployBingSearch)" \
     --parameters DEBUG_serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters DEBUG_serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters DEBUG_serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters DEBUG_serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters DEBUG_serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters DEBUG_disableContributorAccessForUsers="$(disableContributorAccessForUsers)" \
     --parameters DEBUG_serviceSettingDeployPostgreSQL="$(serviceSettingDeployPostgreSQL)" \
     --parameters DEBUG_serviceSettingDeployRedisCache="$(serviceSettingDeployRedisCache)" \
     --parameters DEBUG_serviceSettingDeploySQLDatabase="$(serviceSettingDeploySQLDatabase)" \
     --parameters DEBUG_BYO_subnets="$(BYO_subnets)" \
     --parameters DEBUG_network_env_dev="$(network_env_dev)" \
     --parameters DEBUG_network_env_stage="$(network_env_stage)" \
     --parameters DEBUG_network_env_prod="$(network_env_prod)" \
     --parameters DEBUG_vnetResourceGroup_param="$(vnetResourceGroup_param)" \
     --parameters DEBUG_vnetNameFull_param="$(vnetNameFull_param)" \
     --parameters DEBUG_commonResourceGroup_param="$(commonResourceGroup_param)" \
     --parameters DEBUG_datalakeName_param="$(datalakeName_param)" \
     --parameters DEBUG_kvNameFromCOMMON_param="$(kvNameFromCOMMON_param)" \
     --parameters DEBUG_useCommonACR_override="$(useCommonACR_override)" \
     --parameters DEBUG_subnetCommon="$(subnetCommon)" \
     --parameters DEBUG_subnetCommonScoring="$(subnetCommonScoring)" \
     --parameters DEBUG_subnetCommonPowerbiGw="$(subnetCommonPowerbiGw)" \
     --parameters DEBUG_subnetProjGenAI="$(subnetProjGenAI)" \
     --parameters DEBUG_subnetProjAKS="$(subnetProjAKS)" \
     --parameters DEBUG_subnetProjACA="$(subnetProjACA)" \
     --parameters DEBUG_subnetProjDatabricksPublic="$(subnetProjDatabricksPublic)" \
     --parameters DEBUG_subnetProjDatabricksPrivate="$(subnetProjDatabricksPrivate)" \
     --parameters DEBUG_byoASEv3="$(byoASEv3)" \
     --parameters DEBUG_byoAseFullResourceId="$(byoAseFullResourceId)" \
     --parameters DEBUG_byoAseAppServicePlanResourceId="$(byoAseAppServicePlanResourceId)" \
     --parameters DEBUG_enablePublicGenAIAccess="$(enablePublicGenAIAccess)" \
     --parameters DEBUG_allowPublicAccessWhenBehindVnet="$(allowPublicAccessWhenBehindVnet)" \
     --parameters DEBUG_enablePublicAccessWithPerimeter="$(enablePublicAccessWithPerimeter)" \
     --parameters DEBUG_admin_aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters DEBUG_admin_commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters DEBUG_admin_prjResourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters DEBUG_aifactory_salt="$(aifactory_salt)" \
     --parameters DEBUG_admin_projectType="$(admin_projectType)" \
     --parameters DEBUG_project_number_000="$(project_number_000)" \
     --parameters DEBUG_project_service_principal_AppID_seeding_kv_name="$(project_service_principal_AppID_seeding_kv_name)" \
     --parameters DEBUG_project_service_principal_OID_seeding_kv_name="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters DEBUG_project_service_principal_Secret_seeding_kv_name="$(project_service_principal_Secret_seeding_kv_name)" \
     --parameters DEBUG_project_IP_whitelist="$(project_IP_whitelist)" \
     --parameters DEBUG_deployModel_gpt_4="$(deployModel_gpt_4)" \
     --parameters DEBUG_deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters DEBUG_deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters DEBUG_deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters DEBUG_deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '62-cognitive-services'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-62-cognitive-services" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\02-cognitive-services.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters openaiExists="$(openaiExists)" \
     --parameters aiSearchExists="$(aiSearchExists)" \
     --parameters aiServicesExists="$(aiServicesExists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters storageAccount2001Exists="$(storageAccount2001Exists)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters keyvaultSoftDeleteDays="$(admin_keyvaultSoftDeleteDays)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters enableAIServices="$(enableAIServices)" \
     --parameters enableAISearch="$(enableAISearch)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters serviceSettingDeployContentSafety="$(serviceSettingDeployContentSafety)" \
     --parameters serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters deployModel_text_embedding_3_large="$(deployModel_text_embedding_3_large)" \
     --parameters deployModel_text_embedding_3_small="$(deployModel_text_embedding_3_small)" \
     --parameters deployModel_text_embedding_ada_002="$(deployModel_text_embedding_ada_002)" \
     --parameters deployModel_gpt_4o_mini="$(deployModel_gpt_4o_mini)" \
     --parameters deployModel_gpt_4="$(deployModel_gpt_4)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '63-core-infrastructure'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-63-core-infrastructure" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\03-core-infrastructure.bicep" \
     --parameters adminPassword="$(date +%s | sha256sum | base64 | head -c 32 ; echo)" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters projectServicePrincipleOID_SeedingKeyvaultName="$(project_service_principal_OID_seeding_kv_name)" \
     --parameters projectServicePrincipleAppID_SeedingKeyvaultName="$(project_service_principal_AppID_seeding_kv_name)" \
     --parameters projectServicePrincipleSecret_SeedingKeyvaultName="$(project_service_principal_Secret_seeding_kv_name)" \
     --parameters inputKeyvault="$(admin_bicep_kv_fw)" \
     --parameters inputKeyvaultResourcegroup="$(admin_bicep_kv_fw_rg)" \
     --parameters inputKeyvaultSubscription="$(admin_bicep_input_keyvault_subscription)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters storageAccount1001Exists="$(storageAccount1001Exists)" \
     --parameters storageAccount2001Exists="$(storageAccount2001Exists)" \
     --parameters keyvaultExists="$(keyvaultExists)" \
     --parameters applicationInsightExists="$(applicationInsightsExists)" \
     --parameters acrProjectExists="$(acrProjectExists)" \
     --parameters vmExists="$(vmExists)" \
     --parameters bingExists="$(bingExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters keyvaultSoftDeleteDays="$(admin_keyvaultSoftDeleteDays)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployBingSearch="$(serviceSettingDeployBingSearch)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '64-databases'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-64-databases" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\04-databases.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters cosmosDBExists="$(cosmosDBExists)" \
     --parameters redisExists="$(redisExists)" \
     --parameters postgreSQLExists="$(postgreSQLExists)" \
     --parameters sqlServerExists="$(sqlServerExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployCosmosDB="$(serviceSettingDeployCosmosDB)" \
     --parameters serviceSettingDeployPostgreSQL="$(serviceSettingDeployPostgreSQL)" \
     --parameters serviceSettingDeployRedisCache="$(serviceSettingDeployRedisCache)" \
     --parameters serviceSettingDeploySQLDatabase="$(serviceSettingDeploySQLDatabase)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '65-compute-services'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-65-compute-services" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\05-compute-services.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters containerAppsEnvExists="$(containerAppsEnvExists)" \
     --parameters containerAppAExists="$(containerAppAExists)" \
     --parameters containerAppWExists="$(containerAppWExists)" \
     --parameters functionAppExists="$(functionAppExists)" \
     --parameters webAppExists="$(webAppExists)" \
     --parameters funcAppServicePlanExists="$(funcAppServicePlanExists)" \
     --parameters webAppServicePlanExists="$(webAppServicePlanExists)" \
     --parameters miACAExists="$(miACAExists)" \
     --parameters applicationInsightExists="$(applicationInsightExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployContainerApps="$(serviceSettingDeployContainerApps)" \
     --parameters serviceSettingDeployFunction="$(serviceSettingDeployFunction)" \
     --parameters serviceSettingDeployWebApp="$(serviceSettingDeployWebApp)" \
     --parameters functionRuntime="$(functionRuntime)" \
     --parameters functionVersion="$(functionVersion)" \
     --parameters webAppRuntime="$(webAppRuntime)" \
     --parameters webAppRuntimeVersion="$(webAppRuntimeVersion)" \
     --parameters aseSku="$(aseSku)" \
     --parameters aseSkuCode="$(aseSkuCode)" \
     --parameters aseSkuWorkers="$(aseSkuWorkers)" \
     --parameters serviceSettingDeployAppInsightsDashboard="$(serviceSettingDeployAppInsightsDashboard)" \
     --parameters aca_a_registry_image="$(aca_a_registry_image)" \
     --parameters aca_w_registry_image="$(aca_w_registry_image)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '66-ml-platform'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-66-ml-platform" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\06-ml-platform.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters IPwhiteList="$(project_IP_whitelist)" \
     --parameters aiHubExists="$(aiHubExists)" \
     --parameters amlExists="$(amlExists)" \
     --parameters aifProjectExists="$(aifProjectExists)" \
     --parameters aksExists="$(aksExists)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters enableAzureMachineLearning="$(enableAzureMachineLearning)" \
     --parameters enableAIFoundryHub="$(enableAIFoundryHub)" \
     --parameters serviceSettingEnableAIFoundryPreview="$(serviceSettingEnableAIFoundryPreview)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '67-rbac-security'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az account set --subscription "$(dev_test_prod_sub_id)"
     az deployment sub create \
     --name "esml-p$(project_number_000)-$(dev_test_prod)-$(admin_locationSuffix)-$(admin_prjResourceSuffix)$(admin_commonResourceSuffix)$PrjDepl-67-rbac-security" \
     --subscription "$(dev_test_prod_sub_id)" \
     --location "$(admin_location)" \
     --template-file "esml-genai-1\\07-rbac-security.bicep" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\dynamicNetworkParams.json" \
     --parameters @"..\\..\\..\\..\\aifactory\\parameters\\v122\\01-common.json" \
     --parameters env="$(dev_test_prod)" \
     --parameters projectNumber="$(project_number_000)" \
     --parameters technicalAdminsObjectID="$(technical_admins_ad_object_id)" \
     --parameters technicalAdminsEmail="$(technical_admins_email)" \
     --parameters location="$(admin_location)" \
     --parameters locationSuffix="$(admin_locationSuffix)" \
     --parameters resourceSuffix="$(admin_prjResourceSuffix)" \
     --parameters aifactorySuffixRG="$(admin_aifactorySuffixRG)" \
     --parameters commonRGNamePrefix="$(admin_aifactoryPrefixRG)" \
     --parameters commonResourceSuffix="$(admin_commonResourceSuffix)" \
     --parameters azureMachineLearningObjectId="$(azure_machinelearning_sp_oid)" \
     --parameters useAdGroups="$(use_ad_groups)" \
     --parameters randomValue="$(deployment_random_value)" \
     --parameters aifactorySalt10char="$(aifactory_salt_random)" \
     --parameters serviceSettingDeployAzureOpenAI="$(serviceSettingDeployAzureOpenAI)" \
     --parameters serviceSettingDeployAzureAIVision="$(serviceSettingDeployAzureAIVision)" \
     --parameters serviceSettingDeployAzureSpeech="$(serviceSettingDeployAzureSpeech)" \
     --parameters serviceSettingDeployAIDocIntelligence="$(serviceSettingDeployAIDocIntelligence)" \
     --parameters disableContributorAccessForUsers="$(disableContributorAccessForUsers)" \
     --debug
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-enterprise-scale-ml/environment_setup/aifactory/bicep'
- task: AzureCLI@2
  displayName: '07_az_remove_ip_from_seeding_keyvault_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptLocation: inlineScript
    scriptType: bash
    inlineScript: | 
     az account set --subscription "$(admin_bicep_input_keyvault_subscription)"
     az keyvault network-rule remove --resource-group "$(admin_bicep_kv_fw_rg)" --name "$(admin_bicep_kv_fw)" --ip-address "$(admin_ip_fw)"
  condition: always()
- task: AzureCLI@2
  displayName: '08_az_remove_ips_from_ACR_FW_whitelist'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      # Get the registry name and IPs from previous task
      registryName="$(acr_registry_name)"
      added_ips_string="$(acr_added_ips)"

      echo "Registry name: $registryName"
      echo "IPs to remove: $added_ips_string"

      # Check if we have IPs to remove
      if [ -n "$added_ips_string" ]; then
        echo "Cleaning up: Removing IPs and ranges that were added during ACR operations"

        # Convert comma-separated string to array
        IFS=',' read -ra ADDED_IPS <<< "$added_ips_string"

        for ip in "${ADDED_IPS[@]}"; do
          if [ -n "$ip" ]; then
            echo "Removing IP/range from ACR whitelist: $ip"
            az acr network-rule remove --name "$registryName" --ip-address "$ip" || echo "Failed to remove $ip or it was already removed"
          fi
        done

        echo "ACR firewall cleanup completed."
      else
        echo "No IPs to remove from ACR"
      fi
  condition: always()
