trigger:
  branches:
    include:
      - project*
variables:
  - template: ../variables/variables.yaml
stages:
- stage: Dev_GenAI_Project
  displayName: Dev GenAI Project
  variables:
    dev_test_prod: "dev"
    dev_test_prod_sub_id: "$(dev_sub_id)"
    network_env: "$(network_env_dev)"
  jobs:
    - deployment: ESGenAI_Networking
      condition: and(eq(variables['runNetworkingVar'], 'true'),eq(variables['BYO_subnets'], 'false'))
      displayName: Deploy Private Network
      timeoutInMinutes: 120
      pool:
        vmImage: windows-2022
      environment: Dev  
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-1-genai-networking.yaml
                parameters:
                  serviceConnection: ${{ variables.dev_service_connection }}
                  serviceConnectionSeeding: ${{ variables.dev_seeding_kv_service_connection }}
    - deployment: ESGenAI_Services
      condition: or(succeeded(), eq(variables['runNetworkingVar'], 'false'), eq(variables['BYO_subnets'], 'true'))
      dependsOn: ESGenAI_Networking
      displayName: Deploy GenAI services,Personas,RBAC,ACL,CAF & WAF Policys
      timeoutInMinutes: 240  # Increased timeout to accommodate retries
      pool:
        vmImage: windows-2022
      environment: Dev  
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.dev_service_connection }}
                  serviceConnectionSeeding: ${{ variables.dev_seeding_kv_service_connection }}
              # Record the result of the initial deploy attempt (same pattern as Stage/Prod)
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if previous deploy failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    Write-Host "##vso[task.setvariable variable=lastAttemptFailed]true"
                    Write-Host "Initial deploy failed -> lastAttemptFailed=true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if previous deploy succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    Write-Host "##vso[task.setvariable variable=lastAttemptFailed]false"
                    Write-Host "Initial deploy succeeded -> lastAttemptFailed=false"
              # First Retry: Wait and retry on failure (if enabled and maxRetryAttempts >= 2)
              - task: PowerShell@2
                displayName: 'Wait before retry 1'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '2'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutes = "$(retryMinutes)"
                    $retrySeconds = [int]$retryMinutes * 60
                    Write-Host "Attempt 1 failed. Waiting $retryMinutes minutes ($retrySeconds seconds) before retry 1..."
                    
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Wait completed. Starting retry attempt 1..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.dev_service_connection }}
                  serviceConnectionSeeding: ${{ variables.dev_seeding_kv_service_connection }}
              # Record the result of the retry attempt so the next (final) retry only runs when this attempt failed
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed based on Agent.JobStatus (retry 1)'
                condition: always()
                inputs:
                  targetType: 'inline'
                  script: |
                    Write-Host "Agent.JobStatus = '$(Agent.JobStatus)'"
                    if ("$(Agent.JobStatus)" -eq 'Failed') {
                      echo "##vso[task.setvariable variable=lastAttemptFailed]true"
                    } else {
                      echo "##vso[task.setvariable variable=lastAttemptFailed]false"
                    }
              # Second Retry: Extended wait and retry on failure (if enabled and maxRetryAttempts >= 3)
              - task: PowerShell@2
                displayName: 'Extended wait before retry 2'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '3'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutesExtended = "$(retryMinutesExtended)"
                    $retrySeconds = [int]$retryMinutesExtended * 60
                    Write-Host "Attempt 2 failed. Waiting $retryMinutesExtended minutes ($retrySeconds seconds) before final retry..."
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Extended wait completed. Starting final retry attempt..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.dev_service_connection }}
                  serviceConnectionSeeding: ${{ variables.dev_seeding_kv_service_connection }}
- stage: Stage_GenAI_Project
  displayName: Stage GenAI Project
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), succeeded('Dev_GenAI_Project'), eq(variables['deployToStage'], 'true'))
  dependsOn: Dev_GenAI_Project
  variables:
    dev_test_prod: "test"
    dev_test_prod_sub_id: "$(test_sub_id)"
    network_env: "$(network_env_stage)"
  jobs:
    - deployment: ESGenAI_Networking
      condition: and(eq(variables['runNetworkingVar'], 'true'),eq(variables['BYO_subnets'], 'false'))
      displayName: Deploy Private Network
      timeoutInMinutes: 240
      pool:
        vmImage: windows-2022
      environment: Stage  
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-1-genai-networking.yaml
                parameters:
                  serviceConnection: ${{ variables.test_service_connection }}
                  serviceConnectionSeeding: ${{ variables.test_seeding_kv_service_connection }}
    - deployment: ESGenAI_Services
      condition: or(succeeded(), eq(variables['runNetworkingVar'], 'false'), eq(variables['BYO_subnets'], 'true'))
      dependsOn: ESGenAI_Networking
      displayName: Deploy GenAI services,Personas,RBAC,ACL,CAF & WAF Policys
      timeoutInMinutes: 240  # Increased timeout to accommodate retries
      pool:
        vmImage: windows-2022
      environment: Stage  
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.test_service_connection }}
                  serviceConnectionSeeding: ${{ variables.test_seeding_kv_service_connection }}
              # Record the result of the last deploy attempt in a variable so retries only trigger when that specific attempt failed
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if previous deploy failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if previous deploy succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
              # First Retry: Wait and retry on failure (if enabled and maxRetryAttempts >= 2)
              - task: PowerShell@2
                displayName: 'Wait before retry 1'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '2'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutes = "$(retryMinutes)"
                    $retrySeconds = [int]$retryMinutes * 60
                    Write-Host "Attempt 1 failed. Waiting $retryMinutes minutes ($retrySeconds seconds) before retry 1..."
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Wait completed. Starting retry attempt 1..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.test_service_connection }}
                  serviceConnectionSeeding: ${{ variables.test_seeding_kv_service_connection }}
              # Record the result of the retry attempt so the next retry only runs when this attempt failed
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if retry 1 failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if retry 1 succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
              # Second Retry: Wait and retry on failure (if enabled and maxRetryAttempts >= 3)
              - task: PowerShell@2
                displayName: 'Wait before retry 2'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '3'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutesExtended = "$(retryMinutesExtended)"
                    $retrySeconds = [int]$retryMinutesExtended * 60
                    Write-Host "Attempt 2 failed. Waiting $retryMinutesExtended minutes ($retrySeconds seconds) before retry 2..."
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Wait completed. Starting final retry attempt..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.test_service_connection }}
                  serviceConnectionSeeding: ${{ variables.test_seeding_kv_service_connection }}
              # Record the result of the final retry attempt (optional)
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if final retry failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if final retry succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
- stage: Prod_GenAI_Project
  displayName: Prod GenAI Project
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), succeeded('Stage_GenAI_Project'), eq(variables['deployToProd'], 'true'))
  dependsOn: Stage_GenAI_Project
  variables:
    dev_test_prod: "prod"
    dev_test_prod_sub_id: "$(prod_sub_id)"
    network_env: "$(network_env_prod)"
  jobs:
    - deployment: ESGenAI_Networking
      condition: and(eq(variables['runNetworkingVar'], 'true'),eq(variables['BYO_subnets'], 'false'))
      displayName: Deploy Private Network
      timeoutInMinutes: 120
      pool:
        vmImage: windows-2022
      environment: Prod  
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-1-genai-networking.yaml
                parameters:
                  serviceConnection: ${{ variables.prod_service_connection }}
                  serviceConnectionSeeding: ${{ variables.prod_seeding_kv_service_connection }}
    - deployment: ESGenAI_Services
      condition: or(succeeded(), eq(variables['runNetworkingVar'], 'false'), eq(variables['BYO_subnets'], 'true'))
      dependsOn: ESGenAI_Networking
      displayName: Deploy GenAI services,Personas,RBAC,ACL,CAF & WAF Policys
      timeoutInMinutes: 240  # Increased timeout to accommodate retries
      pool:
        vmImage: windows-2022
      environment: Prod
      variables:
        dev_test_prod: "prod"
        dev_test_prod_sub_id: "$(prod_sub_id)"
        network_env: "$(network_env_prod)"
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
                submodules: recursive
                fetchDepth: 0
                displayName: 'Checkout with submodules'
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.prod_service_connection }}
                  serviceConnectionSeeding: ${{ variables.prod_seeding_kv_service_connection }}
              # Record the result of the last deploy attempt in a variable so retries only trigger when that specific attempt failed
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if previous deploy failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if previous deploy succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
              # First Retry: Wait and retry on failure (if enabled and maxRetryAttempts >= 2)
              - task: PowerShell@2
                displayName: 'Wait before retry 1'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '2'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutes = "$(retryMinutes)"
                    $retrySeconds = [int]$retryMinutes * 60
                    Write-Host "Attempt 1 failed. Waiting $retryMinutes minutes ($retrySeconds seconds) before retry 1..."
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Wait completed. Starting retry attempt 1..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.prod_service_connection }}
                  serviceConnectionSeeding: ${{ variables.prod_seeding_kv_service_connection }}
              # Record the result of the retry attempt so the next (final) retry only runs when this attempt failed
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if retry 1 failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if retry 1 succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
              # Second Retry: Wait and retry on failure (if enabled and maxRetryAttempts >= 3)
              - task: PowerShell@2
                displayName: 'Wait before retry 2'
                condition: and(eq(variables['lastAttemptFailed'], 'true'), eq(variables['enableRetries'], 'true'), ge(variables['maxRetryAttempts'], '3'))
                inputs:
                  targetType: 'inline'
                  script: |
                    $retryMinutesExtended = "$(retryMinutesExtended)"
                    $retrySeconds = [int]$retryMinutesExtended * 60
                    Write-Host "Attempt 2 failed. Waiting $retryMinutesExtended minutes ($retrySeconds seconds) before retry 2..."
                    Start-Sleep -Seconds $retrySeconds
                    Write-Host "Wait completed. Starting final retry attempt..."
              - template: ./jobs/job-2-genai-services.yaml
                parameters:
                  serviceConnection: ${{ variables.prod_service_connection }}
                  serviceConnectionSeeding: ${{ variables.prod_seeding_kv_service_connection }}
              # Record the result of the final retry attempt (optional)
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = true if final retry failed'
                condition: failed()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]true"
              - task: PowerShell@2
                displayName: 'Set lastAttemptFailed = false if final retry succeeded'
                condition: succeeded()
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=lastAttemptFailed]false"
